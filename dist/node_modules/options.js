"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = getOptions;

var _expandHomeDir = require('expand-home-dir');

var _expandHomeDir2 = _interopRequireDefault(_expandHomeDir);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _yargonaut = require('yargonaut');

var _yargonaut2 = _interopRequireDefault(_yargonaut);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _output = require('output');

var _output2 = _interopRequireDefault(_output);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _opts = undefined;

// I might as well just have exported the options object itself, but it bugged me that the calls to output() might then
// produce output (or fail, in case of invalid arguments) ahead of the first outputTitle() call.
function getOptions() {
    if (_opts) {
        return _opts;
    }

    // Yes, the rc package could be used to handle this, but since it does much more than reading ~/.handoutrc I opted for a much simpler approach
    var rcpath = (0, _expandHomeDir2.default)('~/.handoutrc');

    var defaults = require('../../defaults.json');

    try {
        Object.assign(defaults, JSON.parse(_fs2.default.readFileSync(rcpath, { encoding: 'utf8' })));
        (0, _output2.default)('Using default values from ' + rcpath);
    } catch (e) {
        console.log(e.message);
        // No .handoutrc file found, moving on
        (0, _output2.default)('No ' + rcpath + ' file found');
    }

    var args = {
        'app': {
            alias: 'a',
            demand: true,
            describe: 'App identifier (e.g. deepsea, passerby, ...)'
        },
        'targets': {
            alias: 't',
            demand: true,
            array: true,
            describe: 'Space separated list of targets to deploy to(e.g. "--targets callisto titan"). Use "all" if you want to deploy to all available hosts'
        },
        'check': {
            alias: 'c',
            type: 'boolean',
            default: defaults.check,
            describe: 'Perform check, don\'t change anything'
        },
        'username': {
            alias: 'u',
            default: defaults.username || process.env.USER,
            describe: 'Username to use when connecting to deployment server'
        },
        'keyfile': {
            alias: 'k',
            default: defaults.keyfile,
            describe: 'Path to private key'
        },
        'server': {
            alias: 's',
            default: defaults.server,
            describe: 'Full server URL'
        }
    };

    _yargonaut2.default.style('cyan').style('yellow', 'required').errorsStyle('red.bold');

    var usage = _output.outputStyles.usage;
    var cliArg = _output.outputStyles.cliArg;

    _yargs2.default.options(args).usage('\n' + usage('USAGE') + ': $0 -a ' + cliArg('appIdentifier') + ' -t ' + cliArg('target') + '[ ' + cliArg('target') + ' ...]').alias('help', 'h').help('help').example('$0 -a deepsea -t callisto', 'Deploy app "deepsea" to target "callisto"').example('$0 -a passerby -t all -u some_user -k ~/.ssh/id_rsa.someuser --check', 'Perform a mock-deployment of "passerby" to all available targets, connecting as user "some_user", using private key file "~/.ssh/id_rsa.someuser".');

    var raw = _yargs2.default.argv;

    _opts = {};

    // Only export full names
    Object.keys(args).forEach(function (k) {
        return _opts[k] = raw[k];
    });

    return _opts;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvb3B0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUE7Ozs7O2tCQWFZLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUpsQyxJQUFJLEtBQUssWUFBQTs7OztBQUFBLEFBSU0sU0FBUyxVQUFVLEdBQUc7QUFDakMsUUFBSSxLQUFLLEVBQUU7QUFDUCxlQUFPLEtBQUssQ0FBQTtLQUNmOzs7QUFBQSxBQUdELFFBQU0sTUFBTSxHQUFHLDZCQUFjLGNBQWMsQ0FBQyxDQUFBOztBQUU1QyxRQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQTs7QUFFN0MsUUFBSTtBQUNBLGNBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBRyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUMsUUFBUSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2hGLDZEQUFvQyxNQUFNLENBQUcsQ0FBQTtLQUNoRCxDQUNELE9BQU8sQ0FBQyxFQUFFO0FBQ04sZUFBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDOztBQUFBLEFBRXRCLHNDQUFhLE1BQU0saUJBQWMsQ0FBQTtLQUNwQzs7QUFFRCxRQUFNLElBQUksR0FBRztBQUNULGFBQUssRUFBRTtBQUNILGlCQUFLLEVBQUUsR0FBRztBQUNWLGtCQUFNLEVBQUUsSUFBSTtBQUNaLG9CQUFRLEVBQUUsOENBQThDO1NBQzNEO0FBQ0QsaUJBQVMsRUFBRTtBQUNQLGlCQUFLLEVBQUUsR0FBRztBQUNWLGtCQUFNLEVBQUUsSUFBSTtBQUNaLGlCQUFLLEVBQUUsSUFBSTtBQUNYLG9CQUFRLEVBQUUsdUlBQXVJO1NBQ3BKO0FBQ0QsZUFBTyxFQUFFO0FBQ0wsaUJBQUssRUFBRSxHQUFHO0FBQ1YsZ0JBQUksRUFBRSxTQUFTO0FBQ2YsbUJBQU8sRUFBRSxRQUFRLENBQUMsS0FBSztBQUN2QixvQkFBUSxFQUFFLHVDQUF1QztTQUNwRDtBQUNELGtCQUFVLEVBQUU7QUFDUixpQkFBSyxFQUFFLEdBQUc7QUFDVixtQkFBTyxFQUFFLFFBQVEsQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJO0FBQzlDLG9CQUFRLEVBQUUsc0RBQXNEO1NBQ25FO0FBQ0QsaUJBQVMsRUFBRTtBQUNQLGlCQUFLLEVBQUUsR0FBRztBQUNWLG1CQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU87QUFDekIsb0JBQVEsRUFBRSxxQkFBcUI7U0FDbEM7QUFDRCxnQkFBUSxFQUFFO0FBQ04saUJBQUssRUFBRSxHQUFHO0FBQ1YsbUJBQU8sRUFBRSxRQUFRLENBQUMsTUFBTTtBQUN4QixvQkFBUSxFQUFFLGlCQUFpQjtTQUM5QjtLQUNKLENBQUE7O0FBRUQsd0JBQ0ssS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUNiLEtBQUssQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQzNCLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQTs7UUFFckIsS0FBSyxXQWxFQSxZQUFZLENBa0VqQixLQUFLO1FBQUUsTUFBTSxXQWxFUixZQUFZLENBa0VWLE1BQU07O0FBRXBCLG9CQUNLLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FDYixLQUFLLFFBQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBVyxNQUFNLENBQUMsZUFBZSxDQUFDLFlBQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFLLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBUSxDQUMvRyxLQUFLLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQ1osT0FBTyxDQUFDLDJCQUEyQixFQUFFLDJDQUEyQyxDQUFDLENBQ2pGLE9BQU8sQ0FBQyxzRUFBc0UsRUFBRSxvSkFBb0osQ0FBQyxDQUFBOztBQUUxTyxRQUFNLEdBQUcsR0FBRyxnQkFBTSxJQUFJLENBQUE7O0FBRXRCLFNBQUssR0FBRyxFQUFFOzs7QUFBQSxBQUdWLFVBQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztlQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQUEsQ0FBQyxDQUFBOztBQUVqRCxXQUFPLEtBQUssQ0FBQTtDQUNmIiwiZmlsZSI6Im9wdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5pbXBvcnQgZXhwYW5kSG9tZURpciBmcm9tICdleHBhbmQtaG9tZS1kaXInXG5pbXBvcnQgZnMgZnJvbSAnZnMnXG5pbXBvcnQgeWFyZ29uYXV0IGZyb20gJ3lhcmdvbmF1dCdcbmltcG9ydCB5YXJncyBmcm9tICd5YXJncydcblxuaW1wb3J0IG91dHB1dCwge291dHB1dFN0eWxlc30gZnJvbSAnb3V0cHV0J1xuXG5sZXQgX29wdHNcblxuLy8gSSBtaWdodCBhcyB3ZWxsIGp1c3QgaGF2ZSBleHBvcnRlZCB0aGUgb3B0aW9ucyBvYmplY3QgaXRzZWxmLCBidXQgaXQgYnVnZ2VkIG1lIHRoYXQgdGhlIGNhbGxzIHRvIG91dHB1dCgpIG1pZ2h0IHRoZW5cbi8vIHByb2R1Y2Ugb3V0cHV0IChvciBmYWlsLCBpbiBjYXNlIG9mIGludmFsaWQgYXJndW1lbnRzKSBhaGVhZCBvZiB0aGUgZmlyc3Qgb3V0cHV0VGl0bGUoKSBjYWxsLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3B0aW9ucygpIHtcbiAgICBpZiAoX29wdHMpIHtcbiAgICAgICAgcmV0dXJuIF9vcHRzXG4gICAgfVxuXG4gICAgLy8gWWVzLCB0aGUgcmMgcGFja2FnZSBjb3VsZCBiZSB1c2VkIHRvIGhhbmRsZSB0aGlzLCBidXQgc2luY2UgaXQgZG9lcyBtdWNoIG1vcmUgdGhhbiByZWFkaW5nIH4vLmhhbmRvdXRyYyBJIG9wdGVkIGZvciBhIG11Y2ggc2ltcGxlciBhcHByb2FjaFxuICAgIGNvbnN0IHJjcGF0aCA9IGV4cGFuZEhvbWVEaXIoJ34vLmhhbmRvdXRyYycpXG5cbiAgICBsZXQgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi8uLi9kZWZhdWx0cy5qc29uJylcblxuICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZGVmYXVsdHMsIEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHJjcGF0aCwge2VuY29kaW5nOiAndXRmOCd9KSkpXG4gICAgICAgIG91dHB1dChgVXNpbmcgZGVmYXVsdCB2YWx1ZXMgZnJvbSAke3JjcGF0aH1gKVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlLm1lc3NhZ2UpXG4gICAgICAgIC8vIE5vIC5oYW5kb3V0cmMgZmlsZSBmb3VuZCwgbW92aW5nIG9uXG4gICAgICAgIG91dHB1dChgTm8gJHtyY3BhdGh9IGZpbGUgZm91bmRgKVxuICAgIH1cblxuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICdhcHAnOiB7XG4gICAgICAgICAgICBhbGlhczogJ2EnLFxuICAgICAgICAgICAgZGVtYW5kOiB0cnVlLFxuICAgICAgICAgICAgZGVzY3JpYmU6ICdBcHAgaWRlbnRpZmllciAoZS5nLiBkZWVwc2VhLCBwYXNzZXJieSwgLi4uKScsXG4gICAgICAgIH0sXG4gICAgICAgICd0YXJnZXRzJzoge1xuICAgICAgICAgICAgYWxpYXM6ICd0JyxcbiAgICAgICAgICAgIGRlbWFuZDogdHJ1ZSxcbiAgICAgICAgICAgIGFycmF5OiB0cnVlLFxuICAgICAgICAgICAgZGVzY3JpYmU6ICdTcGFjZSBzZXBhcmF0ZWQgbGlzdCBvZiB0YXJnZXRzIHRvIGRlcGxveSB0byhlLmcuIFwiLS10YXJnZXRzIGNhbGxpc3RvIHRpdGFuXCIpLiBVc2UgXCJhbGxcIiBpZiB5b3Ugd2FudCB0byBkZXBsb3kgdG8gYWxsIGF2YWlsYWJsZSBob3N0cycsXG4gICAgICAgIH0sXG4gICAgICAgICdjaGVjayc6IHtcbiAgICAgICAgICAgIGFsaWFzOiAnYycsXG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICBkZWZhdWx0OiBkZWZhdWx0cy5jaGVjayxcbiAgICAgICAgICAgIGRlc2NyaWJlOiAnUGVyZm9ybSBjaGVjaywgZG9uXFwndCBjaGFuZ2UgYW55dGhpbmcnLFxuICAgICAgICB9LFxuICAgICAgICAndXNlcm5hbWUnOiB7XG4gICAgICAgICAgICBhbGlhczogJ3UnLFxuICAgICAgICAgICAgZGVmYXVsdDogZGVmYXVsdHMudXNlcm5hbWUgfHwgcHJvY2Vzcy5lbnYuVVNFUixcbiAgICAgICAgICAgIGRlc2NyaWJlOiAnVXNlcm5hbWUgdG8gdXNlIHdoZW4gY29ubmVjdGluZyB0byBkZXBsb3ltZW50IHNlcnZlcicsXG4gICAgICAgIH0sXG4gICAgICAgICdrZXlmaWxlJzoge1xuICAgICAgICAgICAgYWxpYXM6ICdrJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IGRlZmF1bHRzLmtleWZpbGUsXG4gICAgICAgICAgICBkZXNjcmliZTogJ1BhdGggdG8gcHJpdmF0ZSBrZXknLFxuICAgICAgICB9LFxuICAgICAgICAnc2VydmVyJzoge1xuICAgICAgICAgICAgYWxpYXM6ICdzJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IGRlZmF1bHRzLnNlcnZlcixcbiAgICAgICAgICAgIGRlc2NyaWJlOiAnRnVsbCBzZXJ2ZXIgVVJMJyxcbiAgICAgICAgfSxcbiAgICB9XG5cbiAgICB5YXJnb25hdXRcbiAgICAgICAgLnN0eWxlKCdjeWFuJylcbiAgICAgICAgLnN0eWxlKCd5ZWxsb3cnLCAncmVxdWlyZWQnKVxuICAgICAgICAuZXJyb3JzU3R5bGUoJ3JlZC5ib2xkJylcblxuICAgIGNvbnN0IHt1c2FnZSwgY2xpQXJnfSA9IG91dHB1dFN0eWxlc1xuXG4gICAgeWFyZ3NcbiAgICAgICAgLm9wdGlvbnMoYXJncylcbiAgICAgICAgLnVzYWdlKGBcXG4ke3VzYWdlKCdVU0FHRScpfTogJDAgLWEgJHtjbGlBcmcoJ2FwcElkZW50aWZpZXInKX0gLXQgJHtjbGlBcmcoJ3RhcmdldCcpfVsgJHtjbGlBcmcoJ3RhcmdldCcpfSAuLi5dYClcbiAgICAgICAgLmFsaWFzKCdoZWxwJywgJ2gnKVxuICAgICAgICAuaGVscCgnaGVscCcpXG4gICAgICAgIC5leGFtcGxlKCckMCAtYSBkZWVwc2VhIC10IGNhbGxpc3RvJywgJ0RlcGxveSBhcHAgXCJkZWVwc2VhXCIgdG8gdGFyZ2V0IFwiY2FsbGlzdG9cIicpXG4gICAgICAgIC5leGFtcGxlKCckMCAtYSBwYXNzZXJieSAtdCBhbGwgLXUgc29tZV91c2VyIC1rIH4vLnNzaC9pZF9yc2Euc29tZXVzZXIgLS1jaGVjaycsICdQZXJmb3JtIGEgbW9jay1kZXBsb3ltZW50IG9mIFwicGFzc2VyYnlcIiB0byBhbGwgYXZhaWxhYmxlIHRhcmdldHMsIGNvbm5lY3RpbmcgYXMgdXNlciBcInNvbWVfdXNlclwiLCB1c2luZyBwcml2YXRlIGtleSBmaWxlIFwifi8uc3NoL2lkX3JzYS5zb21ldXNlclwiLicpXG5cbiAgICBjb25zdCByYXcgPSB5YXJncy5hcmd2XG5cbiAgICBfb3B0cyA9IHt9XG5cbiAgICAvLyBPbmx5IGV4cG9ydCBmdWxsIG5hbWVzXG4gICAgT2JqZWN0LmtleXMoYXJncykuZm9yRWFjaChrID0+IF9vcHRzW2tdID0gcmF3W2tdKVxuXG4gICAgcmV0dXJuIF9vcHRzXG59Il19