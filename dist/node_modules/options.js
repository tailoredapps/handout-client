'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getOptions;

var _expandHomeDir = require('expand-home-dir');

var _expandHomeDir2 = _interopRequireDefault(_expandHomeDir);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _yargonaut = require('yargonaut');

var _yargonaut2 = _interopRequireDefault(_yargonaut);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _commands = require('commands');

var _commands2 = _interopRequireDefault(_commands);

var _output = require('output');

var _output2 = _interopRequireDefault(_output);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _opts = undefined;

var usage = _output.outputStyles.usage;
var cliArg = _output.outputStyles.cliArg;

function registerOptions(_ref, parentOptions) {
  var command = _ref.command;
  var desc = _ref.desc;
  var usageStr = _ref.usageStr;
  var examples = _ref.examples;
  var options = _ref.options;

  _yargs2.default.command(command, desc, function (yargs) {
    yargs.options(Object.assign({}, options, parentOptions)).help('help').alias('help', 'h').usage('\n' + usage('USAGE') + ': $0 ' + usageStr);

    if (examples) {
      examples.forEach(function (_ref2) {
        var cli = _ref2.cli;
        var desc = _ref2.desc;
        return yargs.example('$0 ' + cli, desc);
      });
    }
  });
}

function getOptions() {
  if (_opts) {
    return _opts;
  }

  // Yes, the rc package could be used to handle this, but since it does much more than reading ~/.handoutrc I opted for a much simpler approach
  var rcpath = (0, _expandHomeDir2.default)('~/.handoutrc');

  var defaults = require('../../defaults.json');

  try {
    Object.assign(defaults, JSON.parse(_fs2.default.readFileSync(rcpath, { encoding: 'utf8' })));
    (0, _output2.default)('Using default values from ' + rcpath);
  } catch (e) {
    // No .handoutrc file found, moving on
    (0, _output2.default)('No ' + rcpath + ' file found');
  }

  _yargonaut2.default.style('cyan').style('yellow', 'required').errorsStyle('red.bold');

  _yargs2.default.help('help').alias('help', 'h').usage('\n' + usage('USAGE') + ': $0 ' + cliArg('command') + ' [options]').epilogue('To get a list of available options for each command, use "$0 ' + cliArg('command') + ' -h" (e.g. "$0 ' + cliArg('deploy') + ' -h")');

  var _getCommands = (0, _commands2.default)(defaults);

  var commands = _getCommands.commands;
  var globalOptions = _getCommands.globalOptions;

  commands.forEach(function (c) {
    return registerOptions(c, globalOptions);
  });

  var raw = _yargs2.default.argv;

  var _raw$_ = _slicedToArray(raw._, 1);

  var command = _raw$_[0];

  if (!command) {
    throw new Error('No command provided. Use -h to see available commands and options.');
  }

  _opts = {
    command: command,
    payload: {}
  };

  Object.keys(globalOptions).forEach(function (k) {
    return _opts[k] = raw[k];
  });

  var commandDefinition = commands.find(function (c) {
    return c.command === command;
  });

  if (commandDefinition.options) {
    Object.keys(commandDefinition.options).forEach(function (k) {
      return _opts.payload[k] = raw[k];
    });
  }

  return _opts;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvb3B0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUE7Ozs7Ozs7a0JBNkJZLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFuQmxDLElBQUksS0FBSyxZQUFBLENBQUE7O0lBRUYsS0FBSyx3QkFBTCxLQUFLO0lBQUUsTUFBTSx3QkFBTixNQUFNOztBQUVwQixTQUFTLGVBQWUsT0FBZ0QsYUFBYSxFQUFFO01BQTVELE9BQU8sUUFBUCxPQUFPO01BQUUsSUFBSSxRQUFKLElBQUk7TUFBRSxRQUFRLFFBQVIsUUFBUTtNQUFFLFFBQVEsUUFBUixRQUFRO01BQUUsT0FBTyxRQUFQLE9BQU87O0FBQ25FLGtCQUNHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQUEsS0FBSyxFQUFJO0FBQy9CLFNBQUssQ0FDRixPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsQ0FDWixLQUFLLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUNsQixLQUFLLFFBQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFRLFFBQVEsQ0FBRyxDQUFBOztBQUUvQyxRQUFJLFFBQVEsRUFBRTtBQUNaLGNBQVEsQ0FBQyxPQUFPLENBQUM7WUFBRSxHQUFHLFNBQUgsR0FBRztZQUFFLElBQUksU0FBSixJQUFJO2VBQU0sS0FBSyxDQUFDLE9BQU8sU0FBTyxHQUFHLEVBQUksSUFBSSxDQUFDO09BQUEsQ0FBQyxDQUFBO0tBQ3BFO0dBQ0YsQ0FBQyxDQUFBO0NBQ0w7O0FBRWMsU0FBUyxVQUFVLEdBQUk7QUFDcEMsTUFBSSxLQUFLLEVBQUU7QUFDVCxXQUFPLEtBQUssQ0FBQTtHQUNiOzs7QUFBQSxBQUdELE1BQU0sTUFBTSxHQUFHLDZCQUFjLGNBQWMsQ0FBQyxDQUFBOztBQUU1QyxNQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQTs7QUFFN0MsTUFBSTtBQUNGLFVBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBRyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xGLHlEQUFvQyxNQUFNLENBQUcsQ0FBQTtHQUM5QyxDQUFDLE9BQU8sQ0FBQyxFQUFFOztBQUVWLGtDQUFhLE1BQU0saUJBQWMsQ0FBQTtHQUNsQzs7QUFFRCxzQkFDRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQ2IsS0FBSyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FDM0IsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFBOztBQUUxQixrQkFDRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQ1osS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FDbEIsS0FBSyxRQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBUSxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFhLENBQy9ELFFBQVEsbUVBQWlFLE1BQU0sQ0FBQyxTQUFTLENBQUMsdUJBQWtCLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBUSxDQUFBOztxQkFFckcsd0JBQVksUUFBUSxDQUFDOztNQUFoRCxRQUFRLGdCQUFSLFFBQVE7TUFBRSxhQUFhLGdCQUFiLGFBQWE7O0FBRTlCLFVBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1dBQUksZUFBZSxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUM7R0FBQSxDQUFDLENBQUE7O0FBRXhELE1BQU0sR0FBRyxHQUFHLGdCQUFNLElBQUksQ0FBQTs7OEJBQ0YsR0FBRyxDQUFDLENBQUM7O01BQWpCLE9BQU87O0FBRWYsTUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNaLFVBQU0sSUFBSSxLQUFLLENBQUMsb0VBQW9FLENBQUMsQ0FBQTtHQUN0Rjs7QUFFRCxPQUFLLEdBQUc7QUFDTixXQUFPLEVBQVAsT0FBTztBQUNQLFdBQU8sRUFBRSxFQUFFO0dBQ1osQ0FBQTs7QUFFRCxRQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7V0FBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztHQUFBLENBQUMsQ0FBQTs7QUFFMUQsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQztXQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssT0FBTztHQUFBLENBQUMsQ0FBQTs7QUFFbkUsTUFBSSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUU7QUFDN0IsVUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO2FBQUksS0FBSyxDQUFDLE9BQU8sQ0FBRSxDQUFDLENBQUUsR0FBRyxHQUFHLENBQUUsQ0FBQyxDQUFFO0tBQUEsQ0FBQyxDQUFBO0dBQ25GOztBQUVELFNBQU8sS0FBSyxDQUFBO0NBQ2IiLCJmaWxlIjoib3B0aW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgZXhwYW5kSG9tZURpciBmcm9tICdleHBhbmQtaG9tZS1kaXInXG5pbXBvcnQgZnMgZnJvbSAnZnMnXG5pbXBvcnQgeWFyZ29uYXV0IGZyb20gJ3lhcmdvbmF1dCdcbmltcG9ydCB5YXJncyBmcm9tICd5YXJncydcblxuaW1wb3J0IGdldENvbW1hbmRzIGZyb20gJ2NvbW1hbmRzJ1xuaW1wb3J0IG91dHB1dCwgeyBvdXRwdXRTdHlsZXMgfSBmcm9tICdvdXRwdXQnXG5cbmxldCBfb3B0c1xuXG5jb25zdCB7dXNhZ2UsIGNsaUFyZ30gPSBvdXRwdXRTdHlsZXNcblxuZnVuY3Rpb24gcmVnaXN0ZXJPcHRpb25zICh7Y29tbWFuZCwgZGVzYywgdXNhZ2VTdHIsIGV4YW1wbGVzLCBvcHRpb25zfSwgcGFyZW50T3B0aW9ucykge1xuICB5YXJnc1xuICAgIC5jb21tYW5kKGNvbW1hbmQsIGRlc2MsIHlhcmdzID0+IHtcbiAgICAgIHlhcmdzXG4gICAgICAgIC5vcHRpb25zKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHBhcmVudE9wdGlvbnMpKVxuICAgICAgICAuaGVscCgnaGVscCcpXG4gICAgICAgIC5hbGlhcygnaGVscCcsICdoJylcbiAgICAgICAgLnVzYWdlKGBcXG4ke3VzYWdlKCdVU0FHRScpfTogJDAgJHt1c2FnZVN0cn1gKVxuXG4gICAgICBpZiAoZXhhbXBsZXMpIHtcbiAgICAgICAgZXhhbXBsZXMuZm9yRWFjaCgoe2NsaSwgZGVzY30pID0+IHlhcmdzLmV4YW1wbGUoYCQwICR7Y2xpfWAsIGRlc2MpKVxuICAgICAgfVxuICAgIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wdGlvbnMgKCkge1xuICBpZiAoX29wdHMpIHtcbiAgICByZXR1cm4gX29wdHNcbiAgfVxuXG4gIC8vIFllcywgdGhlIHJjIHBhY2thZ2UgY291bGQgYmUgdXNlZCB0byBoYW5kbGUgdGhpcywgYnV0IHNpbmNlIGl0IGRvZXMgbXVjaCBtb3JlIHRoYW4gcmVhZGluZyB+Ly5oYW5kb3V0cmMgSSBvcHRlZCBmb3IgYSBtdWNoIHNpbXBsZXIgYXBwcm9hY2hcbiAgY29uc3QgcmNwYXRoID0gZXhwYW5kSG9tZURpcignfi8uaGFuZG91dHJjJylcblxuICBsZXQgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi8uLi9kZWZhdWx0cy5qc29uJylcblxuICB0cnkge1xuICAgIE9iamVjdC5hc3NpZ24oZGVmYXVsdHMsIEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHJjcGF0aCwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pKSlcbiAgICBvdXRwdXQoYFVzaW5nIGRlZmF1bHQgdmFsdWVzIGZyb20gJHtyY3BhdGh9YClcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5vIC5oYW5kb3V0cmMgZmlsZSBmb3VuZCwgbW92aW5nIG9uXG4gICAgb3V0cHV0KGBObyAke3JjcGF0aH0gZmlsZSBmb3VuZGApXG4gIH1cblxuICB5YXJnb25hdXRcbiAgICAuc3R5bGUoJ2N5YW4nKVxuICAgIC5zdHlsZSgneWVsbG93JywgJ3JlcXVpcmVkJylcbiAgICAuZXJyb3JzU3R5bGUoJ3JlZC5ib2xkJylcblxuICB5YXJnc1xuICAgIC5oZWxwKCdoZWxwJylcbiAgICAuYWxpYXMoJ2hlbHAnLCAnaCcpXG4gICAgLnVzYWdlKGBcXG4ke3VzYWdlKCdVU0FHRScpfTogJDAgJHtjbGlBcmcoJ2NvbW1hbmQnKX0gW29wdGlvbnNdYClcbiAgICAuZXBpbG9ndWUoYFRvIGdldCBhIGxpc3Qgb2YgYXZhaWxhYmxlIG9wdGlvbnMgZm9yIGVhY2ggY29tbWFuZCwgdXNlIFwiJDAgJHtjbGlBcmcoJ2NvbW1hbmQnKX0gLWhcIiAoZS5nLiBcIiQwICR7Y2xpQXJnKCdkZXBsb3knKX0gLWhcIilgKVxuXG4gIGNvbnN0IHtjb21tYW5kcywgZ2xvYmFsT3B0aW9uc30gPSBnZXRDb21tYW5kcyhkZWZhdWx0cylcblxuICBjb21tYW5kcy5mb3JFYWNoKGMgPT4gcmVnaXN0ZXJPcHRpb25zKGMsIGdsb2JhbE9wdGlvbnMpKVxuXG4gIGNvbnN0IHJhdyA9IHlhcmdzLmFyZ3ZcbiAgY29uc3QgWyBjb21tYW5kIF0gPSByYXcuX1xuXG4gIGlmICghY29tbWFuZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gY29tbWFuZCBwcm92aWRlZC4gVXNlIC1oIHRvIHNlZSBhdmFpbGFibGUgY29tbWFuZHMgYW5kIG9wdGlvbnMuJylcbiAgfVxuXG4gIF9vcHRzID0ge1xuICAgIGNvbW1hbmQsXG4gICAgcGF5bG9hZDoge31cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGdsb2JhbE9wdGlvbnMpLmZvckVhY2goayA9PiBfb3B0c1trXSA9IHJhd1trXSlcblxuICBjb25zdCBjb21tYW5kRGVmaW5pdGlvbiA9IGNvbW1hbmRzLmZpbmQoYyA9PiBjLmNvbW1hbmQgPT09IGNvbW1hbmQpXG5cbiAgaWYgKGNvbW1hbmREZWZpbml0aW9uLm9wdGlvbnMpIHtcbiAgICBPYmplY3Qua2V5cyhjb21tYW5kRGVmaW5pdGlvbi5vcHRpb25zKS5mb3JFYWNoKGsgPT4gX29wdHMucGF5bG9hZFsgayBdID0gcmF3WyBrIF0pXG4gIH1cblxuICByZXR1cm4gX29wdHNcbn1cbiJdfQ==