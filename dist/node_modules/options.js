'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getOptions;

var _expandHomeDir = require('expand-home-dir');

var _expandHomeDir2 = _interopRequireDefault(_expandHomeDir);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _yargonaut = require('yargonaut');

var _yargonaut2 = _interopRequireDefault(_yargonaut);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _output = require('output');

var _output2 = _interopRequireDefault(_output);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _opts = undefined;

// I might as well just have exported the options object itself, but it bugged me that the calls to output() might then
// produce output (or fail, in case of invalid arguments) ahead of the first outputTitle() call.
function getOptions() {
  if (_opts) {
    return _opts;
  }

  // Yes, the rc package could be used to handle this, but since it does much more than reading ~/.handoutrc I opted for a much simpler approach
  var rcpath = (0, _expandHomeDir2.default)('~/.handoutrc');

  var defaults = require('../../defaults.json');

  try {
    Object.assign(defaults, JSON.parse(_fs2.default.readFileSync(rcpath, { encoding: 'utf8' })));
    (0, _output2.default)('Using default values from ' + rcpath);
  } catch (e) {
    // No .handoutrc file found, moving on
    (0, _output2.default)('No ' + rcpath + ' file found');
  }

  var args = {
    'app': {
      alias: 'a',
      demand: true,
      describe: 'App identifier (e.g. deepsea, passerby, ...)'
    },
    'targets': {
      alias: 't',
      demand: true,
      array: true,
      describe: 'Space separated list of targets to deploy to(e.g. "--targets callisto titan"). Use "all" if you want to deploy to all available hosts'
    },
    'check': {
      alias: 'c',
      type: 'boolean',
      default: defaults.check,
      describe: "Perform check, don't change anything"
    },
    'username': {
      alias: 'u',
      default: defaults.username || process.env.USER,
      describe: 'Username to use when connecting to deployment server'
    },
    'keyfile': {
      alias: 'k',
      default: defaults.keyfile,
      describe: 'Path to private key'
    },
    'server': {
      alias: 's',
      default: defaults.server,
      describe: 'Full server URL'
    }
  };

  _yargonaut2.default.style('cyan').style('yellow', 'required').errorsStyle('red.bold');

  var usage = _output.outputStyles.usage;
  var cliArg = _output.outputStyles.cliArg;

  _yargs2.default.options(args).usage('\n' + usage('USAGE') + ': $0 -a ' + cliArg('appIdentifier') + ' -t ' + cliArg('target') + '[ ' + cliArg('target') + ' ...]').alias('help', 'h').help('help').example('$0 -a deepsea -t callisto', 'Deploy app "deepsea" to target "callisto"').example('$0 -a passerby -t all -u some_user -k ~/.ssh/id_rsa.someuser --check', 'Perform a mock-deployment of "passerby" to all available targets, connecting as user "some_user", using private key file "~/.ssh/id_rsa.someuser".');

  var raw = _yargs2.default.argv;

  _opts = {};

  // Only export full names
  Object.keys(args).forEach(function (k) {
    return _opts[k] = raw[k];
  });

  return _opts;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvb3B0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUE7Ozs7O2tCQWFZLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUpsQyxJQUFJLEtBQUssWUFBQTs7OztBQUFBLEFBSU0sU0FBUyxVQUFVLEdBQUk7QUFDcEMsTUFBSSxLQUFLLEVBQUU7QUFDVCxXQUFPLEtBQUssQ0FBQTtHQUNiOzs7QUFBQSxBQUdELE1BQU0sTUFBTSxHQUFHLDZCQUFjLGNBQWMsQ0FBQyxDQUFBOztBQUU1QyxNQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQTs7QUFFN0MsTUFBSTtBQUNGLFVBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBRyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xGLHlEQUFvQyxNQUFNLENBQUcsQ0FBQTtHQUM5QyxDQUFDLE9BQU8sQ0FBQyxFQUFFOztBQUVWLGtDQUFhLE1BQU0saUJBQWMsQ0FBQTtHQUNsQzs7QUFFRCxNQUFNLElBQUksR0FBRztBQUNYLFNBQUssRUFBRTtBQUNMLFdBQUssRUFBRSxHQUFHO0FBQ1YsWUFBTSxFQUFFLElBQUk7QUFDWixjQUFRLEVBQUUsOENBQThDO0tBQ3pEO0FBQ0QsYUFBUyxFQUFFO0FBQ1QsV0FBSyxFQUFFLEdBQUc7QUFDVixZQUFNLEVBQUUsSUFBSTtBQUNaLFdBQUssRUFBRSxJQUFJO0FBQ1gsY0FBUSxFQUFFLHVJQUF1STtLQUNsSjtBQUNELFdBQU8sRUFBRTtBQUNQLFdBQUssRUFBRSxHQUFHO0FBQ1YsVUFBSSxFQUFFLFNBQVM7QUFDZixhQUFPLEVBQUUsUUFBUSxDQUFDLEtBQUs7QUFDdkIsY0FBUSxFQUFFLHNDQUFzQztLQUNqRDtBQUNELGNBQVUsRUFBRTtBQUNWLFdBQUssRUFBRSxHQUFHO0FBQ1YsYUFBTyxFQUFFLFFBQVEsQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJO0FBQzlDLGNBQVEsRUFBRSxzREFBc0Q7S0FDakU7QUFDRCxhQUFTLEVBQUU7QUFDVCxXQUFLLEVBQUUsR0FBRztBQUNWLGFBQU8sRUFBRSxRQUFRLENBQUMsT0FBTztBQUN6QixjQUFRLEVBQUUscUJBQXFCO0tBQ2hDO0FBQ0QsWUFBUSxFQUFFO0FBQ1IsV0FBSyxFQUFFLEdBQUc7QUFDVixhQUFPLEVBQUUsUUFBUSxDQUFDLE1BQU07QUFDeEIsY0FBUSxFQUFFLGlCQUFpQjtLQUM1QjtHQUNGLENBQUE7O0FBRUQsc0JBQ0csS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUNiLEtBQUssQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQzNCLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQTs7TUFFbkIsS0FBSyx3QkFBTCxLQUFLO01BQUUsTUFBTSx3QkFBTixNQUFNOztBQUVwQixrQkFDRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQ2IsS0FBSyxRQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsZ0JBQVcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxZQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBSyxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVEsQ0FDL0csS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUNaLE9BQU8sQ0FBQywyQkFBMkIsRUFBRSwyQ0FBMkMsQ0FBQyxDQUNqRixPQUFPLENBQUMsc0VBQXNFLEVBQUUsb0pBQW9KLENBQUMsQ0FBQTs7QUFFeE8sTUFBTSxHQUFHLEdBQUcsZ0JBQU0sSUFBSSxDQUFBOztBQUV0QixPQUFLLEdBQUcsRUFBRTs7O0FBQUEsQUFHVixRQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7V0FBSSxLQUFLLENBQUUsQ0FBQyxDQUFFLEdBQUcsR0FBRyxDQUFFLENBQUMsQ0FBRTtHQUFBLENBQUMsQ0FBQTs7QUFFckQsU0FBTyxLQUFLLENBQUE7Q0FDYiIsImZpbGUiOiJvcHRpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBleHBhbmRIb21lRGlyIGZyb20gJ2V4cGFuZC1ob21lLWRpcidcbmltcG9ydCBmcyBmcm9tICdmcydcbmltcG9ydCB5YXJnb25hdXQgZnJvbSAneWFyZ29uYXV0J1xuaW1wb3J0IHlhcmdzIGZyb20gJ3lhcmdzJ1xuXG5pbXBvcnQgb3V0cHV0LCB7IG91dHB1dFN0eWxlcyB9IGZyb20gJ291dHB1dCdcblxubGV0IF9vcHRzXG5cbi8vIEkgbWlnaHQgYXMgd2VsbCBqdXN0IGhhdmUgZXhwb3J0ZWQgdGhlIG9wdGlvbnMgb2JqZWN0IGl0c2VsZiwgYnV0IGl0IGJ1Z2dlZCBtZSB0aGF0IHRoZSBjYWxscyB0byBvdXRwdXQoKSBtaWdodCB0aGVuXG4vLyBwcm9kdWNlIG91dHB1dCAob3IgZmFpbCwgaW4gY2FzZSBvZiBpbnZhbGlkIGFyZ3VtZW50cykgYWhlYWQgb2YgdGhlIGZpcnN0IG91dHB1dFRpdGxlKCkgY2FsbC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wdGlvbnMgKCkge1xuICBpZiAoX29wdHMpIHtcbiAgICByZXR1cm4gX29wdHNcbiAgfVxuXG4gIC8vIFllcywgdGhlIHJjIHBhY2thZ2UgY291bGQgYmUgdXNlZCB0byBoYW5kbGUgdGhpcywgYnV0IHNpbmNlIGl0IGRvZXMgbXVjaCBtb3JlIHRoYW4gcmVhZGluZyB+Ly5oYW5kb3V0cmMgSSBvcHRlZCBmb3IgYSBtdWNoIHNpbXBsZXIgYXBwcm9hY2hcbiAgY29uc3QgcmNwYXRoID0gZXhwYW5kSG9tZURpcignfi8uaGFuZG91dHJjJylcblxuICBsZXQgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi8uLi9kZWZhdWx0cy5qc29uJylcblxuICB0cnkge1xuICAgIE9iamVjdC5hc3NpZ24oZGVmYXVsdHMsIEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHJjcGF0aCwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pKSlcbiAgICBvdXRwdXQoYFVzaW5nIGRlZmF1bHQgdmFsdWVzIGZyb20gJHtyY3BhdGh9YClcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5vIC5oYW5kb3V0cmMgZmlsZSBmb3VuZCwgbW92aW5nIG9uXG4gICAgb3V0cHV0KGBObyAke3JjcGF0aH0gZmlsZSBmb3VuZGApXG4gIH1cblxuICBjb25zdCBhcmdzID0ge1xuICAgICdhcHAnOiB7XG4gICAgICBhbGlhczogJ2EnLFxuICAgICAgZGVtYW5kOiB0cnVlLFxuICAgICAgZGVzY3JpYmU6ICdBcHAgaWRlbnRpZmllciAoZS5nLiBkZWVwc2VhLCBwYXNzZXJieSwgLi4uKSdcbiAgICB9LFxuICAgICd0YXJnZXRzJzoge1xuICAgICAgYWxpYXM6ICd0JyxcbiAgICAgIGRlbWFuZDogdHJ1ZSxcbiAgICAgIGFycmF5OiB0cnVlLFxuICAgICAgZGVzY3JpYmU6ICdTcGFjZSBzZXBhcmF0ZWQgbGlzdCBvZiB0YXJnZXRzIHRvIGRlcGxveSB0byhlLmcuIFwiLS10YXJnZXRzIGNhbGxpc3RvIHRpdGFuXCIpLiBVc2UgXCJhbGxcIiBpZiB5b3Ugd2FudCB0byBkZXBsb3kgdG8gYWxsIGF2YWlsYWJsZSBob3N0cydcbiAgICB9LFxuICAgICdjaGVjayc6IHtcbiAgICAgIGFsaWFzOiAnYycsXG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBkZWZhdWx0OiBkZWZhdWx0cy5jaGVjayxcbiAgICAgIGRlc2NyaWJlOiBcIlBlcmZvcm0gY2hlY2ssIGRvbid0IGNoYW5nZSBhbnl0aGluZ1wiXG4gICAgfSxcbiAgICAndXNlcm5hbWUnOiB7XG4gICAgICBhbGlhczogJ3UnLFxuICAgICAgZGVmYXVsdDogZGVmYXVsdHMudXNlcm5hbWUgfHwgcHJvY2Vzcy5lbnYuVVNFUixcbiAgICAgIGRlc2NyaWJlOiAnVXNlcm5hbWUgdG8gdXNlIHdoZW4gY29ubmVjdGluZyB0byBkZXBsb3ltZW50IHNlcnZlcidcbiAgICB9LFxuICAgICdrZXlmaWxlJzoge1xuICAgICAgYWxpYXM6ICdrJyxcbiAgICAgIGRlZmF1bHQ6IGRlZmF1bHRzLmtleWZpbGUsXG4gICAgICBkZXNjcmliZTogJ1BhdGggdG8gcHJpdmF0ZSBrZXknXG4gICAgfSxcbiAgICAnc2VydmVyJzoge1xuICAgICAgYWxpYXM6ICdzJyxcbiAgICAgIGRlZmF1bHQ6IGRlZmF1bHRzLnNlcnZlcixcbiAgICAgIGRlc2NyaWJlOiAnRnVsbCBzZXJ2ZXIgVVJMJ1xuICAgIH1cbiAgfVxuXG4gIHlhcmdvbmF1dFxuICAgIC5zdHlsZSgnY3lhbicpXG4gICAgLnN0eWxlKCd5ZWxsb3cnLCAncmVxdWlyZWQnKVxuICAgIC5lcnJvcnNTdHlsZSgncmVkLmJvbGQnKVxuXG4gIGNvbnN0IHt1c2FnZSwgY2xpQXJnfSA9IG91dHB1dFN0eWxlc1xuXG4gIHlhcmdzXG4gICAgLm9wdGlvbnMoYXJncylcbiAgICAudXNhZ2UoYFxcbiR7dXNhZ2UoJ1VTQUdFJyl9OiAkMCAtYSAke2NsaUFyZygnYXBwSWRlbnRpZmllcicpfSAtdCAke2NsaUFyZygndGFyZ2V0Jyl9WyAke2NsaUFyZygndGFyZ2V0Jyl9IC4uLl1gKVxuICAgIC5hbGlhcygnaGVscCcsICdoJylcbiAgICAuaGVscCgnaGVscCcpXG4gICAgLmV4YW1wbGUoJyQwIC1hIGRlZXBzZWEgLXQgY2FsbGlzdG8nLCAnRGVwbG95IGFwcCBcImRlZXBzZWFcIiB0byB0YXJnZXQgXCJjYWxsaXN0b1wiJylcbiAgICAuZXhhbXBsZSgnJDAgLWEgcGFzc2VyYnkgLXQgYWxsIC11IHNvbWVfdXNlciAtayB+Ly5zc2gvaWRfcnNhLnNvbWV1c2VyIC0tY2hlY2snLCAnUGVyZm9ybSBhIG1vY2stZGVwbG95bWVudCBvZiBcInBhc3NlcmJ5XCIgdG8gYWxsIGF2YWlsYWJsZSB0YXJnZXRzLCBjb25uZWN0aW5nIGFzIHVzZXIgXCJzb21lX3VzZXJcIiwgdXNpbmcgcHJpdmF0ZSBrZXkgZmlsZSBcIn4vLnNzaC9pZF9yc2Euc29tZXVzZXJcIi4nKVxuXG4gIGNvbnN0IHJhdyA9IHlhcmdzLmFyZ3ZcblxuICBfb3B0cyA9IHt9XG5cbiAgLy8gT25seSBleHBvcnQgZnVsbCBuYW1lc1xuICBPYmplY3Qua2V5cyhhcmdzKS5mb3JFYWNoKGsgPT4gX29wdHNbIGsgXSA9IHJhd1sgayBdKVxuXG4gIHJldHVybiBfb3B0c1xufVxuIl19