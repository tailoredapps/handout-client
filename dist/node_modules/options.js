'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getOptions;

var _expandHomeDir = require('expand-home-dir');

var _expandHomeDir2 = _interopRequireDefault(_expandHomeDir);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _yargonaut = require('yargonaut');

var _yargonaut2 = _interopRequireDefault(_yargonaut);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _commands = require('commands');

var _commands2 = _interopRequireDefault(_commands);

var _output = require('output');

var _output2 = _interopRequireDefault(_output);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _opts = undefined;

var usage = _output.outputStyles.usage;
var cliArg = _output.outputStyles.cliArg;

var payloadModifiers = new Map([['user', function (payload) {
  var action = payload.action;
  var pubkey = payload.pubkey;

  if (action === 'remove') {
    return payload; // Nothing to modify when removing a user
  }

  if (!pubkey) {
    throw new Error('No public key file specified.');
  }

  // Okay to use sync method here, since this is a commandline client (i.e. blocking the event loop for a short time does not matter)
  return Object.assign({}, payload, { pubkey: _fs2.default.readFileSync((0, _expandHomeDir2.default)(pubkey), { encoding: 'utf8' }) });
}]]);

function registerOptions(_ref, parentOptions) {
  var command = _ref.command;
  var desc = _ref.desc;
  var usageStr = _ref.usageStr;
  var examples = _ref.examples;
  var options = _ref.options;

  _yargs2.default.command(command, desc, function (yargs) {
    yargs.options(Object.assign({}, options, parentOptions)).help('help').alias('help', 'h').usage('\n' + usage('USAGE') + ': $0 ' + usageStr);

    if (examples) {
      examples.forEach(function (_ref2) {
        var cli = _ref2.cli;
        var desc = _ref2.desc;
        return yargs.example('$0 ' + cli, desc);
      });
    }
  });
}

function getOptions() {
  if (_opts) {
    return _opts;
  }

  // Yes, the rc package could be used to handle this, but since it does much more than reading ~/.handoutrc I opted for a much simpler approach
  var rcpath = (0, _expandHomeDir2.default)('~/.handoutrc');

  var defaults = require('../../defaults.json');

  try {
    Object.assign(defaults, JSON.parse(_fs2.default.readFileSync(rcpath, { encoding: 'utf8' })));
    (0, _output2.default)('Using default values from ' + rcpath);
  } catch (e) {
    // No .handoutrc file found, moving on
    (0, _output2.default)('No ' + rcpath + ' file found');
  }

  _yargonaut2.default.style('cyan').style('yellow', 'required').errorsStyle('red.bold');

  _yargs2.default.help('help').alias('help', 'h').usage('\n' + usage('USAGE') + ': $0 ' + cliArg('command') + ' [options]').epilogue('To get a list of available options for each command, use "$0 ' + cliArg('command') + ' -h" (e.g. "$0 ' + cliArg('deploy') + ' -h")');

  var _getCommands = (0, _commands2.default)(defaults);

  var commands = _getCommands.commands;
  var globalOptions = _getCommands.globalOptions;

  commands.forEach(function (c) {
    return registerOptions(c, globalOptions);
  });

  var raw = _yargs2.default.argv;

  var _raw$_ = _slicedToArray(raw._, 1);

  var command = _raw$_[0];

  if (!command) {
    throw new Error('No command provided. Use -h to see available commands and options.');
  }

  _opts = {
    command: command
  };

  var payload = {};

  Object.keys(globalOptions).forEach(function (k) {
    return _opts[k] = raw[k];
  });

  var commandDefinition = commands.find(function (c) {
    return c.command === command;
  });

  if (commandDefinition.options) {
    Object.keys(commandDefinition.options).forEach(function (k) {
      return payload[k] = raw[k];
    });
  }

  _opts.payload = payloadModifiers.has(command) ? payloadModifiers.get(command)(payload) : payload;

  return _opts;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvb3B0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUE7Ozs7Ozs7a0JBNkNZLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFuQ2xDLElBQUksS0FBSyxZQUFBLENBQUE7O0lBRUYsS0FBSyx3QkFBTCxLQUFLO0lBQUUsTUFBTSx3QkFBTixNQUFNOztBQUNwQixJQUFNLGdCQUFnQixHQUFHLElBQUksR0FBRyxDQUFDLENBQy9CLENBQUUsTUFBTSxFQUFFLFVBQVUsT0FBTyxFQUFFO01BQ25CLE1BQU0sR0FBYSxPQUFPLENBQTFCLE1BQU07TUFBRSxNQUFNLEdBQUssT0FBTyxDQUFsQixNQUFNOztBQUV0QixNQUFJLE1BQU0sS0FBSyxRQUFRLEVBQUU7QUFDdkIsV0FBTyxPQUFPO0FBQUEsR0FDZjs7QUFFRCxNQUFJLENBQUMsTUFBTSxFQUFFO0FBQ1gsVUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFBO0dBQ2pEOzs7QUFBQSxBQUdELFNBQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUMsTUFBTSxFQUFFLGFBQUcsWUFBWSxDQUFDLDZCQUFjLE1BQU0sQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFBO0NBQzFHLENBQUUsQ0FDSixDQUFDLENBQUE7O0FBRUYsU0FBUyxlQUFlLE9BQWdELGFBQWEsRUFBRTtNQUE1RCxPQUFPLFFBQVAsT0FBTztNQUFFLElBQUksUUFBSixJQUFJO01BQUUsUUFBUSxRQUFSLFFBQVE7TUFBRSxRQUFRLFFBQVIsUUFBUTtNQUFFLE9BQU8sUUFBUCxPQUFPOztBQUNuRSxrQkFDRyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFBLEtBQUssRUFBSTtBQUMvQixTQUFLLENBQ0YsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMs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QzdFOztBQUVELE9BQUssQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUE7O0FBRWhHLFNBQU8sS0FBSyxDQUFBO0NBQ2IiLCJmaWxlIjoib3B0aW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgZXhwYW5kSG9tZURpciBmcm9tICdleHBhbmQtaG9tZS1kaXInXG5pbXBvcnQgZnMgZnJvbSAnZnMnXG5pbXBvcnQgeWFyZ29uYXV0IGZyb20gJ3lhcmdvbmF1dCdcbmltcG9ydCB5YXJncyBmcm9tICd5YXJncydcblxuaW1wb3J0IGdldENvbW1hbmRzIGZyb20gJ2NvbW1hbmRzJ1xuaW1wb3J0IG91dHB1dCwgeyBvdXRwdXRTdHlsZXMgfSBmcm9tICdvdXRwdXQnXG5cbmxldCBfb3B0c1xuXG5jb25zdCB7dXNhZ2UsIGNsaUFyZ30gPSBvdXRwdXRTdHlsZXNcbmNvbnN0IHBheWxvYWRNb2RpZmllcnMgPSBuZXcgTWFwKFtcbiAgWyAndXNlcicsIGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgY29uc3QgeyBhY3Rpb24sIHB1YmtleSB9ID0gcGF5bG9hZFxuXG4gICAgaWYgKGFjdGlvbiA9PT0gJ3JlbW92ZScpIHtcbiAgICAgIHJldHVybiBwYXlsb2FkIC8vIE5vdGhpbmcgdG8gbW9kaWZ5IHdoZW4gcmVtb3ZpbmcgYSB1c2VyXG4gICAgfVxuXG4gICAgaWYgKCFwdWJrZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcHVibGljIGtleSBmaWxlIHNwZWNpZmllZC4nKVxuICAgIH1cblxuICAgIC8vIE9rYXkgdG8gdXNlIHN5bmMgbWV0aG9kIGhlcmUsIHNpbmNlIHRoaXMgaXMgYSBjb21tYW5kbGluZSBjbGllbnQgKGkuZS4gYmxvY2tpbmcgdGhlIGV2ZW50IGxvb3AgZm9yIGEgc2hvcnQgdGltZSBkb2VzIG5vdCBtYXR0ZXIpXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHBheWxvYWQsIHtwdWJrZXk6IGZzLnJlYWRGaWxlU3luYyhleHBhbmRIb21lRGlyKHB1YmtleSksIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KX0pXG4gIH0gXVxuXSlcblxuZnVuY3Rpb24gcmVnaXN0ZXJPcHRpb25zICh7Y29tbWFuZCwgZGVzYywgdXNhZ2VTdHIsIGV4YW1wbGVzLCBvcHRpb25zfSwgcGFyZW50T3B0aW9ucykge1xuICB5YXJnc1xuICAgIC5jb21tYW5kKGNvbW1hbmQsIGRlc2MsIHlhcmdzID0+IHtcbiAgICAgIHlhcmdzXG4gICAgICAgIC5vcHRpb25zKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHBhcmVudE9wdGlvbnMpKVxuICAgICAgICAuaGVscCgnaGVscCcpXG4gICAgICAgIC5hbGlhcygnaGVscCcsICdoJylcbiAgICAgICAgLnVzYWdlKGBcXG4ke3VzYWdlKCdVU0FHRScpfTogJDAgJHt1c2FnZVN0cn1gKVxuXG4gICAgICBpZiAoZXhhbXBsZXMpIHtcbiAgICAgICAgZXhhbXBsZXMuZm9yRWFjaCgoe2NsaSwgZGVzY30pID0+IHlhcmdzLmV4YW1wbGUoYCQwICR7Y2xpfWAsIGRlc2MpKVxuICAgICAgfVxuICAgIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wdGlvbnMgKCkge1xuICBpZiAoX29wdHMpIHtcbiAgICByZXR1cm4gX29wdHNcbiAgfVxuXG4gIC8vIFllcywgdGhlIHJjIHBhY2thZ2UgY291bGQgYmUgdXNlZCB0byBoYW5kbGUgdGhpcywgYnV0IHNpbmNlIGl0IGRvZXMgbXVjaCBtb3JlIHRoYW4gcmVhZGluZyB+Ly5oYW5kb3V0cmMgSSBvcHRlZCBmb3IgYSBtdWNoIHNpbXBsZXIgYXBwcm9hY2hcbiAgY29uc3QgcmNwYXRoID0gZXhwYW5kSG9tZURpcignfi8uaGFuZG91dHJjJylcblxuICBsZXQgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi8uLi9kZWZhdWx0cy5qc29uJylcblxuICB0cnkge1xuICAgIE9iamVjdC5hc3NpZ24oZGVmYXVsdHMsIEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHJjcGF0aCwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pKSlcbiAgICBvdXRwdXQoYFVzaW5nIGRlZmF1bHQgdmFsdWVzIGZyb20gJHtyY3BhdGh9YClcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5vIC5oYW5kb3V0cmMgZmlsZSBmb3VuZCwgbW92aW5nIG9uXG4gICAgb3V0cHV0KGBObyAke3JjcGF0aH0gZmlsZSBmb3VuZGApXG4gIH1cblxuICB5YXJnb25hdXRcbiAgICAuc3R5bGUoJ2N5YW4nKVxuICAgIC5zdHlsZSgneWVsbG93JywgJ3JlcXVpcmVkJylcbiAgICAuZXJyb3JzU3R5bGUoJ3JlZC5ib2xkJylcblxuICB5YXJnc1xuICAgIC5oZWxwKCdoZWxwJylcbiAgICAuYWxpYXMoJ2hlbHAnLCAnaCcpXG4gICAgLnVzYWdlKGBcXG4ke3VzYWdlKCdVU0FHRScpfTogJDAgJHtjbGlBcmcoJ2NvbW1hbmQnKX0gW29wdGlvbnNdYClcbiAgICAuZXBpbG9ndWUoYFRvIGdldCBhIGxpc3Qgb2YgYXZhaWxhYmxlIG9wdGlvbnMgZm9yIGVhY2ggY29tbWFuZCwgdXNlIFwiJDAgJHtjbGlBcmcoJ2NvbW1hbmQnKX0gLWhcIiAoZS5nLiBcIiQwICR7Y2xpQXJnKCdkZXBsb3knKX0gLWhcIilgKVxuXG4gIGNvbnN0IHtjb21tYW5kcywgZ2xvYmFsT3B0aW9uc30gPSBnZXRDb21tYW5kcyhkZWZhdWx0cylcblxuICBjb21tYW5kcy5mb3JFYWNoKGMgPT4gcmVnaXN0ZXJPcHRpb25zKGMsIGdsb2JhbE9wdGlvbnMpKVxuXG4gIGNvbnN0IHJhdyA9IHlhcmdzLmFyZ3ZcbiAgY29uc3QgWyBjb21tYW5kIF0gPSByYXcuX1xuXG4gIGlmICghY29tbWFuZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gY29tbWFuZCBwcm92aWRlZC4gVXNlIC1oIHRvIHNlZSBhdmFpbGFibGUgY29tbWFuZHMgYW5kIG9wdGlvbnMuJylcbiAgfVxuXG4gIF9vcHRzID0ge1xuICAgIGNvbW1hbmRcbiAgfVxuXG4gIGxldCBwYXlsb2FkID0ge31cblxuICBPYmplY3Qua2V5cyhnbG9iYWxPcHRpb25zKS5mb3JFYWNoKGsgPT4gX29wdHNba10gPSByYXdba10pXG5cbiAgY29uc3QgY29tbWFuZERlZmluaXRpb24gPSBjb21tYW5kcy5maW5kKGMgPT4gYy5jb21tYW5kID09PSBjb21tYW5kKVxuXG4gIGlmIChjb21tYW5kRGVmaW5pdGlvbi5vcHRpb25zKSB7XG4gICAgT2JqZWN0LmtleXMoY29tbWFuZERlZmluaXRpb24ub3B0aW9ucykuZm9yRWFjaChrID0+IHBheWxvYWRbIGsgXSA9IHJhd1sgayBdKVxuICB9XG5cbiAgX29wdHMucGF5bG9hZCA9IHBheWxvYWRNb2RpZmllcnMuaGFzKGNvbW1hbmQpID8gcGF5bG9hZE1vZGlmaWVycy5nZXQoY29tbWFuZCkocGF5bG9hZCkgOiBwYXlsb2FkXG5cbiAgcmV0dXJuIF9vcHRzXG59XG4iXX0=