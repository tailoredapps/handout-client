"use strict";

var _outputStyles;

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.outputStyles = exports.LEVEL_RAW = exports.LEVEL_ERROR = exports.LEVEL_INFO = exports.LEVEL_OK = undefined;
exports.default = output;
exports.outputTitle = outputTitle;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _stripAnsi = require('strip-ansi');

var _stripAnsi2 = _interopRequireDefault(_stripAnsi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LEVEL_OK = exports.LEVEL_OK = 'ok';
var LEVEL_INFO = exports.LEVEL_INFO = 'info';
var LEVEL_ERROR = exports.LEVEL_ERROR = 'error';
var LEVEL_RAW = exports.LEVEL_RAW = 'raw';

var outputStyles = exports.outputStyles = (_outputStyles = {
    headline: _chalk2.default.bold.yellow,
    url: _chalk2.default.yellow,
    target: _chalk2.default.cyan,
    error: _chalk2.default.bold.red,
    username: _chalk2.default.yellow,
    app: _chalk2.default.yellow,
    usage: _chalk2.default.bold.yellow,
    cliArg: _chalk2.default.cyan
}, _defineProperty(_outputStyles, LEVEL_ERROR, _chalk2.default.bold.red), _defineProperty(_outputStyles, LEVEL_INFO, _chalk2.default.bold.grey), _defineProperty(_outputStyles, LEVEL_OK, _chalk2.default.bold.green), _outputStyles);

function pad(str) {
    var max = arguments.length <= 1 || arguments[1] === undefined ? 15 : arguments[1];
    var char = arguments.length <= 2 || arguments[2] === undefined ? ' ' : arguments[2];

    var len = (0, _stripAnsi2.default)(str).length;

    return len < max ? str + new Array(max - len + 1).join(char) : str;
}

function output(message) {
    var level = arguments.length <= 1 || arguments[1] === undefined ? LEVEL_INFO : arguments[1];
    var fromRemote = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    var prepend = '';

    if (level !== LEVEL_RAW) {
        prepend += '[' + (fromRemote ? 'server' : 'local') + ':' + outputStyles[level](level) + ']';
    }

    console.log(pad(prepend) + ' ' + message);
}

function outputTitle(_ref) {
    var version = _ref.version;
    // All of package.json passed in, using only version for now
    var hr = _chalk2.default.grey(new Array(80).join('-'));
    var newline = '';
    var o = function o(msg) {
        return output(msg, LEVEL_RAW);
    };

    o(newline);
    o(hr);
    o(outputStyles.headline('handOut'));
    o(outputStyles.headline('tailored apps') + ' backend deployment tool v' + version);
    o(hr);
    o(newline);
}