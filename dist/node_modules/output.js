'use strict';

var _outputStyles;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outputStyles = exports.LEVEL_RAW = exports.LEVEL_ERROR = exports.LEVEL_INFO = exports.LEVEL_OK = undefined;
exports.default = output;
exports.outputTitle = outputTitle;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _stripAnsi = require('strip-ansi');

var _stripAnsi2 = _interopRequireDefault(_stripAnsi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LEVEL_OK = exports.LEVEL_OK = 'ok';
var LEVEL_INFO = exports.LEVEL_INFO = 'info';
var LEVEL_ERROR = exports.LEVEL_ERROR = 'error';
var LEVEL_RAW = exports.LEVEL_RAW = 'raw';

var outputStyles = exports.outputStyles = (_outputStyles = {
  headline: _chalk2.default.bold.yellow,
  url: _chalk2.default.yellow,
  target: _chalk2.default.cyan,
  error: _chalk2.default.bold.red,
  username: _chalk2.default.yellow,
  app: _chalk2.default.yellow,
  usage: _chalk2.default.bold.yellow,
  cliArg: _chalk2.default.cyan
}, _defineProperty(_outputStyles, LEVEL_ERROR, _chalk2.default.bold.red), _defineProperty(_outputStyles, LEVEL_INFO, _chalk2.default.bold.grey), _defineProperty(_outputStyles, LEVEL_OK, _chalk2.default.bold.green), _outputStyles);

function pad(str) {
  var max = arguments.length <= 1 || arguments[1] === undefined ? 15 : arguments[1];
  var char = arguments.length <= 2 || arguments[2] === undefined ? ' ' : arguments[2];

  var len = (0, _stripAnsi2.default)(str).length;

  return len < max ? str + new Array(max - len + 1).join(char) : str;
}

function output(message) {
  var level = arguments.length <= 1 || arguments[1] === undefined ? LEVEL_INFO : arguments[1];
  var fromRemote = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

  var prepend = '';

  if (level !== LEVEL_RAW) {
    prepend += '[' + (fromRemote ? 'server' : 'local') + ':' + outputStyles[level](level) + ']';

    console.log(pad(prepend) + ' ' + message);
  } else {
    console.log(message);
  }
}

function outputTitle(_ref) {
  var version = _ref.version;
  // All of package.json passed in, using only version for now
  var hr = _chalk2.default.grey(new Array(80).join('-'));
  var newline = '';
  var o = function o(msg) {
    return output(msg, LEVEL_RAW);
  };

  o(newline);
  o(hr);
  o(outputStyles.headline('handout'));
  o(outputStyles.headline('tailored apps') + ' backend deployment tool v' + version);
  o(hr);
  o(newline);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvb3V0cHV0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztrQkE4QndCO1FBWVI7Ozs7Ozs7Ozs7Ozs7O0FBckNULElBQU0sOEJBQVcsSUFBWDtBQUNOLElBQU0sa0NBQWEsTUFBYjtBQUNOLElBQU0sb0NBQWMsT0FBZDtBQUNOLElBQU0sZ0NBQVksS0FBWjs7QUFFTixJQUFNO0FBQ1gsWUFBVSxnQkFBTSxJQUFOLENBQVcsTUFBWDtBQUNWLE9BQUssZ0JBQU0sTUFBTjtBQUNMLFVBQVEsZ0JBQU0sSUFBTjtBQUNSLFNBQU8sZ0JBQU0sSUFBTixDQUFXLEdBQVg7QUFDUCxZQUFVLGdCQUFNLE1BQU47QUFDVixPQUFLLGdCQUFNLE1BQU47QUFDTCxTQUFPLGdCQUFNLElBQU4sQ0FBVyxNQUFYO0FBQ1AsVUFBUSxnQkFBTSxJQUFOO2tDQUNQLGFBQWMsZ0JBQU0sSUFBTixDQUFXLEdBQVgsa0NBQ2QsWUFBYSxnQkFBTSxJQUFOLENBQVcsSUFBWCxrQ0FDYixVQUFXLGdCQUFNLElBQU4sQ0FBVyxLQUFYLGlCQVhEOztBQWNiLFNBQVMsR0FBVCxDQUFjLEdBQWQsRUFBeUM7TUFBdEIsNERBQU0sa0JBQWdCO01BQVosNkRBQU8sbUJBQUs7O0FBQ3ZDLE1BQU0sTUFBTSx5QkFBVSxHQUFWLEVBQWUsTUFBZixDQUQyQjs7QUFHdkMsU0FBTyxNQUFNLEdBQU4sR0FBWSxNQUFNLElBQUssS0FBSixDQUFVLE1BQU0sR0FBTixHQUFZLENBQVosQ0FBWCxDQUEyQixJQUEzQixDQUFnQyxJQUFoQyxDQUFOLEdBQThDLEdBQTFELENBSGdDO0NBQXpDOztBQU1lLFNBQVMsTUFBVCxDQUFpQixPQUFqQixFQUFrRTtNQUF4Qyw4REFBUSwwQkFBZ0M7TUFBcEIsbUVBQWEscUJBQU87O0FBQy9FLE1BQUksVUFBVSxFQUFWLENBRDJFOztBQUcvRSxNQUFJLFVBQVUsU0FBVixFQUFxQjtBQUN2QixzQkFBZSxhQUFhLFFBQWIsR0FBd0IsT0FBeEIsVUFBbUMsYUFBYyxLQUFkLEVBQXNCLEtBQXRCLE9BQWxELENBRHVCOztBQUd2QixZQUFRLEdBQVIsQ0FBZSxJQUFJLE9BQUosVUFBZ0IsT0FBL0IsRUFIdUI7R0FBekIsTUFJTztBQUNMLFlBQVEsR0FBUixDQUFZLE9BQVosRUFESztHQUpQO0NBSGE7O0FBWVIsU0FBUyxXQUFULE9BQWlDO01BQVYsdUJBQVU7O0FBQ3RDLE1BQU0sS0FBSyxnQkFBTSxJQUFOLENBQVcsSUFBSSxLQUFKLENBQVUsRUFBVixFQUFjLElBQWQsQ0FBbUIsR0FBbkIsQ0FBWCxDQUFMLENBRGdDO0FBRXRDLE1BQU0sVUFBVSxFQUFWLENBRmdDO0FBR3RDLE1BQU0sSUFBSSxTQUFKLENBQUk7V0FBTyxPQUFPLEdBQVAsRUFBWSxTQUFaO0dBQVAsQ0FINEI7O0FBS3RDLElBQUUsT0FBRixFQUxzQztBQU10QyxJQUFFLEVBQUYsRUFOc0M7QUFPdEMsSUFBRSxhQUFhLFFBQWIsQ0FBc0IsU0FBdEIsQ0FBRixFQVBzQztBQVF0QyxJQUFLLGFBQWEsUUFBYixDQUFzQixlQUF0QixtQ0FBbUUsT0FBeEUsRUFSc0M7QUFTdEMsSUFBRSxFQUFGLEVBVHNDO0FBVXRDLElBQUUsT0FBRixFQVZzQztDQUFqQyIsImZpbGUiOiJvdXRwdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJ1xuaW1wb3J0IHN0cmlwQW5zaSBmcm9tICdzdHJpcC1hbnNpJ1xuXG5leHBvcnQgY29uc3QgTEVWRUxfT0sgPSAnb2snXG5leHBvcnQgY29uc3QgTEVWRUxfSU5GTyA9ICdpbmZvJ1xuZXhwb3J0IGNvbnN0IExFVkVMX0VSUk9SID0gJ2Vycm9yJ1xuZXhwb3J0IGNvbnN0IExFVkVMX1JBVyA9ICdyYXcnXG5cbmV4cG9ydCBjb25zdCBvdXRwdXRTdHlsZXMgPSB7XG4gIGhlYWRsaW5lOiBjaGFsay5ib2xkLnllbGxvdyxcbiAgdXJsOiBjaGFsay55ZWxsb3csXG4gIHRhcmdldDogY2hhbGsuY3lhbixcbiAgZXJyb3I6IGNoYWxrLmJvbGQucmVkLFxuICB1c2VybmFtZTogY2hhbGsueWVsbG93LFxuICBhcHA6IGNoYWxrLnllbGxvdyxcbiAgdXNhZ2U6IGNoYWxrLmJvbGQueWVsbG93LFxuICBjbGlBcmc6IGNoYWxrLmN5YW4sXG4gIFtMRVZFTF9FUlJPUl06IGNoYWxrLmJvbGQucmVkLFxuICBbTEVWRUxfSU5GT106IGNoYWxrLmJvbGQuZ3JleSxcbiAgW0xFVkVMX09LXTogY2hhbGsuYm9sZC5ncmVlblxufVxuXG5mdW5jdGlvbiBwYWQgKHN0ciwgbWF4ID0gMTUsIGNoYXIgPSAnICcpIHtcbiAgY29uc3QgbGVuID0gc3RyaXBBbnNpKHN0cikubGVuZ3RoXG5cbiAgcmV0dXJuIGxlbiA8IG1heCA/IHN0ciArIChuZXcgQXJyYXkobWF4IC0gbGVuICsgMSkpLmpvaW4oY2hhcikgOiBzdHJcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3V0cHV0IChtZXNzYWdlLCBsZXZlbCA9IExFVkVMX0lORk8sIGZyb21SZW1vdGUgPSBmYWxzZSkge1xuICBsZXQgcHJlcGVuZCA9ICcnXG5cbiAgaWYgKGxldmVsICE9PSBMRVZFTF9SQVcpIHtcbiAgICBwcmVwZW5kICs9IGBbJHtmcm9tUmVtb3RlID8gJ3NlcnZlcicgOiAnbG9jYWwnfToke291dHB1dFN0eWxlc1sgbGV2ZWwgXShsZXZlbCl9XWBcblxuICAgIGNvbnNvbGUubG9nKGAke3BhZChwcmVwZW5kKX0gJHttZXNzYWdlfWApXG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2cobWVzc2FnZSlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb3V0cHV0VGl0bGUgKHt2ZXJzaW9ufSkgeyAvLyBBbGwgb2YgcGFja2FnZS5qc29uIHBhc3NlZCBpbiwgdXNpbmcgb25seSB2ZXJzaW9uIGZvciBub3dcbiAgY29uc3QgaHIgPSBjaGFsay5ncmV5KG5ldyBBcnJheSg4MCkuam9pbignLScpKVxuICBjb25zdCBuZXdsaW5lID0gJydcbiAgY29uc3QgbyA9IG1zZyA9PiBvdXRwdXQobXNnLCBMRVZFTF9SQVcpXG5cbiAgbyhuZXdsaW5lKVxuICBvKGhyKVxuICBvKG91dHB1dFN0eWxlcy5oZWFkbGluZSgnaGFuZG91dCcpKVxuICBvKGAke291dHB1dFN0eWxlcy5oZWFkbGluZSgndGFpbG9yZWQgYXBwcycpfSBiYWNrZW5kIGRlcGxveW1lbnQgdG9vbCB2JHt2ZXJzaW9ufWApXG4gIG8oaHIpXG4gIG8obmV3bGluZSlcbn1cbiJdfQ==