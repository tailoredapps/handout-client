'use strict';

var _outputStyles;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outputStyles = exports.LEVEL_DEBUG = exports.LEVEL_RAW = exports.LEVEL_ERROR = exports.LEVEL_INFO = exports.LEVEL_OK = undefined;
exports.default = output;
exports.outputTitle = outputTitle;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _stripAnsi = require('strip-ansi');

var _stripAnsi2 = _interopRequireDefault(_stripAnsi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LEVEL_OK = exports.LEVEL_OK = 'ok';
var LEVEL_INFO = exports.LEVEL_INFO = 'info';
var LEVEL_ERROR = exports.LEVEL_ERROR = 'error';
var LEVEL_RAW = exports.LEVEL_RAW = 'raw';
var LEVEL_DEBUG = exports.LEVEL_DEBUG = 'debug';

var outputStyles = exports.outputStyles = (_outputStyles = {
  headline: _chalk2.default.bold.yellow,
  url: _chalk2.default.yellow,
  target: _chalk2.default.cyan,
  error: _chalk2.default.bold.red,
  username: _chalk2.default.yellow,
  app: _chalk2.default.yellow,
  usage: _chalk2.default.bold.yellow,
  cliArg: _chalk2.default.cyan
}, _defineProperty(_outputStyles, LEVEL_ERROR, _chalk2.default.bold.red), _defineProperty(_outputStyles, LEVEL_INFO, _chalk2.default.bold.grey), _defineProperty(_outputStyles, LEVEL_OK, _chalk2.default.bold.green), _defineProperty(_outputStyles, LEVEL_DEBUG, _chalk2.default.bgYellow), _outputStyles);

function pad(str) {
  var max = arguments.length <= 1 || arguments[1] === undefined ? 15 : arguments[1];
  var char = arguments.length <= 2 || arguments[2] === undefined ? ' ' : arguments[2];

  var len = (0, _stripAnsi2.default)(str).length;

  return len < max ? str + new Array(max - len + 1).join(char) : str;
}

function output(message) {
  var level = arguments.length <= 1 || arguments[1] === undefined ? LEVEL_INFO : arguments[1];
  var fromRemote = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

  var prepend = '';

  if (level !== LEVEL_RAW) {
    prepend += '[' + (fromRemote ? 'server' : 'local') + ':' + outputStyles[level](level) + ']';

    console.log(pad(prepend) + ' ' + message);
  } else {
    console.log(message);
  }
}

function outputTitle(_ref) {
  var version = _ref.version;
  // All of package.json passed in, using only version for now
  var hr = _chalk2.default.grey(new Array(80).join('-'));
  var newline = '';
  var o = function o(msg) {
    return output(msg, LEVEL_RAW);
  };

  o(newline);
  o(hr);
  o(outputStyles.headline('handout'));
  o(outputStyles.headline('tailored apps') + ' backend deployment tool v' + version);
  o(hr);
  o(newline);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvb3V0cHV0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztrQkFnQ3dCO1FBWVI7Ozs7Ozs7Ozs7Ozs7O0FBdkNULElBQU0sOEJBQVcsSUFBWDtBQUNOLElBQU0sa0NBQWEsTUFBYjtBQUNOLElBQU0sb0NBQWMsT0FBZDtBQUNOLElBQU0sZ0NBQVksS0FBWjtBQUNOLElBQU0sb0NBQWMsT0FBZDs7QUFFTixJQUFNO0FBQ1gsWUFBVSxnQkFBTSxJQUFOLENBQVcsTUFBWDtBQUNWLE9BQUssZ0JBQU0sTUFBTjtBQUNMLFVBQVEsZ0JBQU0sSUFBTjtBQUNSLFNBQU8sZ0JBQU0sSUFBTixDQUFXLEdBQVg7QUFDUCxZQUFVLGdCQUFNLE1BQU47QUFDVixPQUFLLGdCQUFNLE1BQU47QUFDTCxTQUFPLGdCQUFNLElBQU4sQ0FBVyxNQUFYO0FBQ1AsVUFBUSxnQkFBTSxJQUFOO2tDQUNQLGFBQWMsZ0JBQU0sSUFBTixDQUFXLEdBQVgsa0NBQ2QsWUFBYSxnQkFBTSxJQUFOLENBQVcsSUFBWCxrQ0FDYixVQUFXLGdCQUFNLElBQU4sQ0FBVyxLQUFYLGtDQUNYLGFBQWMsZ0JBQU0sUUFBTixpQkFaSjs7QUFlYixTQUFTLEdBQVQsQ0FBYyxHQUFkLEVBQXlDO01BQXRCLDREQUFNLGtCQUFnQjtNQUFaLDZEQUFPLG1CQUFLOztBQUN2QyxNQUFNLE1BQU0seUJBQVUsR0FBVixFQUFlLE1BQWYsQ0FEMkI7O0FBR3ZDLFNBQU8sTUFBTSxHQUFOLEdBQVksTUFBTSxJQUFLLEtBQUosQ0FBVSxNQUFNLEdBQU4sR0FBWSxDQUFaLENBQVgsQ0FBMkIsSUFBM0IsQ0FBZ0MsSUFBaEMsQ0FBTixHQUE4QyxHQUExRCxDQUhnQztDQUF6Qzs7QUFNZSxTQUFTLE1BQVQsQ0FBaUIsT0FBakIsRUFBa0U7TUFBeEMsOERBQVEsMEJBQWdDO01BQXBCLG1FQUFhLHFCQUFPOztBQUMvRSxNQUFJLFVBQVUsRUFBVixDQUQyRTs7QUFHL0UsTUFBSSxVQUFVLFNBQVYsRUFBcUI7QUFDdkIsc0JBQWUsYUFBYSxRQUFiLEdBQXdCLE9BQXhCLFVBQW1DLGFBQWMsS0FBZCxFQUFzQixLQUF0QixPQUFsRCxDQUR1Qjs7QUFHdkIsWUFBUSxHQUFSLENBQWUsSUFBSSxPQUFKLFVBQWdCLE9BQS9CLEVBSHVCO0dBQXpCLE1BSU87QUFDTCxZQUFRLEdBQVIsQ0FBWSxPQUFaLEVBREs7R0FKUDtDQUhhOztBQVlSLFNBQVMsV0FBVCxPQUFpQztNQUFWLHVCQUFVOztBQUN0QyxNQUFNLEtBQUssZ0JBQU0sSUFBTixDQUFXLElBQUksS0FBSixDQUFVLEVBQVYsRUFBYyxJQUFkLENBQW1CLEdBQW5CLENBQVgsQ0FBTCxDQURnQztBQUV0QyxNQUFNLFVBQVUsRUFBVixDQUZnQztBQUd0QyxNQUFNLElBQUksU0FBSixDQUFJO1dBQU8sT0FBTyxHQUFQLEVBQVksU0FBWjtHQUFQLENBSDRCOztBQUt0QyxJQUFFLE9BQUYsRUFMc0M7QUFNdEMsSUFBRSxFQUFGLEVBTnNDO0FBT3RDLElBQUUsYUFBYSxRQUFiLENBQXNCLFNBQXRCLENBQUYsRUFQc0M7QUFRdEMsSUFBSyxhQUFhLFFBQWIsQ0FBc0IsZUFBdEIsbUNBQW1FLE9BQXhFLEVBUnNDO0FBU3RDLElBQUUsRUFBRixFQVRzQztBQVV0QyxJQUFFLE9BQUYsRUFWc0M7Q0FBakMiLCJmaWxlIjoib3V0cHV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsaydcbmltcG9ydCBzdHJpcEFuc2kgZnJvbSAnc3RyaXAtYW5zaSdcblxuZXhwb3J0IGNvbnN0IExFVkVMX09LID0gJ29rJ1xuZXhwb3J0IGNvbnN0IExFVkVMX0lORk8gPSAnaW5mbydcbmV4cG9ydCBjb25zdCBMRVZFTF9FUlJPUiA9ICdlcnJvcidcbmV4cG9ydCBjb25zdCBMRVZFTF9SQVcgPSAncmF3J1xuZXhwb3J0IGNvbnN0IExFVkVMX0RFQlVHID0gJ2RlYnVnJ1xuXG5leHBvcnQgY29uc3Qgb3V0cHV0U3R5bGVzID0ge1xuICBoZWFkbGluZTogY2hhbGsuYm9sZC55ZWxsb3csXG4gIHVybDogY2hhbGsueWVsbG93LFxuICB0YXJnZXQ6IGNoYWxrLmN5YW4sXG4gIGVycm9yOiBjaGFsay5ib2xkLnJlZCxcbiAgdXNlcm5hbWU6IGNoYWxrLnllbGxvdyxcbiAgYXBwOiBjaGFsay55ZWxsb3csXG4gIHVzYWdlOiBjaGFsay5ib2xkLnllbGxvdyxcbiAgY2xpQXJnOiBjaGFsay5jeWFuLFxuICBbTEVWRUxfRVJST1JdOiBjaGFsay5ib2xkLnJlZCxcbiAgW0xFVkVMX0lORk9dOiBjaGFsay5ib2xkLmdyZXksXG4gIFtMRVZFTF9PS106IGNoYWxrLmJvbGQuZ3JlZW4sXG4gIFtMRVZFTF9ERUJVR106IGNoYWxrLmJnWWVsbG93XG59XG5cbmZ1bmN0aW9uIHBhZCAoc3RyLCBtYXggPSAxNSwgY2hhciA9ICcgJykge1xuICBjb25zdCBsZW4gPSBzdHJpcEFuc2koc3RyKS5sZW5ndGhcblxuICByZXR1cm4gbGVuIDwgbWF4ID8gc3RyICsgKG5ldyBBcnJheShtYXggLSBsZW4gKyAxKSkuam9pbihjaGFyKSA6IHN0clxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvdXRwdXQgKG1lc3NhZ2UsIGxldmVsID0gTEVWRUxfSU5GTywgZnJvbVJlbW90ZSA9IGZhbHNlKSB7XG4gIGxldCBwcmVwZW5kID0gJydcblxuICBpZiAobGV2ZWwgIT09IExFVkVMX1JBVykge1xuICAgIHByZXBlbmQgKz0gYFske2Zyb21SZW1vdGUgPyAnc2VydmVyJyA6ICdsb2NhbCd9OiR7b3V0cHV0U3R5bGVzWyBsZXZlbCBdKGxldmVsKX1dYFxuXG4gICAgY29uc29sZS5sb2coYCR7cGFkKHByZXBlbmQpfSAke21lc3NhZ2V9YClcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvdXRwdXRUaXRsZSAoe3ZlcnNpb259KSB7IC8vIEFsbCBvZiBwYWNrYWdlLmpzb24gcGFzc2VkIGluLCB1c2luZyBvbmx5IHZlcnNpb24gZm9yIG5vd1xuICBjb25zdCBociA9IGNoYWxrLmdyZXkobmV3IEFycmF5KDgwKS5qb2luKCctJykpXG4gIGNvbnN0IG5ld2xpbmUgPSAnJ1xuICBjb25zdCBvID0gbXNnID0+IG91dHB1dChtc2csIExFVkVMX1JBVylcblxuICBvKG5ld2xpbmUpXG4gIG8oaHIpXG4gIG8ob3V0cHV0U3R5bGVzLmhlYWRsaW5lKCdoYW5kb3V0JykpXG4gIG8oYCR7b3V0cHV0U3R5bGVzLmhlYWRsaW5lKCd0YWlsb3JlZCBhcHBzJyl9IGJhY2tlbmQgZGVwbG95bWVudCB0b29sIHYke3ZlcnNpb259YClcbiAgbyhocilcbiAgbyhuZXdsaW5lKVxufVxuIl19