'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outputStyles = undefined;

var _outputStyles;

exports.default = output;
exports.outputTitle = outputTitle;
exports.processResponse = processResponse;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _stripAnsi = require('strip-ansi');

var _stripAnsi2 = _interopRequireDefault(_stripAnsi);

var _handoutConstants = require('handout-constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var outputStyles = exports.outputStyles = (_outputStyles = {
  headline: _chalk2.default.bold.yellow,
  url: _chalk2.default.yellow,
  target: _chalk2.default.cyan,
  error: _chalk2.default.bold.red,
  username: _chalk2.default.yellow,
  app: _chalk2.default.yellow,
  usage: _chalk2.default.bold.yellow,
  cliArg: _chalk2.default.cyan
}, _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_ERROR, _chalk2.default.bold.red), _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_INFO, _chalk2.default.bold.grey), _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_OK, _chalk2.default.bold.green), _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_DEBUG, _chalk2.default.bgYellow), _outputStyles);

// Utility stuff
var raw = function raw(msg) {
  return output(msg, _handoutConstants.MSG_LEVEL_RAW);
};
var newline = function newline() {
  return raw('');
};
var hr = function hr() {
  return raw(_chalk2.default.grey(new Array(80).join('-')));
};

function pad(str) {
  var max = arguments.length <= 1 || arguments[1] === undefined ? 15 : arguments[1];
  var char = arguments.length <= 2 || arguments[2] === undefined ? ' ' : arguments[2];

  var len = (0, _stripAnsi2.default)(str).length;

  return len < max ? str + new Array(max - len + 1).join(char) : str;
}

function output(message) {
  var level = arguments.length <= 1 || arguments[1] === undefined ? _handoutConstants.MSG_LEVEL_INFO : arguments[1];
  var fromRemote = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

  var prepend = '';

  if (level !== _handoutConstants.MSG_LEVEL_RAW) {
    prepend += '[' + (fromRemote ? 'server' : 'local') + ':' + outputStyles[level](level) + ']';

    console.log(pad(prepend) + ' ' + message);
  } else {
    console.log(message);
  }
}

function outputTitle(_ref) {
  var version = _ref.version;
  // All of package.json passed in, using only version for now
  newline();
  hr();
  raw(outputStyles.headline('handout'));
  raw(outputStyles.headline('tailored apps') + ' backend deployment tool v' + version);
  hr();
  newline();
}

/**
 * Processes raw data and generates output for server responses that require additional processing (i.e. those with MSG_LEVEL_PROCESS).
 *
 * @param wrapperObj object
 */
function processResponse(_ref2) {
  var category = _ref2.category;
  var data = _ref2.data;

  // We only implement CATEGORY_INFO for now, can use a switch or a function map later
  if (category === _handoutConstants.CATEGORY_INFO) {
    processInfoResponse(data);
  } else {
    output('Incorrect output processing category "' + category + '" returned from server.', _handoutConstants.MSG_LEVEL_ERROR);
  }
}

function processInfoResponse(_ref3) {
  var hosts = _ref3.hosts;
  var deployment = _ref3.deployment;
  var users = _ref3.users;
  var permissions = _ref3.permissions;
  var headline = outputStyles.headline;
  var target = outputStyles.target;

  var item = _chalk2.default.blue;
  var granted = _chalk2.default.green;
  var denied = _chalk2.default.red;

  var indent = function indent(str) {
    return raw('    ' + str);
  };
  var col = function col(left) {
    var right = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
    var width = arguments.length <= 2 || arguments[2] === undefined ? 25 : arguments[2];
    return indent('' + pad(left, width) + right);
  };
  var title = function title(str) {
    hr();
    indent(headline(str.toUpperCase()));
    hr();
  };

  if (users) {
    title('Users');
    users.forEach(function (u) {
      return col(item(u));
    });
  }

  title('Permissions');
  Object.keys(permissions).forEach(function (p) {
    col(item(p), permissions[p] ? granted('granted') : denied('denied'));
  });

  title('Targets');
  col('TARGET ID', 'HOSTNAME');
  Object.keys(hosts).forEach(function (hostId) {
    var host = hosts[hostId];
    var isGroup = Array.isArray(host);
    var idOutput = (isGroup ? 'group: ' : '') + item(hostId);

    col(idOutput, isGroup ? host.join(', ') : host);
  });

  title('Deployment');
  col('APP', 'TARGETS');
  Object.keys(deployment).forEach(function (appId) {
    var targets = deployment[appId];

    // Each applicable deployment target for the current app will be a property of the "targets" object, and the
    // property's value will be a boolean (true when deployment permission has been granted, false otherwise)
    col(item(appId), Object.keys(targets).map(function (target) {
      return targets[target] ? granted(target) : denied(target);
    }).join(', '));
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvb3V0cHV0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7a0JBdUN3QjtRQVlSO1FBY0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFwRFQsSUFBTTtBQUNYLFlBQVUsZ0JBQU0sSUFBTixDQUFXLE1BQVg7QUFDVixPQUFLLGdCQUFNLE1BQU47QUFDTCxVQUFRLGdCQUFNLElBQU47QUFDUixTQUFPLGdCQUFNLElBQU4sQ0FBVyxHQUFYO0FBQ1AsWUFBVSxnQkFBTSxNQUFOO0FBQ1YsT0FBSyxnQkFBTSxNQUFOO0FBQ0wsU0FBTyxnQkFBTSxJQUFOLENBQVcsTUFBWDtBQUNQLFVBQVEsZ0JBQU0sSUFBTjtxRUFDVyxnQkFBTSxJQUFOLENBQVcsR0FBWCxvRUFDRCxnQkFBTSxJQUFOLENBQVcsSUFBWCxrRUFDRixnQkFBTSxJQUFOLENBQVcsS0FBWCxxRUFDRyxnQkFBTSxRQUFOLGlCQVpSOzs7QUFnQmIsSUFBTSxNQUFNLFNBQU4sR0FBTTtTQUFPLE9BQU8sR0FBUDtDQUFQO0FBQ1osSUFBTSxVQUFVLFNBQVYsT0FBVTtTQUFNLElBQUksRUFBSjtDQUFOO0FBQ2hCLElBQU0sS0FBSyxTQUFMLEVBQUs7U0FBTSxJQUFJLGdCQUFNLElBQU4sQ0FBVyxJQUFJLEtBQUosQ0FBVSxFQUFWLEVBQWMsSUFBZCxDQUFtQixHQUFuQixDQUFYLENBQUo7Q0FBTjs7QUFFWCxTQUFTLEdBQVQsQ0FBYyxHQUFkLEVBQXlDO01BQXRCLDREQUFNLGtCQUFnQjtNQUFaLDZEQUFPLG1CQUFLOztBQUN2QyxNQUFNLE1BQU0seUJBQVUsR0FBVixFQUFlLE1BQWYsQ0FEMkI7O0FBR3ZDLFNBQU8sTUFBTSxHQUFOLEdBQVksTUFBTSxJQUFLLEtBQUosQ0FBVSxNQUFNLEdBQU4sR0FBWSxDQUFaLENBQVgsQ0FBMkIsSUFBM0IsQ0FBZ0MsSUFBaEMsQ0FBTixHQUE4QyxHQUExRCxDQUhnQztDQUF6Qzs7QUFNZSxTQUFTLE1BQVQsQ0FB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TixFQW5DdUU7QUFvQ3ZFLE1BQUksS0FBSixFQUFXLFNBQVgsRUFwQ3VFO0FBcUN2RSxTQUFPLElBQVAsQ0FBWSxVQUFaLEVBQXdCLE9BQXhCLENBQWdDLFVBQUMsS0FBRCxFQUFXO0FBQ3pDLFFBQU0sVUFBVSxXQUFXLEtBQVgsQ0FBVjs7OztBQURtQyxPQUt6QyxDQUNFLEtBQUssS0FBTCxDQURGLEVBRUUsT0FBTyxJQUFQLENBQVksT0FBWixFQUFxQixHQUFyQixDQUF5QixVQUFDLE1BQUQ7YUFBWSxRQUFRLE1BQVIsSUFBa0IsUUFBUSxNQUFSLENBQWxCLEdBQW9DLE9BQU8sTUFBUCxDQUFwQztLQUFaLENBQXpCLENBQXlGLElBQXpGLENBQThGLElBQTlGLENBRkYsRUFMeUM7R0FBWCxDQUFoQyxDQXJDdUU7Q0FBekUiLCJmaWxlIjoib3V0cHV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsaydcbmltcG9ydCBzdHJpcEFuc2kgZnJvbSAnc3RyaXAtYW5zaSdcbmltcG9ydCB7XG4gIENBVEVHT1JZX0lORk8sXG4gIE1TR19MRVZFTF9ERUJVRyxcbiAgTVNHX0xFVkVMX0VSUk9SLFxuICBNU0dfTEVWRUxfSU5GTyxcbiAgTVNHX0xFVkVMX09LLFxuICBNU0dfTEVWRUxfUkFXXG59IGZyb20gJ2hhbmRvdXQtY29uc3RhbnRzJ1xuXG5leHBvcnQgY29uc3Qgb3V0cHV0U3R5bGVzID0ge1xuICBoZWFkbGluZTogY2hhbGsuYm9sZC55ZWxsb3csXG4gIHVybDogY2hhbGsueWVsbG93LFxuICB0YXJnZXQ6IGNoYWxrLmN5YW4sXG4gIGVycm9yOiBjaGFsay5ib2xkLnJlZCxcbiAgdXNlcm5hbWU6IGNoYWxrLnllbGxvdyxcbiAgYXBwOiBjaGFsay55ZWxsb3csXG4gIHVzYWdlOiBjaGFsay5ib2xkLnllbGxvdyxcbiAgY2xpQXJnOiBjaGFsay5jeWFuLFxuICBbTVNHX0xFVkVMX0VSUk9SXTogY2hhbGsuYm9sZC5yZWQsXG4gIFtNU0dfTEVWRUxfSU5GT106IGNoYWxrLmJvbGQuZ3JleSxcbiAgW01TR19MRVZFTF9PS106IGNoYWxrLmJvbGQuZ3JlZW4sXG4gIFtNU0dfTEVWRUxfREVCVUddOiBjaGFsay5iZ1llbGxvd1xufVxuXG4vLyBVdGlsaXR5IHN0dWZmXG5jb25zdCByYXcgPSBtc2cgPT4gb3V0cHV0KG1zZywgTVNHX0xFVkVMX1JBVylcbmNvbnN0IG5ld2xpbmUgPSAoKSA9PiByYXcoJycpXG5jb25zdCBociA9ICgpID0+IHJhdyhjaGFsay5ncmV5KG5ldyBBcnJheSg4MCkuam9pbignLScpKSlcblxuZnVuY3Rpb24gcGFkIChzdHIsIG1heCA9IDE1LCBjaGFyID0gJyAnKSB7XG4gIGNvbnN0IGxlbiA9IHN0cmlwQW5zaShzdHIpLmxlbmd0aFxuXG4gIHJldHVybiBsZW4gPCBtYXggPyBzdHIgKyAobmV3IEFycmF5KG1heCAtIGxlbiArIDEpKS5qb2luKGNoYXIpIDogc3RyXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG91dHB1dCAobWVzc2FnZSwgbGV2ZWwgPSBNU0dfTEVWRUxfSU5GTywgZnJvbVJlbW90ZSA9IGZhbHNlKSB7XG4gIGxldCBwcmVwZW5kID0gJydcblxuICBpZiAobGV2ZWwgIT09IE1TR19MRVZFTF9SQVcpIHtcbiAgICBwcmVwZW5kICs9IGBbJHtmcm9tUmVtb3RlID8gJ3NlcnZlcicgOiAnbG9jYWwnfToke291dHB1dFN0eWxlc1sgbGV2ZWwgXShsZXZlbCl9XWBcblxuICAgIGNvbnNvbGUubG9nKGAke3BhZChwcmVwZW5kKX0gJHttZXNzYWdlfWApXG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2cobWVzc2FnZSlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb3V0cHV0VGl0bGUgKHsgdmVyc2lvbiB9KSB7IC8vIEFsbCBvZiBwYWNrYWdlLmpzb24gcGFzc2VkIGluLCB1c2luZyBvbmx5IHZlcnNpb24gZm9yIG5vd1xuICBuZXdsaW5lKClcbiAgaHIoKVxuICByYXcob3V0cHV0U3R5bGVzLmhlYWRsaW5lKCdoYW5kb3V0JykpXG4gIHJhdyhgJHtvdXRwdXRTdHlsZXMuaGVhZGxpbmUoJ3RhaWxvcmVkIGFwcHMnKX0gYmFja2VuZCBkZXBsb3ltZW50IHRvb2wgdiR7dmVyc2lvbn1gKVxuICBocigpXG4gIG5ld2xpbmUoKVxufVxuXG4vKipcbiAqIFByb2Nlc3NlcyByYXcgZGF0YSBhbmQgZ2VuZXJhdGVzIG91dHB1dCBmb3Igc2VydmVyIHJlc3BvbnNlcyB0aGF0IHJlcXVpcmUgYWRkaXRpb25hbCBwcm9jZXNzaW5nIChpLmUuIHRob3NlIHdpdGggTVNHX0xFVkVMX1BST0NFU1MpLlxuICpcbiAqIEBwYXJhbSB3cmFwcGVyT2JqIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1Jlc3BvbnNlICh7IGNhdGVnb3J5LCBkYXRhIH0pIHtcbiAgLy8gV2Ugb25seSBpbXBsZW1lbnQgQ0FURUdPUllfSU5GTyBmb3Igbm93LCBjYW4gdXNlIGEgc3dpdGNoIG9yIGEgZnVuY3Rpb24gbWFwIGxhdGVyXG4gIGlmIChjYXRlZ29yeSA9PT0gQ0FURUdPUllfSU5GTykge1xuICAgIHByb2Nlc3NJbmZvUmVzcG9uc2UoZGF0YSlcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQoYEluY29ycmVjdCBvdXRwdXQgcHJvY2Vzc2luZyBjYXRlZ29yeSBcIiR7Y2F0ZWdvcnl9XCIgcmV0dXJuZWQgZnJvbSBzZXJ2ZXIuYCwgTVNHX0xFVkVMX0VSUk9SKVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NJbmZvUmVzcG9uc2UgKHsgaG9zdHMsIGRlcGxveW1lbnQsIHVzZXJzLCBwZXJtaXNzaW9ucyB9KSB7XG4gIGNvbnN0IHsgaGVhZGxpbmUsIHRhcmdldCB9ID0gb3V0cHV0U3R5bGVzXG5cbiAgY29uc3QgaXRlbSA9IGNoYWxrLmJsdWVcbiAgY29uc3QgZ3JhbnRlZCA9IGNoYWxrLmdyZWVuXG4gIGNvbnN0IGRlbmllZCA9IGNoYWxrLnJlZFxuXG4gIGNvbnN0IGluZGVudCA9IChzdHIpID0+IHJhdyhgICAgICR7c3RyfWApXG4gIGNvbnN0IGNvbCA9IChsZWZ0LCByaWdodCA9ICcnLCB3aWR0aCA9IDI1KSA9PiBpbmRlbnQoYCR7cGFkKGxlZnQsIHdpZHRoKX0ke3JpZ2h0fWApXG4gIGNvbnN0IHRpdGxlID0gc3RyID0+IHtcbiAgICBocigpXG4gICAgaW5kZW50KGhlYWRsaW5lKHN0ci50b1VwcGVyQ2FzZSgpKSlcbiAgICBocigpXG4gIH1cblxuICBpZiAodXNlcnMpIHtcbiAgICB0aXRsZSgnVXNlcnMnKVxuICAgIHVzZXJzLmZvckVhY2godSA9PiBjb2woaXRlbSh1KSkpXG4gIH1cblxuICB0aXRsZSgnUGVybWlzc2lvbnMnKVxuICBPYmplY3Qua2V5cyhwZXJtaXNzaW9ucykuZm9yRWFjaCgocCkgPT4ge1xuICAgIGNvbChpdGVtKHApLCBwZXJtaXNzaW9uc1twXSA/IGdyYW50ZWQoJ2dyYW50ZWQnKSA6IGRlbmllZCgnZGVuaWVkJykpXG4gIH0pXG5cbiAgdGl0bGUoJ1RhcmdldHMnKVxuICBjb2woJ1RBUkdFVCBJRCcsICdIT1NUTkFNRScpXG4gIE9iamVjdC5rZXlzKGhvc3RzKS5mb3JFYWNoKChob3N0SWQpID0+IHtcbiAgICBjb25zdCBob3N0ID0gaG9zdHNbaG9zdElkXVxuICAgIGNvbnN0IGlzR3JvdXAgPSBBcnJheS5pc0FycmF5KGhvc3QpXG4gICAgY29uc3QgaWRPdXRwdXQgPSAoaXNHcm91cCA/ICdncm91cDogJyA6ICcnKSArIGl0ZW0oaG9zdElkKVxuXG4gICAgY29sKGlkT3V0cHV0LCBpc0dyb3VwID8gaG9zdC5qb2luKCcsICcpIDogaG9zdClcbiAgfSlcblxuICB0aXRsZSgnRGVwbG95bWVudCcpXG4gIGNvbCgnQVBQJywgJ1RBUkdFVFMnKVxuICBPYmplY3Qua2V5cyhkZXBsb3ltZW50KS5mb3JFYWNoKChhcHBJZCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldHMgPSBkZXBsb3ltZW50W2FwcElkXVxuXG4gICAgLy8gRWFjaCBhcHBsaWNhYmxlIGRlcGxveW1lbnQgdGFyZ2V0IGZvciB0aGUgY3VycmVudCBhcHAgd2lsbCBiZSBhIHByb3BlcnR5IG9mIHRoZSBcInRhcmdldHNcIiBvYmplY3QsIGFuZCB0aGVcbiAgICAvLyBwcm9wZXJ0eSdzIHZhbHVlIHdpbGwgYmUgYSBib29sZWFuICh0cnVlIHdoZW4gZGVwbG95bWVudCBwZXJtaXNzaW9uIGhhcyBiZWVuIGdyYW50ZWQsIGZhbHNlIG90aGVyd2lzZSlcbiAgICBjb2woXG4gICAgICBpdGVtKGFwcElkKSxcbiAgICAgIE9iamVjdC5rZXlzKHRhcmdldHMpLm1hcCgodGFyZ2V0KSA9PiB0YXJnZXRzW3RhcmdldF0gPyBncmFudGVkKHRhcmdldCkgOiBkZW5pZWQodGFyZ2V0KSkuam9pbignLCAnKVxuICAgIClcbiAgfSlcbn1cbiJdfQ==