'use strict';

var _outputStyles;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outputStyles = undefined;
exports.default = output;
exports.outputTitle = outputTitle;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _stripAnsi = require('strip-ansi');

var _stripAnsi2 = _interopRequireDefault(_stripAnsi);

var _handoutConstants = require('handout-constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var outputStyles = exports.outputStyles = (_outputStyles = {
  headline: _chalk2.default.bold.yellow,
  url: _chalk2.default.yellow,
  target: _chalk2.default.cyan,
  error: _chalk2.default.bold.red,
  username: _chalk2.default.yellow,
  app: _chalk2.default.yellow,
  usage: _chalk2.default.bold.yellow,
  cliArg: _chalk2.default.cyan
}, _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_ERROR, _chalk2.default.bold.red), _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_INFO, _chalk2.default.bold.grey), _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_OK, _chalk2.default.bold.green), _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_DEBUG, _chalk2.default.bgYellow), _outputStyles);

function pad(str) {
  var max = arguments.length <= 1 || arguments[1] === undefined ? 15 : arguments[1];
  var char = arguments.length <= 2 || arguments[2] === undefined ? ' ' : arguments[2];

  var len = (0, _stripAnsi2.default)(str).length;

  return len < max ? str + new Array(max - len + 1).join(char) : str;
}

function output(message) {
  var level = arguments.length <= 1 || arguments[1] === undefined ? _handoutConstants.MSG_LEVEL_INFO : arguments[1];
  var fromRemote = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

  var prepend = '';

  if (level !== _handoutConstants.MSG_LEVEL_RAW) {
    prepend += '[' + (fromRemote ? 'server' : 'local') + ':' + outputStyles[level](level) + ']';

    console.log(pad(prepend) + ' ' + message);
  } else {
    console.log(message);
  }
}

function outputTitle(_ref) {
  var version = _ref.version;
  // All of package.json passed in, using only version for now
  var hr = _chalk2.default.grey(new Array(80).join('-'));
  var newline = '';
  var o = function o(msg) {
    return output(msg, _handoutConstants.MSG_LEVEL_RAW);
  };

  o(newline);
  o(hr);
  o(outputStyles.headline('handout'));
  o(outputStyles.headline('tailored apps') + ' backend deployment tool v' + version);
  o(hr);
  o(newline);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvb3V0cHV0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQTs7Ozs7Ozs7a0JBaUNZLE1BQU07UUFZZCxXQUFXLEdBQVgsV0FBVzs7Ozs7Ozs7Ozs7Ozs7OztBQWpDcEIsSUFBTSxZQUFZLFdBQVosWUFBWTtBQUN2QixVQUFRLEVBQUUsZ0JBQU0sSUFBSSxDQUFDLE1BQU07QUFDM0IsS0FBRyxFQUFFLGdCQUFNLE1BQU07QUFDakIsUUFBTSxFQUFFLGdCQUFNLElBQUk7QUFDbEIsT0FBSyxFQUFFLGdCQUFNLElBQUksQ0FBQyxHQUFHO0FBQ3JCLFVBQVEsRUFBRSxnQkFBTSxNQUFNO0FBQ3RCLEtBQUcsRUFBRSxnQkFBTSxNQUFNO0FBQ2pCLE9BQUssRUFBRSxnQkFBTSxJQUFJLENBQUMsTUFBTTtBQUN4QixRQUFNLEVBQUUsZ0JBQU0sSUFBSTtxRUFDQyxnQkFBTSxJQUFJLENBQUMsR0FBRyxvRUFDZixnQkFBTSxJQUFJLENBQUMsSUFBSSxrRUFDakIsZ0JBQU0sSUFBSSxDQUFDLEtBQUsscUVBQ2IsZ0JBQU0sUUFBUSxpQkFDbEMsQ0FBQTs7QUFFRCxTQUFTLEdBQUcsQ0FBRSxHQUFHLEVBQXdCO01BQXRCLEdBQUcseURBQUcsRUFBRTtNQUFFLElBQUkseURBQUcsR0FBRzs7QUFDckMsTUFBTSxHQUFHLEdBQUcseUJBQVUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFBOztBQUVqQyxTQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEFBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFBO0NBQ3JFOztBQUVjLFNBQVMsTUFBTSxDQUFFLE9BQU8sRUFBOEM7TUFBNUMsS0FBSztNQUFtQixVQUFVLHlEQUFHLEtBQUs7O0FBQ2pGLE1BQUksT0FBTyxHQUFHLEVBQUUsQ0FBQTs7QUFFaEIsTUFBSSxLQUFLLG9DQUFrQixFQUFFO0FBQzNCLFdBQU8sV0FBUSxVQUFVLEdBQUcsUUFBUSxHQUFHLE9BQU8sQ0FBQSxTQUFJLFlBQVksQ0FBRSxLQUFLLENBQUUsQ0FBQyxLQUFLLENBQUMsTUFBRyxDQUFBOztBQUVqRixXQUFPLENBQUMsR0FBRyxDQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBSSxPQUFPLENBQUcsQ0FBQTtHQUMxQyxNQUFNO0FBQ0wsV0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtHQUNyQjtDQUNGOztBQUVNLFNBQVMsV0FBVyxPQUFlO01BQVgsT0FBTyxRQUFQLE9BQU87O0FBQ3BDLE1BQU0sRUFBRSxHQUFHLGdCQUFNLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUM5QyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUE7QUFDbEIsTUFBTSxDQUFDLEdBQUcsU0FBSixDQUFDLENBQUcsR0FBRztXQUFJLE1BQU0sQ0FBQyxHQUFHLGtDQUFnQjtHQUFBLENBQUE7O0FBRTNDLEdBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNWLEdBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNMLEdBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7QUFDbkMsR0FBQyxDQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLGtDQUE2QixPQUFPLENBQUcsQ0FBQTtBQUNsRixHQUFDLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDTCxHQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7Q0FDWCIsImZpbGUiOiJvdXRwdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJ1xuaW1wb3J0IHN0cmlwQW5zaSBmcm9tICdzdHJpcC1hbnNpJ1xuaW1wb3J0IHtcbiAgTVNHX0xFVkVMX0RFQlVHLFxuICBNU0dfTEVWRUxfRVJST1IsXG4gIE1TR19MRVZFTF9JTkZPLFxuICBNU0dfTEVWRUxfT0ssXG4gIE1TR19MRVZFTF9SQVdcbn0gZnJvbSAnaGFuZG91dC1jb25zdGFudHMnXG5cbmV4cG9ydCBjb25zdCBvdXRwdXRTdHlsZXMgPSB7XG4gIGhlYWRsaW5lOiBjaGFsay5ib2xkLnllbGxvdyxcbiAgdXJsOiBjaGFsay55ZWxsb3csXG4gIHRhcmdldDogY2hhbGsuY3lhbixcbiAgZXJyb3I6IGNoYWxrLmJvbGQucmVkLFxuICB1c2VybmFtZTogY2hhbGsueWVsbG93LFxuICBhcHA6IGNoYWxrLnllbGxvdyxcbiAgdXNhZ2U6IGNoYWxrLmJvbGQueWVsbG93LFxuICBjbGlBcmc6IGNoYWxrLmN5YW4sXG4gIFtNU0dfTEVWRUxfRVJST1JdOiBjaGFsay5ib2xkLnJlZCxcbiAgW01TR19MRVZFTF9JTkZPXTogY2hhbGsuYm9sZC5ncmV5LFxuICBbTVNHX0xFVkVMX09LXTogY2hhbGsuYm9sZC5ncmVlbixcbiAgW01TR19MRVZFTF9ERUJVR106IGNoYWxrLmJnWWVsbG93XG59XG5cbmZ1bmN0aW9uIHBhZCAoc3RyLCBtYXggPSAxNSwgY2hhciA9ICcgJykge1xuICBjb25zdCBsZW4gPSBzdHJpcEFuc2koc3RyKS5sZW5ndGhcblxuICByZXR1cm4gbGVuIDwgbWF4ID8gc3RyICsgKG5ldyBBcnJheShtYXggLSBsZW4gKyAxKSkuam9pbihjaGFyKSA6IHN0clxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvdXRwdXQgKG1lc3NhZ2UsIGxldmVsID0gTVNHX0xFVkVMX0lORk8sIGZyb21SZW1vdGUgPSBmYWxzZSkge1xuICBsZXQgcHJlcGVuZCA9ICcnXG5cbiAgaWYgKGxldmVsICE9PSBNU0dfTEVWRUxfUkFXKSB7XG4gICAgcHJlcGVuZCArPSBgWyR7ZnJvbVJlbW90ZSA/ICdzZXJ2ZXInIDogJ2xvY2FsJ306JHtvdXRwdXRTdHlsZXNbIGxldmVsIF0obGV2ZWwpfV1gXG5cbiAgICBjb25zb2xlLmxvZyhgJHtwYWQocHJlcGVuZCl9ICR7bWVzc2FnZX1gKVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG91dHB1dFRpdGxlICh7IHZlcnNpb24gfSkgeyAvLyBBbGwgb2YgcGFja2FnZS5qc29uIHBhc3NlZCBpbiwgdXNpbmcgb25seSB2ZXJzaW9uIGZvciBub3dcbiAgY29uc3QgaHIgPSBjaGFsay5ncmV5KG5ldyBBcnJheSg4MCkuam9pbignLScpKVxuICBjb25zdCBuZXdsaW5lID0gJydcbiAgY29uc3QgbyA9IG1zZyA9PiBvdXRwdXQobXNnLCBNU0dfTEVWRUxfUkFXKVxuXG4gIG8obmV3bGluZSlcbiAgbyhocilcbiAgbyhvdXRwdXRTdHlsZXMuaGVhZGxpbmUoJ2hhbmRvdXQnKSlcbiAgbyhgJHtvdXRwdXRTdHlsZXMuaGVhZGxpbmUoJ3RhaWxvcmVkIGFwcHMnKX0gYmFja2VuZCBkZXBsb3ltZW50IHRvb2wgdiR7dmVyc2lvbn1gKVxuICBvKGhyKVxuICBvKG5ld2xpbmUpXG59XG4iXX0=