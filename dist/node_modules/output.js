"use strict";

var _outputStyles;

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.outputStyles = exports.LEVEL_RAW = exports.LEVEL_ERROR = exports.LEVEL_INFO = exports.LEVEL_OK = undefined;
exports.default = output;
exports.outputTitle = outputTitle;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _stripAnsi = require('strip-ansi');

var _stripAnsi2 = _interopRequireDefault(_stripAnsi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LEVEL_OK = exports.LEVEL_OK = 'ok';
var LEVEL_INFO = exports.LEVEL_INFO = 'info';
var LEVEL_ERROR = exports.LEVEL_ERROR = 'error';
var LEVEL_RAW = exports.LEVEL_RAW = 'raw';

var outputStyles = exports.outputStyles = (_outputStyles = {
    headline: _chalk2.default.bold.yellow,
    url: _chalk2.default.yellow,
    target: _chalk2.default.cyan,
    error: _chalk2.default.bold.red,
    username: _chalk2.default.yellow,
    app: _chalk2.default.yellow,
    usage: _chalk2.default.bold.yellow,
    cliArg: _chalk2.default.cyan
}, _defineProperty(_outputStyles, LEVEL_ERROR, _chalk2.default.bold.red), _defineProperty(_outputStyles, LEVEL_INFO, _chalk2.default.bold.grey), _defineProperty(_outputStyles, LEVEL_OK, _chalk2.default.bold.green), _outputStyles);

function pad(str) {
    var max = arguments.length <= 1 || arguments[1] === undefined ? 15 : arguments[1];
    var char = arguments.length <= 2 || arguments[2] === undefined ? ' ' : arguments[2];

    var len = (0, _stripAnsi2.default)(str).length;

    return len < max ? str + new Array(max - len + 1).join(char) : str;
}

function output(message) {
    var level = arguments.length <= 1 || arguments[1] === undefined ? LEVEL_INFO : arguments[1];
    var fromRemote = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    var prepend = '';

    if (level !== LEVEL_RAW) {
        prepend += '[' + (fromRemote ? 'server' : 'local') + ':' + outputStyles[level](level) + ']';
    }

    console.log(pad(prepend) + ' ' + message);
}

function outputTitle(_ref) {
    var version = _ref.version;
    // All of package.json passed in, using only version for now
    var hr = _chalk2.default.grey(new Array(80).join('-'));
    var newline = '';
    var o = function o(msg) {
        return output(msg, LEVEL_RAW);
    };

    o(newline);
    o(hr);
    o(outputStyles.headline('handOut'));
    o(outputStyles.headline('tailored apps') + ' backend deployment tool v' + version);
    o(hr);
    o(newline);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvb3V0cHV0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQTs7Ozs7Ozs7a0JBOEJZLE1BQU07UUFVZCxXQUFXLEdBQVgsV0FBVzs7Ozs7Ozs7Ozs7Ozs7QUFuQ3BCLElBQU0sUUFBUSxXQUFSLFFBQVEsR0FBRyxJQUFJLENBQUE7QUFDckIsSUFBTSxVQUFVLFdBQVYsVUFBVSxHQUFHLE1BQU0sQ0FBQTtBQUN6QixJQUFNLFdBQVcsV0FBWCxXQUFXLEdBQUcsT0FBTyxDQUFBO0FBQzNCLElBQU0sU0FBUyxXQUFULFNBQVMsR0FBRyxLQUFLLENBQUE7O0FBRXZCLElBQU0sWUFBWSxXQUFaLFlBQVk7QUFDckIsWUFBUSxFQUFFLGdCQUFNLElBQUksQ0FBQyxNQUFNO0FBQzNCLE9BQUcsRUFBRSxnQkFBTSxNQUFNO0FBQ2pCLFVBQU0sRUFBRSxnQkFBTSxJQUFJO0FBQ2xCLFNBQUssRUFBRSxnQkFBTSxJQUFJLENBQUMsR0FBRztBQUNyQixZQUFRLEVBQUUsZ0JBQU0sTUFBTTtBQUN0QixPQUFHLEVBQUUsZ0JBQU0sTUFBTTtBQUNqQixTQUFLLEVBQUUsZ0JBQU0sSUFBSSxDQUFDLE1BQU07QUFDeEIsVUFBTSxFQUFFLGdCQUFNLElBQUk7a0NBQ2pCLFdBQVcsRUFBRyxnQkFBTSxJQUFJLENBQUMsR0FBRyxrQ0FDNUIsVUFBVSxFQUFHLGdCQUFNLElBQUksQ0FBQyxJQUFJLGtDQUM1QixRQUFRLEVBQUcsZ0JBQU0sSUFBSSxDQUFDLEtBQUssaUJBQy9CLENBQUE7O0FBRUQsU0FBUyxHQUFHLENBQUMsR0FBRyxFQUF3QjtRQUF0QixHQUFHLHlEQUFHLEVBQUU7UUFBRSxJQUFJLHlEQUFHLEdBQUc7O0FBQ2xDLFFBQU0sR0FBRyxHQUFHLHlCQUFVLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQTs7QUFFakMsV0FBTyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxBQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQTtDQUN2RTs7QUFFYyxTQUFTLE1BQU0sQ0FBQyxPQUFPLEVBQTBDO1FBQXhDLEtBQUsseURBQUcsVUFBVTtRQUFFLFVBQVUseURBQUcsS0FBSzs7QUFDMUUsUUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFBOztBQUVoQixRQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7QUFDckIsZUFBTyxXQUFRLFVBQVUsR0FBRyxRQUFRLEdBQUcsT0FBTyxDQUFBLFNBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFHLENBQUE7S0FDbEY7O0FBRUQsV0FBTyxDQUFDLEdBQUcsQ0FBSSxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQUksT0FBTyxDQUFHLENBQUE7Q0FDNUM7O0FBRU0sU0FBUyxXQUFXLE9BQVk7UUFBVixPQUFPLFFBQVAsT0FBTzs7QUFDaEMsUUFBTSxFQUFFLEdBQUcsZ0JBQU0sSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQzlDLFFBQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQTtBQUNsQixRQUFNLENBQUMsR0FBRyxTQUFKLENBQUMsQ0FBRyxHQUFHO2VBQUksTUFBTSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUM7S0FBQSxDQUFBOztBQUV2QyxLQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDVixLQUFDLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDTCxLQUFDLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO0FBQ25DLEtBQUMsQ0FBSSxZQUFZLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxrQ0FBNkIsT0FBTyxDQUFHLENBQUE7QUFDbEYsS0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ0wsS0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0NBQ2IiLCJmaWxlIjoib3V0cHV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJ1xuaW1wb3J0IHN0cmlwQW5zaSBmcm9tICdzdHJpcC1hbnNpJ1xuXG5leHBvcnQgY29uc3QgTEVWRUxfT0sgPSAnb2snXG5leHBvcnQgY29uc3QgTEVWRUxfSU5GTyA9ICdpbmZvJ1xuZXhwb3J0IGNvbnN0IExFVkVMX0VSUk9SID0gJ2Vycm9yJ1xuZXhwb3J0IGNvbnN0IExFVkVMX1JBVyA9ICdyYXcnXG5cbmV4cG9ydCBjb25zdCBvdXRwdXRTdHlsZXMgPSB7XG4gICAgaGVhZGxpbmU6IGNoYWxrLmJvbGQueWVsbG93LFxuICAgIHVybDogY2hhbGsueWVsbG93LFxuICAgIHRhcmdldDogY2hhbGsuY3lhbixcbiAgICBlcnJvcjogY2hhbGsuYm9sZC5yZWQsXG4gICAgdXNlcm5hbWU6IGNoYWxrLnllbGxvdyxcbiAgICBhcHA6IGNoYWxrLnllbGxvdyxcbiAgICB1c2FnZTogY2hhbGsuYm9sZC55ZWxsb3csXG4gICAgY2xpQXJnOiBjaGFsay5jeWFuLFxuICAgIFtMRVZFTF9FUlJPUl06IGNoYWxrLmJvbGQucmVkLFxuICAgIFtMRVZFTF9JTkZPXTogY2hhbGsuYm9sZC5ncmV5LFxuICAgIFtMRVZFTF9PS106IGNoYWxrLmJvbGQuZ3JlZW4sXG59XG5cbmZ1bmN0aW9uIHBhZChzdHIsIG1heCA9IDE1LCBjaGFyID0gJyAnKSB7XG4gICAgY29uc3QgbGVuID0gc3RyaXBBbnNpKHN0cikubGVuZ3RoXG5cbiAgICByZXR1cm4gbGVuIDwgbWF4ID8gc3RyICsgKG5ldyBBcnJheShtYXggLSBsZW4gKyAxKSkuam9pbihjaGFyKSA6IHN0clxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvdXRwdXQobWVzc2FnZSwgbGV2ZWwgPSBMRVZFTF9JTkZPLCBmcm9tUmVtb3RlID0gZmFsc2UpIHtcbiAgICBsZXQgcHJlcGVuZCA9ICcnXG5cbiAgICBpZiAobGV2ZWwgIT09IExFVkVMX1JBVykge1xuICAgICAgICBwcmVwZW5kICs9IGBbJHtmcm9tUmVtb3RlID8gJ3NlcnZlcicgOiAnbG9jYWwnfToke291dHB1dFN0eWxlc1tsZXZlbF0obGV2ZWwpfV1gXG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coYCR7cGFkKHByZXBlbmQpfSAke21lc3NhZ2V9YClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG91dHB1dFRpdGxlKHt2ZXJzaW9ufSkgeyAvLyBBbGwgb2YgcGFja2FnZS5qc29uIHBhc3NlZCBpbiwgdXNpbmcgb25seSB2ZXJzaW9uIGZvciBub3dcbiAgICBjb25zdCBociA9IGNoYWxrLmdyZXkobmV3IEFycmF5KDgwKS5qb2luKCctJykpXG4gICAgY29uc3QgbmV3bGluZSA9ICcnXG4gICAgY29uc3QgbyA9IG1zZyA9PiBvdXRwdXQobXNnLCBMRVZFTF9SQVcpXG5cbiAgICBvKG5ld2xpbmUpXG4gICAgbyhocilcbiAgICBvKG91dHB1dFN0eWxlcy5oZWFkbGluZSgnaGFuZE91dCcpKVxuICAgIG8oYCR7b3V0cHV0U3R5bGVzLmhlYWRsaW5lKCd0YWlsb3JlZCBhcHBzJyl9IGJhY2tlbmQgZGVwbG95bWVudCB0b29sIHYke3ZlcnNpb259YClcbiAgICBvKGhyKVxuICAgIG8obmV3bGluZSlcbn0iXX0=