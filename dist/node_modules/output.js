'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outputStyles = undefined;

var _outputStyles;

exports.default = output;
exports.outputTitle = outputTitle;
exports.processResponse = processResponse;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _stripAnsi = require('strip-ansi');

var _stripAnsi2 = _interopRequireDefault(_stripAnsi);

var _handoutConstants = require('handout-constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var outputStyles = exports.outputStyles = (_outputStyles = {
  headline: _chalk2.default.bold.yellow,
  url: _chalk2.default.yellow,
  target: _chalk2.default.cyan,
  error: _chalk2.default.bold.red,
  username: _chalk2.default.yellow,
  app: _chalk2.default.yellow,
  usage: _chalk2.default.bold.yellow,
  cliArg: _chalk2.default.cyan
}, _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_ERROR, _chalk2.default.bold.red), _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_INFO, _chalk2.default.bold.grey), _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_OK, _chalk2.default.bold.green), _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_DEBUG, _chalk2.default.bgYellow), _outputStyles);

// Utility stuff
var raw = function raw(msg) {
  return output(msg, _handoutConstants.MSG_LEVEL_RAW);
};
var newline = function newline() {
  return raw('');
};
var hr = function hr() {
  return raw(_chalk2.default.grey(new Array(80).join('-')));
};

function pad(str) {
  var max = arguments.length <= 1 || arguments[1] === undefined ? 15 : arguments[1];
  var char = arguments.length <= 2 || arguments[2] === undefined ? ' ' : arguments[2];

  var len = (0, _stripAnsi2.default)(str).length;

  return len < max ? str + new Array(max - len + 1).join(char) : str;
}

function output(message) {
  var level = arguments.length <= 1 || arguments[1] === undefined ? _handoutConstants.MSG_LEVEL_INFO : arguments[1];
  var fromRemote = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

  var prepend = '';

  if (level !== _handoutConstants.MSG_LEVEL_RAW) {
    prepend += '[' + (fromRemote ? 'server' : 'local') + ':' + outputStyles[level](level) + ']';

    console.log(pad(prepend) + ' ' + message);
  } else {
    console.log(message);
  }
}

function outputTitle(_ref) {
  var version = _ref.version;
  // All of package.json passed in, using only version for now
  newline();
  hr();
  raw(outputStyles.headline('handout'));
  raw(outputStyles.headline('tailored apps') + ' backend deployment tool v' + version);
  hr();
  newline();
}

/**
 * Processes raw data and generates output for server responses that require additional processing (i.e. those with MSG_LEVEL_PROCESS).
 *
 * @param wrapperObj object
 */
function processResponse(_ref2) {
  var category = _ref2.category;
  var data = _ref2.data;

  // We only implement CATEGORY_INFO for now, can use a switch or a function map later
  if (category === _handoutConstants.CATEGORY_INFO) {
    processInfoResponse(data);
  } else {
    output('Incorrect output processing category "' + category + '" returned from server.', _handoutConstants.MSG_LEVEL_ERROR);
  }
}

function processInfoResponse(_ref3) {
  var hosts = _ref3.hosts;
  var deployment = _ref3.deployment;
  var users = _ref3.users;
  var permissions = _ref3.permissions;
  var headline = outputStyles.headline;
  var target = outputStyles.target;

  var item = _chalk2.default.blue;
  var granted = _chalk2.default.green;
  var denied = _chalk2.default.red;

  var indent = function indent(str) {
    return raw('    ' + str);
  };
  var col = function col(left, right) {
    var width = arguments.length <= 2 || arguments[2] === undefined ? 25 : arguments[2];
    return indent('' + pad(left, width) + right);
  };
  var title = function title(str) {
    hr();
    indent(headline(str.toUpperCase()));
    hr();
  };

  if (users) {
    title('Users');
    users.forEach(function (u) {
      return col(item(u));
    });
  }

  title('Permissions');
  Object.keys(permissions).forEach(function (p) {
    col(item(p), permissions[p] ? granted('granted') : denied('denied'));
  });

  title('Hosts');
  Object.keys(hosts).forEach(function (hostId) {
    var host = hosts[hostId];
    var isGroup = Array.isArray(host);
    var idOutput = (isGroup ? 'group: ' : '') + item(hostId);

    col(idOutput, isGroup ? host.join(', ') : host);
  });

  title('Deployment');
  Object.keys(deployment).forEach(function (appId) {
    var perm = deployment[appId];

    col(item(appId), Array.isArray(perm) ? perm.map(function (p) {
      return target(p);
    }).join(', ') : perm ? granted('all targets') : denied('denied'));
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvb3V0cHV0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7a0JBdUN3QjtRQVlSO1FBY0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFwRFQsSUFBTTtBQUNYLFlBQVUsZ0JBQU0sSUFBTixDQUFXLE1BQVg7QUFDVixPQUFLLGdCQUFNLE1BQU47QUFDTCxVQUFRLGdCQUFNLElBQU47QUFDUixTQUFPLGdCQUFNLElBQU4sQ0FBVyxHQUFYO0FBQ1AsWUFBVSxnQkFBTSxNQUFOO0FBQ1YsT0FBSyxnQkFBTSxNQUFOO0FBQ0wsU0FBTyxnQkFBTSxJQUFOLENBQVcsTUFBWDtBQUNQLFVBQVEsZ0JBQU0sSUFBTjtxRUFDVyxnQkFBTSxJQUFOLENBQVcsR0FBWCxvRUFDRCxnQkFBTSxJQUFOLENBQVcsSUFBWCxrRUFDRixnQkFBTSxJQUFOLENBQVcsS0FBWCxxRUFDRyxnQkFBTSxRQUFOLGlCQVpSOzs7QUFnQmIsSUFBTSxNQUFNLFNBQU4sR0FBTTtTQUFPLE9BQU8sR0FBUDtDQUFQO0FBQ1osSUFBTSxVQUFVLFNBQVYsT0FBVTtTQUFNLElBQUksRUFBSjtDQUFOO0FBQ2hCLElBQU0sS0FBSyxTQUFMLEVBQUs7U0FBTSxJQUFJLGdCQUFNLElBQU4sQ0FBVyxJQUFJLEtBQUosQ0FBVSxFQUFWLEVBQWMsSUFBZCxDQUFtQixHQUFuQixDQUFYLENBQUo7Q0FBTjs7QUFFWCxTQUFTLEdBQVQsQ0FBYyxHQUFkLEVBQXlDO01BQXRCLDREQUFNLGtCQUFnQjtNQUFaLDZEQUFPLG1CQUFLOztBQUN2QyxNQUFNLE1BQU0seUJBQVUsR0FBVixFQUFlLE1BQWYsQ0FEMkI7O0FBR3ZDLFNBQU8sTUFBTSxHQUFOLEdBQVksTUFBTSxJQUFLLEtBQUosQ0FBVSxNQUFNLEdBQU4sR0FBWSxDQUFaLENBQVgsQ0FBMkIsSUFBM0IsQ0FBZ0MsSUFBaEMsQ0FBTixHQUE4QyxHQUExRCxDQUhnQztDQUF6Qzs7QUFNZSxTQUFTLE1BQVQsQ0FB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QUFTO0FBQ3ZDLFFBQU0sT0FBTyxXQUFXLEtBQVgsQ0FBUCxDQURpQzs7QUFHdkMsUUFBSSxLQUFLLEtBQUwsQ0FBSixFQUFpQixNQUFNLE9BQU4sQ0FBYyxJQUFkLElBQ2IsS0FBSyxHQUFMLENBQVMsVUFBQyxDQUFEO2FBQU8sT0FBTyxDQUFQO0tBQVAsQ0FBVCxDQUEyQixJQUEzQixDQUFnQyxJQUFoQyxDQURhLEdBRVosT0FBTyxRQUFRLGFBQVIsQ0FBUCxHQUFnQyxPQUFPLFFBQVAsQ0FBaEMsQ0FGTCxDQUh1QztHQUFULENBQWhDLENBbkN1RTtDQUF6RSIsImZpbGUiOiJvdXRwdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJ1xuaW1wb3J0IHN0cmlwQW5zaSBmcm9tICdzdHJpcC1hbnNpJ1xuaW1wb3J0IHtcbiAgQ0FURUdPUllfSU5GTyxcbiAgTVNHX0xFVkVMX0RFQlVHLFxuICBNU0dfTEVWRUxfRVJST1IsXG4gIE1TR19MRVZFTF9JTkZPLFxuICBNU0dfTEVWRUxfT0ssXG4gIE1TR19MRVZFTF9SQVdcbn0gZnJvbSAnaGFuZG91dC1jb25zdGFudHMnXG5cbmV4cG9ydCBjb25zdCBvdXRwdXRTdHlsZXMgPSB7XG4gIGhlYWRsaW5lOiBjaGFsay5ib2xkLnllbGxvdyxcbiAgdXJsOiBjaGFsay55ZWxsb3csXG4gIHRhcmdldDogY2hhbGsuY3lhbixcbiAgZXJyb3I6IGNoYWxrLmJvbGQucmVkLFxuICB1c2VybmFtZTogY2hhbGsueWVsbG93LFxuICBhcHA6IGNoYWxrLnllbGxvdyxcbiAgdXNhZ2U6IGNoYWxrLmJvbGQueWVsbG93LFxuICBjbGlBcmc6IGNoYWxrLmN5YW4sXG4gIFtNU0dfTEVWRUxfRVJST1JdOiBjaGFsay5ib2xkLnJlZCxcbiAgW01TR19MRVZFTF9JTkZPXTogY2hhbGsuYm9sZC5ncmV5LFxuICBbTVNHX0xFVkVMX09LXTogY2hhbGsuYm9sZC5ncmVlbixcbiAgW01TR19MRVZFTF9ERUJVR106IGNoYWxrLmJnWWVsbG93XG59XG5cbi8vIFV0aWxpdHkgc3R1ZmZcbmNvbnN0IHJhdyA9IG1zZyA9PiBvdXRwdXQobXNnLCBNU0dfTEVWRUxfUkFXKVxuY29uc3QgbmV3bGluZSA9ICgpID0+IHJhdygnJylcbmNvbnN0IGhyID0gKCkgPT4gcmF3KGNoYWxrLmdyZXkobmV3IEFycmF5KDgwKS5qb2luKCctJykpKVxuXG5mdW5jdGlvbiBwYWQgKHN0ciwgbWF4ID0gMTUsIGNoYXIgPSAnICcpIHtcbiAgY29uc3QgbGVuID0gc3RyaXBBbnNpKHN0cikubGVuZ3RoXG5cbiAgcmV0dXJuIGxlbiA8IG1heCA/IHN0ciArIChuZXcgQXJyYXkobWF4IC0gbGVuICsgMSkpLmpvaW4oY2hhcikgOiBzdHJcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3V0cHV0IChtZXNzYWdlLCBsZXZlbCA9IE1TR19MRVZFTF9JTkZPLCBmcm9tUmVtb3RlID0gZmFsc2UpIHtcbiAgbGV0IHByZXBlbmQgPSAnJ1xuXG4gIGlmIChsZXZlbCAhPT0gTVNHX0xFVkVMX1JBVykge1xuICAgIHByZXBlbmQgKz0gYFske2Zyb21SZW1vdGUgPyAnc2VydmVyJyA6ICdsb2NhbCd9OiR7b3V0cHV0U3R5bGVzWyBsZXZlbCBdKGxldmVsKX1dYFxuXG4gICAgY29uc29sZS5sb2coYCR7cGFkKHByZXBlbmQpfSAke21lc3NhZ2V9YClcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvdXRwdXRUaXRsZSAoeyB2ZXJzaW9uIH0pIHsgLy8gQWxsIG9mIHBhY2thZ2UuanNvbiBwYXNzZWQgaW4sIHVzaW5nIG9ubHkgdmVyc2lvbiBmb3Igbm93XG4gIG5ld2xpbmUoKVxuICBocigpXG4gIHJhdyhvdXRwdXRTdHlsZXMuaGVhZGxpbmUoJ2hhbmRvdXQnKSlcbiAgcmF3KGAke291dHB1dFN0eWxlcy5oZWFkbGluZSgndGFpbG9yZWQgYXBwcycpfSBiYWNrZW5kIGRlcGxveW1lbnQgdG9vbCB2JHt2ZXJzaW9ufWApXG4gIGhyKClcbiAgbmV3bGluZSgpXG59XG5cbi8qKlxuICogUHJvY2Vzc2VzIHJhdyBkYXRhIGFuZCBnZW5lcmF0ZXMgb3V0cHV0IGZvciBzZXJ2ZXIgcmVzcG9uc2VzIHRoYXQgcmVxdWlyZSBhZGRpdGlvbmFsIHByb2Nlc3NpbmcgKGkuZS4gdGhvc2Ugd2l0aCBNU0dfTEVWRUxfUFJPQ0VTUykuXG4gKlxuICogQHBhcmFtIHdyYXBwZXJPYmogb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzUmVzcG9uc2UgKHsgY2F0ZWdvcnksIGRhdGEgfSkge1xuICAvLyBXZSBvbmx5IGltcGxlbWVudCBDQVRFR09SWV9JTkZPIGZvciBub3csIGNhbiB1c2UgYSBzd2l0Y2ggb3IgYSBmdW5jdGlvbiBtYXAgbGF0ZXJcbiAgaWYgKGNhdGVnb3J5ID09PSBDQVRFR09SWV9JTkZPKSB7XG4gICAgcHJvY2Vzc0luZm9SZXNwb25zZShkYXRhKVxuICB9IGVsc2Uge1xuICAgIG91dHB1dChgSW5jb3JyZWN0IG91dHB1dCBwcm9jZXNzaW5nIGNhdGVnb3J5IFwiJHtjYXRlZ29yeX1cIiByZXR1cm5lZCBmcm9tIHNlcnZlci5gLCBNU0dfTEVWRUxfRVJST1IpXG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0luZm9SZXNwb25zZSAoeyBob3N0cywgZGVwbG95bWVudCwgdXNlcnMsIHBlcm1pc3Npb25zIH0pIHtcbiAgY29uc3QgeyBoZWFkbGluZSwgdGFyZ2V0IH0gPSBvdXRwdXRTdHlsZXNcblxuICBjb25zdCBpdGVtID0gY2hhbGsuYmx1ZVxuICBjb25zdCBncmFudGVkID0gY2hhbGsuZ3JlZW5cbiAgY29uc3QgZGVuaWVkID0gY2hhbGsucmVkXG5cbiAgY29uc3QgaW5kZW50ID0gKHN0cikgPT4gcmF3KGAgICAgJHtzdHJ9YClcbiAgY29uc3QgY29sID0gKGxlZnQsIHJpZ2h0LCB3aWR0aCA9IDI1KSA9PiBpbmRlbnQoYCR7cGFkKGxlZnQsIHdpZHRoKX0ke3JpZ2h0fWApXG4gIGNvbnN0IHRpdGxlID0gc3RyID0+IHtcbiAgICBocigpXG4gICAgaW5kZW50KGhlYWRsaW5lKHN0ci50b1VwcGVyQ2FzZSgpKSlcbiAgICBocigpXG4gIH1cblxuICBpZiAodXNlcnMpIHtcbiAgICB0aXRsZSgnVXNlcnMnKVxuICAgIHVzZXJzLmZvckVhY2godSA9PiBjb2woaXRlbSh1KSkpXG4gIH1cblxuICB0aXRsZSgnUGVybWlzc2lvbnMnKVxuICBPYmplY3Qua2V5cyhwZXJtaXNzaW9ucykuZm9yRWFjaChwID0+IHtcbiAgICBjb2woaXRlbShwKSwgcGVybWlzc2lvbnNbcF0gPyBncmFudGVkKCdncmFudGVkJykgOiBkZW5pZWQoJ2RlbmllZCcpKVxuICB9KVxuXG4gIHRpdGxlKCdIb3N0cycpXG4gIE9iamVjdC5rZXlzKGhvc3RzKS5mb3JFYWNoKGhvc3RJZCA9PiB7XG4gICAgY29uc3QgaG9zdCA9IGhvc3RzW2hvc3RJZF1cbiAgICBjb25zdCBpc0dyb3VwID0gQXJyYXkuaXNBcnJheShob3N0KVxuICAgIGNvbnN0IGlkT3V0cHV0ID0gKGlzR3JvdXAgPyAnZ3JvdXA6ICcgOiAnJykgKyBpdGVtKGhvc3RJZClcblxuICAgIGNvbChpZE91dHB1dCwgaXNHcm91cCA/IGhvc3Quam9pbignLCAnKSA6IGhvc3QpXG4gIH0pXG5cbiAgdGl0bGUoJ0RlcGxveW1lbnQnKVxuICBPYmplY3Qua2V5cyhkZXBsb3ltZW50KS5mb3JFYWNoKGFwcElkID0+IHtcbiAgICBjb25zdCBwZXJtID0gZGVwbG95bWVudFthcHBJZF1cblxuICAgIGNvbChpdGVtKGFwcElkKSwgQXJyYXkuaXNBcnJheShwZXJtKVxuICAgICAgPyBwZXJtLm1hcCgocCkgPT4gdGFyZ2V0KHApKS5qb2luKCcsICcpXG4gICAgICA6IChwZXJtID8gZ3JhbnRlZCgnYWxsIHRhcmdldHMnKSA6IGRlbmllZCgnZGVuaWVkJykpXG4gICAgKVxuICB9KVxufVxuIl19