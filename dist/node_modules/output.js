'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outputStyles = undefined;

var _outputStyles;

exports.default = output;
exports.outputTitle = outputTitle;
exports.processResponse = processResponse;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _stripAnsi = require('strip-ansi');

var _stripAnsi2 = _interopRequireDefault(_stripAnsi);

var _handoutConstants = require('handout-constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var outputStyles = exports.outputStyles = (_outputStyles = {
  headline: _chalk2.default.bold.yellow,
  url: _chalk2.default.yellow,
  target: _chalk2.default.cyan,
  error: _chalk2.default.bold.red,
  username: _chalk2.default.yellow,
  app: _chalk2.default.yellow,
  usage: _chalk2.default.bold.yellow,
  cliArg: _chalk2.default.cyan
}, _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_ERROR, _chalk2.default.bold.red), _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_INFO, _chalk2.default.bold.grey), _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_OK, _chalk2.default.bold.green), _defineProperty(_outputStyles, _handoutConstants.MSG_LEVEL_DEBUG, _chalk2.default.bgYellow), _outputStyles);

// Utility stuff
var raw = function raw(msg) {
  return output(msg, _handoutConstants.MSG_LEVEL_RAW);
};
var newline = function newline() {
  return raw('');
};
var hr = function hr() {
  return raw(_chalk2.default.grey(new Array(80).join('-')));
};

function pad(str) {
  var max = arguments.length <= 1 || arguments[1] === undefined ? 15 : arguments[1];
  var char = arguments.length <= 2 || arguments[2] === undefined ? ' ' : arguments[2];

  var len = (0, _stripAnsi2.default)(str).length;

  return len < max ? str + new Array(max - len + 1).join(char) : str;
}

function output(message) {
  var level = arguments.length <= 1 || arguments[1] === undefined ? _handoutConstants.MSG_LEVEL_INFO : arguments[1];
  var fromRemote = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

  var prepend = '';

  if (level !== _handoutConstants.MSG_LEVEL_RAW) {
    prepend += '[' + (fromRemote ? 'server' : 'local') + ':' + outputStyles[level](level) + ']';

    console.log(pad(prepend) + ' ' + message);
  } else {
    console.log(message);
  }
}

function outputTitle(_ref) {
  var version = _ref.version;
  // All of package.json passed in, using only version for now
  newline();
  hr();
  raw(outputStyles.headline('handout'));
  raw(outputStyles.headline('tailored apps') + ' backend deployment tool v' + version);
  hr();
  newline();
}

/**
 * Processes raw data and generates output for server responses that require additional processing (i.e. those with MSG_LEVEL_PROCESS).
 *
 * @param wrapperObj object
 */
function processResponse(_ref2) {
  var category = _ref2.category;
  var data = _ref2.data;

  // We only implement CATEGORY_INFO for now, can use a switch or a function map later
  if (category === _handoutConstants.CATEGORY_INFO) {
    processInfoResponse(data);
  } else {
    output('Incorrect output processing category "' + category + '" returned from server.', _handoutConstants.MSG_LEVEL_ERROR);
  }
}

function processInfoResponse(_ref3) {
  var hosts = _ref3.hosts;
  var deployment = _ref3.deployment;
  var users = _ref3.users;
  var permissions = _ref3.permissions;
  var headline = outputStyles.headline;
  var target = outputStyles.target;

  var item = _chalk2.default.blue;
  var granted = _chalk2.default.green;
  var denied = _chalk2.default.red;

  var indent = function indent(str) {
    return raw('    ' + str);
  };
  var col = function col(left, right) {
    var width = arguments.length <= 2 || arguments[2] === undefined ? 25 : arguments[2];
    return indent('' + pad(left, width) + right);
  };
  var title = function title(str) {
    hr();
    indent(headline(str.toUpperCase()));
    hr();
  };

  if (users) {
    title('Users');
    users.forEach(function (u) {
      return col(item(u));
    });
  }

  title('Permissions');
  Object.keys(permissions).forEach(function (p) {
    col(item(p), permissions[p] ? granted('granted') : denied('denied'));
  });

  title('Hosts');
  Object.keys(hosts).forEach(function (hostId) {
    var host = hosts[hostId];
    var isGroup = Array.isArray(host);
    var idOutput = (isGroup ? 'group: ' : '') + item(hostId);

    col(idOutput, isGroup ? host.join(', ') : host);
  });

  title('Deployment');
  Object.keys(deployment).forEach(function (appId) {
    var perm = deployment[appId];

    col(item(appId), Array.isArray(perm) ? perm.map(function (p) {
      return target(p);
    }).join(', ') : perm ? granted('all targets') : denied('denied'));
  });
}
//# sourceMappingURL=data:application/json;base64,