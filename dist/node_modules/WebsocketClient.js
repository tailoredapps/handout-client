'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _expandHomeDir = require('expand-home-dir');

var _expandHomeDir2 = _interopRequireDefault(_expandHomeDir);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _ursa = require('ursa');

var _ursa2 = _interopRequireDefault(_ursa);

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _output = require('output');

var _output2 = _interopRequireDefault(_output);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebsocketClient = function () {
  function WebsocketClient(opts) {
    _classCallCheck(this, WebsocketClient);

    this.opts = opts;
  }

  _createClass(WebsocketClient, [{
    key: 'connect',
    value: function connect() {
      var _this = this;

      return new _bluebird2.default(function (resolve, reject) {
        var url = _this.opts.url;

        _this.socket = new _ws2.default(url);
        _this.socket.on('open', function () {
          return resolve(_this.socket);
        });

        _this.socket.on('message', function (data) {
          try {
            var _JSON$parse = JSON.parse(data);

            var level = _JSON$parse.level;
            var message = _JSON$parse.message;
            var error = _JSON$parse.error;

            (0, _output2.default)(message, error ? _output.LEVEL_ERROR : level, true);
          } catch (e) {
            (0, _output2.default)('Failed to parse server response. Something weird might be happening. Error message: ' + e.message, _output.LEVEL_ERROR);
            (0, _output2.default)('  Raw server response: ' + data);
          }
        });

        _this.socket.on('close', function (code, message) {
          if (code > 1000) {
            (0, _output2.default)('Deployment failed with code ' + _output.outputStyles.error(code) + '.', _output.LEVEL_ERROR);
          } else {
            (0, _output2.default)('Deployment completed, closing connection to ' + _output.outputStyles.url(url) + '.', _output.LEVEL_OK);
          }

          if (message) {
            (0, _output2.default)('  Socket close message: ' + message);
          }

          // if (code > 1000) {
          //    process.exit(1)
          // }
        });

        _this.socket.on('error', function (err) {
          return reject(err);
        });
      });
    }
  }, {
    key: 'sendCommand',
    value: function sendCommand(_ref) {
      var command = _ref.command;
      var keyfile = _ref.keyfile;
      var payload = _ref.payload;
      var debug = _ref.debug;
      var username = this.opts.username;

      (0, _output2.default)(this.getInfoMessage(command, payload));

      var cryptData = this.getEncryptedCommand(keyfile, { command: command, payload: payload });

      this.socket.send(JSON.stringify({ username: username, debug: debug, cryptData: cryptData }));
    }
  }, {
    key: 'getEncryptedCommand',
    value: function getEncryptedCommand(keyfile, commandSpec) {
      var algorithm = 'aes-256-ctr';
      var outputEncoding = 'base64';
      var privKey = _ursa2.default.createPrivateKey(_fs2.default.readFileSync((0, _expandHomeDir2.default)(keyfile), { encoding: 'utf8' }));
      var secret = _crypto2.default.randomBytes(32).toString('hex');
      var cipher = _crypto2.default.createCipher(algorithm, secret);

      return {
        algorithm: algorithm,
        outputEncoding: outputEncoding,
        secret: privKey.privateEncrypt(secret),
        message: cipher.update(JSON.stringify(commandSpec), 'utf8', outputEncoding) + cipher.final(outputEncoding)
      };
    }
  }, {
    key: 'getInfoMessage',
    value: function getInfoMessage(command, payload) {
      var username = this.opts.username;

      switch (command) {
        case 'deploy':
          var app = payload.app;
          var targets = payload.targets;

          return 'Sending request to deploy ' + _output.outputStyles.app(app) + ' as user ' + _output.outputStyles.username(username) + ' to targets: ' + targets.map(function (t) {
            return _output.outputStyles.target(t);
          }).join(', ') + '.';

        case 'user':
          var action = payload.action;
          var accountname = payload.accountname;

          var targetAccount = _output.outputStyles.target(accountname);

          var msg = new Map([['create', 'to create user ' + targetAccount], ['add-pubkey', 'add public key to account ' + targetAccount], ['remove-pubkey', 'remove public key from account ' + targetAccount], ['remove', 'remove account ' + targetAccount]]);

          return 'Sending request to ' + msg.get(action) + '.';
      }
    }
  }]);

  return WebsocketClient;
}();

exports.default = WebsocketClient;
//# sourceMappingURL=data:application/json;base64,