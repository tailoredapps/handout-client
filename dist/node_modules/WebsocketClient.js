'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _expandHomeDir = require('expand-home-dir');

var _expandHomeDir2 = _interopRequireDefault(_expandHomeDir);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _ursa = require('ursa');

var _ursa2 = _interopRequireDefault(_ursa);

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _output = require('output');

var _output2 = _interopRequireDefault(_output);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebsocketClient = function () {
  function WebsocketClient(opts) {
    _classCallCheck(this, WebsocketClient);

    this.opts = opts;
  }

  _createClass(WebsocketClient, [{
    key: 'connect',
    value: regeneratorRuntime.mark(function connect() {
      var _this = this;

      return regeneratorRuntime.wrap(function connect$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt('return', new _bluebird2.default(function (resolve, reject) {
                var url = _this.opts.url;

                _this.socket = new _ws2.default(url);
                _this.socket.on('open', function () {
                  return resolve(_this.socket);
                });

                _this.socket.on('message', function (data) {
                  try {
                    var _JSON$parse = JSON.parse(data);

                    var level = _JSON$parse.level;
                    var message = _JSON$parse.message;
                    var error = _JSON$parse.error;

                    (0, _output2.default)(message, error ? _output.LEVEL_ERROR : level, true);
                  } catch (e) {
                    (0, _output2.default)('Failed to parse server response. Something weird might be happening. Error message: ' + e.message, _output.LEVEL_ERROR);
                    (0, _output2.default)('  Raw server response: ' + data);
                  }
                });

                _this.socket.on('close', function (code, message) {
                  if (code > 1000) {
                    (0, _output2.default)('Deployment failed with code ' + _output.outputStyles.error(code) + '.', _output.LEVEL_ERROR);
                  } else {
                    (0, _output2.default)('Deployment completed, closing connection to ' + _output.outputStyles.url(url) + '.', _output.LEVEL_OK);
                  }

                  if (message) {
                    (0, _output2.default)('  Socket close message: ' + message);
                  }

                  // if (code > 1000) {
                  //    process.exit(1)
                  // }
                });

                _this.socket.on('error', function (err) {
                  return reject(err);
                });
              }));

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, connect, this);
    })
  }, {
    key: 'sendCommand',
    value: regeneratorRuntime.mark(function sendCommand(_ref) {
      var command = _ref.command;
      var keyfile = _ref.keyfile;
      var payload = _ref.payload;
      var username, privKey, cryptStr;
      return regeneratorRuntime.wrap(function sendCommand$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              username = this.opts.username;

              (0, _output2.default)(this.getInfoMessage(command, payload));

              privKey = _ursa2.default.createPrivateKey(_fs2.default.readFileSync((0, _expandHomeDir2.default)(keyfile), { encoding: 'utf8' }));
              cryptStr = privKey.privateEncrypt(JSON.stringify({ command: command, payload: payload }));

              this.socket.send(JSON.stringify({ username: username, cryptStr: cryptStr }));

            case 5:
            case 'end':
              return _context2.stop();
          }
        }
      }, sendCommand, this);
    })
  }, {
    key: 'getInfoMessage',
    value: function getInfoMessage(command, payload) {
      var username = this.opts.username;

      switch (command) {
        case 'deploy':
          var app = payload.app;
          var targets = payload.targets;

          return 'Sending request to deploy ' + _output.outputStyles.app(app) + ' as user ' + _output.outputStyles.username(username) + ' to targets: ' + targets.map(function (t) {
            return _output.outputStyles.target(t);
          }).join(', ') + '.';
      }
    }
  }]);

  return WebsocketClient;
}();

exports.default = WebsocketClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvV2Vic29ja2V0Q2xpZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFVTTtBQUNKLFdBREksZUFDSixDQUFhLElBQWIsRUFBbUI7MEJBRGYsaUJBQ2U7O0FBQ2pCLFNBQUssSUFBTCxHQUFZLElBQVosQ0FEaUI7R0FBbkI7O2VBREk7Ozs7Ozs7OzsrQ0FNSyx1QkFBWSxVQUFDLE9BQUQsRUFBVSxNQUFWLEVBQXFCO29CQUMvQixNQUFPLE1BQUssSUFBTCxDQUFQLElBRCtCOztBQUd0QyxzQkFBSyxNQUFMLEdBQWMsaUJBQWMsR0FBZCxDQUFkLENBSHNDO0FBSXRDLHNCQUFLLE1BQUwsQ0FBWSxFQUFaLENBQWUsTUFBZixFQUF1Qjt5QkFBTSxRQUFRLE1BQUssTUFBTDtpQkFBZCxDQUF2QixDQUpzQzs7QUFNdEMsc0JBQUssTUFBTCxDQUFZLEVBQVosQ0FBZSxTQUFmLEVBQTBCLFVBQUMsSUFBRCxFQUFVO0FBQ2xDLHNCQUFJO3NDQUM4QixLQUFLLEtBQUwsQ0FBVyxJQUFYLEVBRDlCOzt3QkFDSywwQkFETDt3QkFDWSw4QkFEWjt3QkFDcUIsMEJBRHJCOztBQUdGLDBDQUFPLE9BQVAsRUFBZ0IsZ0JBbEJWLFdBa0JVLEdBQXNCLEtBQXRCLEVBQTZCLElBQTdDLEVBSEU7bUJBQUosQ0FJRSxPQUFPLENBQVAsRUFBVTtBQUNWLG1JQUE4RixFQUFFLE9BQUYsVUFwQnhGLFdBb0JOLEVBRFU7QUFFVixzRUFBaUMsSUFBakMsRUFGVTttQkFBVjtpQkFMc0IsQ0FBMUIsQ0FOc0M7O0FBaUJ0QyxzQkFBSyxNQUFMLENBQVksRUFBWixDQUFlLE9BQWYsRUFBd0IsVUFBQyxJQUFELEVBQU8sT0FBUCxFQUFtQjtBQUN6QyxzQkFBSSxPQUFPLElBQVAsRUFBYTtBQUNmLDJFQUFzQyxRQTNCVCxZQTJCUyxDQUFhLEtBQWIsQ0FBbUIsSUFBbkIsT0FBdEMsVUEzQk0sV0EyQk4sRUFEZTttQkFBakIsTUFFTztBQUNMLDJGQUFzRCxRQTdCekIsWUE2QnlCLENBQWEsR0FBYixDQUFpQixHQUFqQixPQUF0RCxVQTdCbUIsUUE2Qm5CLEVBREs7bUJBRlA7O0FBTUEsc0JBQUksT0FBSixFQUFhO0FBQ1gsdUVBQWtDLE9BQWxDLEVBRFc7bUJBQWI7Ozs7O0FBUHlDLGlCQUFuQixDQUF4QixDQWpCc0M7O0FBaUN0QyxzQkFBSyxNQUFMLENBQVksRUFBWixDQUFlLE9BQWYsRUFBd0I7eUJBQU8sT0FBTyxHQUFQO2lCQUFQLENBQXhCLENBakNzQztlQUFyQjs7Ozs7Ozs7Ozs7O1VBcUNMO1VBQVM7VUFBUztVQUN6QixVQUlELFNBQ0E7Ozs7O0FBTEMseUJBQVksS0FBSyxJQUFMLENBQVo7O0FBRVAsb0NBQU8sS0FBSyxjQUFMLENBQW9CLE9BQXBCLEVBQTZCLE9BQTdCLENBQVA7O0FBRU0sd0JBQVUsZUFBSyxnQkFBTCxDQUFzQixhQUFHLFlBQUgsQ0FBZ0IsNkJBQWMsT0FBZCxDQUFoQixFQUF3QyxFQUFFLFVBQVUsTUFBVixFQUExQyxDQUF0QjtBQUNWLHlCQUFXLFFBQVEsY0FBUixDQUF1QixLQUFLLFNBQUwsQ0FBZSxFQUFFLGdCQUFGLEVBQVcsZ0JBQVgsRUFBZixDQUF2Qjs7QUFFakIsbUJBQUssTUFBTCxDQUFZLElBQVosQ0FBaUIsS0FBSyxTQUFMLENBQWUsRUFBRSxrQkFBRixFQUFZLGtCQUFaLEVBQWYsQ0FBakI7Ozs7Ozs7Ozs7O21DQUdjLFNBQVMsU0FBUztVQUN6QixXQUFZLEtBQUssSUFBTCxDQUFaLFNBRHlCOztBQUdoQyxjQUFRLE9BQVI7QUFDRSxhQUFLLFFBQUw7Y0FDVSxNQUFpQixRQUFqQixJQURWO2NBQ2UsVUFBWSxRQUFaLFFBRGY7O0FBRUUsZ0RBQW9DLFFBOURMLFlBOERLLENBQWEsR0FBYixDQUFpQixHQUFqQixrQkFBaUMsUUE5RHRDLFlBOERzQyxDQUFhLFFBQWIsQ0FBc0IsUUFBdEIsc0JBQStDLFFBQVEsR0FBUixDQUFZO21CQUFLLFFBOUR0RyxZQThEc0csQ0FBYSxNQUFiLENBQW9CLENBQXBCO1dBQUwsQ0FBWixDQUF5QyxJQUF6QyxDQUE4QyxJQUE5QyxPQUFwSCxDQUZGO0FBREYsT0FIZ0M7Ozs7U0F0RDlCOzs7a0JBaUVTIiwiZmlsZSI6IldlYnNvY2tldENsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgZXhwYW5kSG9tZURpciBmcm9tICdleHBhbmQtaG9tZS1kaXInXG5pbXBvcnQgZnMgZnJvbSAnZnMnXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCdcbmltcG9ydCB1cnNhIGZyb20gJ3Vyc2EnXG5pbXBvcnQgV2Vic29ja2V0IGZyb20gJ3dzJ1xuXG5pbXBvcnQgb3V0cHV0LCB7TEVWRUxfRVJST1IsIExFVkVMX09LLCBvdXRwdXRTdHlsZXN9IGZyb20gJ291dHB1dCdcblxuY2xhc3MgV2Vic29ja2V0Q2xpZW50IHtcbiAgY29uc3RydWN0b3IgKG9wdHMpIHtcbiAgICB0aGlzLm9wdHMgPSBvcHRzXG4gIH1cblxuICAqIGNvbm5lY3QgKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCB7dXJsfSA9IHRoaXMub3B0c1xuXG4gICAgICB0aGlzLnNvY2tldCA9IG5ldyBXZWJzb2NrZXQodXJsKVxuICAgICAgdGhpcy5zb2NrZXQub24oJ29wZW4nLCAoKSA9PiByZXNvbHZlKHRoaXMuc29ja2V0KSlcblxuICAgICAgdGhpcy5zb2NrZXQub24oJ21lc3NhZ2UnLCAoZGF0YSkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHtsZXZlbCwgbWVzc2FnZSwgZXJyb3J9ID0gSlNPTi5wYXJzZShkYXRhKVxuXG4gICAgICAgICAgb3V0cHV0KG1lc3NhZ2UsIGVycm9yID8gTEVWRUxfRVJST1IgOiBsZXZlbCwgdHJ1ZSlcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIG91dHB1dChgRmFpbGVkIHRvIHBhcnNlIHNlcnZlciByZXNwb25zZS4gU29tZXRoaW5nIHdlaXJkIG1pZ2h0IGJlIGhhcHBlbmluZy4gRXJyb3IgbWVzc2FnZTogJHtlLm1lc3NhZ2V9YCwgTEVWRUxfRVJST1IpXG4gICAgICAgICAgb3V0cHV0KGAgIFJhdyBzZXJ2ZXIgcmVzcG9uc2U6ICR7ZGF0YX1gKVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICB0aGlzLnNvY2tldC5vbignY2xvc2UnLCAoY29kZSwgbWVzc2FnZSkgPT4ge1xuICAgICAgICBpZiAoY29kZSA+IDEwMDApIHtcbiAgICAgICAgICBvdXRwdXQoYERlcGxveW1lbnQgZmFpbGVkIHdpdGggY29kZSAke291dHB1dFN0eWxlcy5lcnJvcihjb2RlKX0uYCwgTEVWRUxfRVJST1IpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0KGBEZXBsb3ltZW50IGNvbXBsZXRlZCwgY2xvc2luZyBjb25uZWN0aW9uIHRvICR7b3V0cHV0U3R5bGVzLnVybCh1cmwpfS5gLCBMRVZFTF9PSylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICAgICAgb3V0cHV0KGAgIFNvY2tldCBjbG9zZSBtZXNzYWdlOiAke21lc3NhZ2V9YClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIChjb2RlID4gMTAwMCkge1xuICAgICAgICAvLyAgICBwcm9jZXNzLmV4aXQoMSlcbiAgICAgICAgLy8gfVxuICAgICAgfSlcblxuICAgICAgdGhpcy5zb2NrZXQub24oJ2Vycm9yJywgZXJyID0+IHJlamVjdChlcnIpKVxuICAgIH0pXG4gIH1cblxuICAqIHNlbmRDb21tYW5kICh7Y29tbWFuZCwga2V5ZmlsZSwgcGF5bG9hZH0pIHtcbiAgICBjb25zdCB7dXNlcm5hbWV9ID0gdGhpcy5vcHRzXG5cbiAgICBvdXRwdXQodGhpcy5nZXRJbmZvTWVzc2FnZShjb21tYW5kLCBwYXlsb2FkKSlcblxuICAgIGNvbnN0IHByaXZLZXkgPSB1cnNhLmNyZWF0ZVByaXZhdGVLZXkoZnMucmVhZEZpbGVTeW5jKGV4cGFuZEhvbWVEaXIoa2V5ZmlsZSksIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KSlcbiAgICBjb25zdCBjcnlwdFN0ciA9IHByaXZLZXkucHJpdmF0ZUVuY3J5cHQoSlNPTi5zdHJpbmdpZnkoeyBjb21tYW5kLCBwYXlsb2FkIH0pKVxuXG4gICAgdGhpcy5zb2NrZXQuc2VuZChKU09OLnN0cmluZ2lmeSh7IHVzZXJuYW1lLCBjcnlwdFN0ciB9KSlcbiAgfVxuXG4gIGdldEluZm9NZXNzYWdlIChjb21tYW5kLCBwYXlsb2FkKSB7XG4gICAgY29uc3Qge3VzZXJuYW1lfSA9IHRoaXMub3B0c1xuXG4gICAgc3dpdGNoIChjb21tYW5kKSB7XG4gICAgICBjYXNlICdkZXBsb3knOlxuICAgICAgICBjb25zdCB7IGFwcCwgdGFyZ2V0cyB9ID0gcGF5bG9hZFxuICAgICAgICByZXR1cm4gYFNlbmRpbmcgcmVxdWVzdCB0byBkZXBsb3kgJHtvdXRwdXRTdHlsZXMuYXBwKGFwcCl9IGFzIHVzZXIgJHtvdXRwdXRTdHlsZXMudXNlcm5hbWUodXNlcm5hbWUpfSB0byB0YXJnZXRzOiAke3RhcmdldHMubWFwKHQgPT4gb3V0cHV0U3R5bGVzLnRhcmdldCh0KSkuam9pbignLCAnKX0uYFxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBXZWJzb2NrZXRDbGllbnRcbiJdfQ==