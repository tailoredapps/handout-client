"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _expandHomeDir = require('expand-home-dir');

var _expandHomeDir2 = _interopRequireDefault(_expandHomeDir);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _util = require('util');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _ursa = require('ursa');

var _ursa2 = _interopRequireDefault(_ursa);

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _output = require('output');

var _output2 = _interopRequireDefault(_output);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebsocketClient = function () {
    function WebsocketClient(opts) {
        _classCallCheck(this, WebsocketClient);

        this.opts = opts;
    }

    _createClass(WebsocketClient, [{
        key: 'connect',
        value: regeneratorRuntime.mark(function connect() {
            var _this = this;

            return regeneratorRuntime.wrap(function connect$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            return _context.abrupt('return', new _bluebird2.default(function (resolve, reject) {
                                var url = _this.opts.url;

                                _this.socket = new _ws2.default(url);
                                _this.socket.on('open', function () {
                                    return resolve(_this.socket);
                                });

                                _this.socket.on('message', function (data) {
                                    try {
                                        var _JSON$parse = JSON.parse(data);

                                        var level = _JSON$parse.level;
                                        var message = _JSON$parse.message;
                                        var error = _JSON$parse.error;

                                        (0, _output2.default)(message, error ? _output.LEVEL_ERROR : level, true);
                                    } catch (e) {
                                        (0, _output2.default)('Failed to parse server response. Something weird might be happening. Error message: ' + e.message, _output.LEVEL_ERROR);
                                        (0, _output2.default)('  Raw server response: ' + data);
                                    }
                                });

                                _this.socket.on('close', function (code, message) {
                                    if (code > 1000) {
                                        (0, _output2.default)('Deployment failed with code ' + _output.outputStyles.error(code) + '.', _output.LEVEL_ERROR);
                                    } else {
                                        (0, _output2.default)('Deployment completed, closing connection to ' + _output.outputStyles.url(url) + '.', _output.LEVEL_OK);
                                    }

                                    if (message) {
                                        (0, _output2.default)('  Socket close message: ' + message);
                                    }

                                    //if (code > 1000) {
                                    //    process.exit(1)
                                    //}
                                });

                                _this.socket.on('error', function (err) {
                                    return reject(err);
                                });
                            }));

                        case 1:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, connect, this);
        })
    }, {
        key: 'sendCommand',
        value: regeneratorRuntime.mark(function sendCommand(opts) {
            var username, keyfile, cmd, privKey, cryptStr;
            return regeneratorRuntime.wrap(function sendCommand$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            username = this.opts.username;
                            keyfile = opts.keyfile;
                            cmd = _objectWithoutProperties(opts, ['keyfile']);

                            (0, _output2.default)('Sending request to deploy ' + _output.outputStyles.app(cmd.app) + ' as user ' + _output.outputStyles.username(username) + ' to targets: ' + cmd.targets.map(function (t) {
                                return _output.outputStyles.target(t);
                            }).join(', ') + '.');

                            privKey = _ursa2.default.createPrivateKey(_fs2.default.readFileSync((0, _expandHomeDir2.default)(keyfile), { encoding: 'utf8' }));
                            cryptStr = privKey.privateEncrypt(JSON.stringify(cmd));

                            this.socket.send(JSON.stringify({ username: username, cryptStr: cryptStr }));

                        case 7:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, sendCommand, this);
        })
    }]);

    return WebsocketClient;
}();

exports.default = WebsocketClient;