'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getCommands;

var _output = require('output');

var _handoutConstants = require('handout-constants');

var cliArg = _output.outputStyles.cliArg;
function getCommands(defaults) {
  var globalOptions = {
    'username': {
      alias: 'u',
      default: defaults.username || process.env.USER,
      describe: 'Username to use when connecting to deployment server'
    },
    'keyfile': {
      alias: 'k',
      default: defaults.keyfile,
      describe: 'Path to private key'
    },
    'server': {
      alias: 's',
      default: defaults.server,
      describe: 'Full server URL'
    },
    'debug': {
      type: 'boolean',
      default: defaults.debug || false,
      describe: 'Debug mode (enables -vvvv for playbooks, among other things)'
    }
  };

  var accountname = {
    alias: 'n',
    demand: true,
    describe: 'Account name'
  };

  var app = {
    alias: 'a',
    demand: true,
    describe: 'App identifier (e.g. deepsea, passerby, ...)'
  };

  var targets = {
    alias: 't',
    demand: true,
    array: true,
    describe: 'Space separated list of deployment targets (e.g. "--targets callisto titan")'
  };

  var commands = [{
    command: 'deploy',
    desc: 'deploy an application',
    usageStr: 'deploy -a ' + cliArg('appIdentifier') + ' -t ' + cliArg('target') + '[ ' + cliArg('target') + ' ...]',
    examples: [{ cli: 'deploy -a deepsea -t callisto', desc: 'Deploy app "deepsea" to target "callisto"' }, { cli: 'deploy -a passerby -t all -u some_user -k ~/.ssh/id_rsa.someuser --check', desc: 'Perform a mock-deployment of "passerby" to all available targets, connecting as user "some_user", using private key file "~/.ssh/id_rsa.someuser".' }],
    options: {
      app: app,
      targets: targets,
      'check': {
        alias: 'c',
        type: 'boolean',
        default: defaults.check,
        describe: "Perform check, don't change anything"
      },
      'no-pull': {
        alias: 'N',
        type: 'boolean',
        default: defaults.noPull || false,
        describe: 'Do not perform "git pull" on playbook repository before deployment'
      }
    }
  }, {
    command: 'user',
    desc: 'manage user accounts',
    usageStr: 'user -a action -n accountname -p /path/to/id_rsa.pub',
    examples: [{ cli: 'user -a create -n foo -p ~/.ssh/id_rsa.pub', desc: 'Creates an account named "foo", adding the pubkey located at ~/.ssh/id_rsa.pub to the list of accepted pubkeys.' }, { cli: 'user -a add-pubkey -n foo -p ~/.ssh/id_rsa.secondary.pub', desc: 'Adds the key located at ~/.ssh/id_rsa.secondary.pub to the list of accepted pubkeys for the user account "foo".' }, { cli: 'user -a remove-pubkey -n foo -p ~/.ssh/id_rsa.secondary.pub', desc: 'Removes the key located at ~/.ssh/id_rsa.secondary.pub from the list of accepted pubkeys for the user account "foo".' }, { cli: 'user -d remove -n foo', desc: 'Removes the user account "foo" and all associated pubkeys from the server.' }],
    options: {
      accountname: accountname,
      'action': {
        alias: 'a',
        demand: true,
        choices: ['create', 'add-pubkey', 'remove-pubkey', 'remove'],
        describe: 'Action to take'
      },
      'pubkey': {
        alias: 'p',
        describe: 'Path to public key file (required unless removing a user).'
      }
    }
  }, {
    command: 'user-list',
    desc: 'list user accounts',
    usageStr: 'user-list'
  }, {
    command: 'permission',
    desc: 'manage permissions',
    usageStr: 'permission -a appIdentifier -p permission -n username -t targets',
    examples: [{ cli: 'permission -n admin -a all -t all -p grant', desc: 'grant permission to deploy all apps on all targets to user admin' }],
    options: {
      accountname: accountname,
      'category': {
        alias: 'c',
        demand: true,
        choices: [_handoutConstants.PERMISSION_CATEGORY_DEPLOY, _handoutConstants.PERMISSION_CATEGORY_PERMISSION_MANAGEMENT, _handoutConstants.PERMISSION_CATEGORY_USER_LIST, _handoutConstants.PERMISSION_CATEGORY_USER_MANAGEMENT],
        describe: 'Permission category'
      },
      'app': Object.assign({}, app, { demand: false }),
      'targets': Object.assign({}, targets, { demand: false }),
      'permission': {
        alias: 'p',
        demand: true,
        choices: [_handoutConstants.PERMISSION_GRANT, _handoutConstants.PERMISSION_DENY],
        describe: 'grant or deny permission to deploy specified app to selected targets'
      }
    }
  }, {
    command: 'info',
    desc: 'Shows information about available apps, targets and permissions'
  }];

  return {
    globalOptions: globalOptions,
    commands: commands
  };
}
//# sourceMappingURL=data:application/json;base64,