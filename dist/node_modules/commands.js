'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getCommands;

var _output = require('output');

var cliArg = _output.outputStyles.cliArg;
function getCommands(defaults) {
  var globalOptions = {
    'username': {
      alias: 'u',
      default: defaults.username || process.env.USER,
      describe: 'Username to use when connecting to deployment server'
    },
    'keyfile': {
      alias: 'k',
      default: defaults.keyfile,
      describe: 'Path to private key'
    },
    'server': {
      alias: 's',
      default: defaults.server,
      describe: 'Full server URL'
    },
    'debug': {
      type: 'boolean',
      default: defaults.debug || false,
      describe: 'Debug mode (enables -vvvv for playbooks, among other things)'
    }
  };

  var accountname = {
    alias: 'n',
    demand: true,
    describe: 'Account name'
  };

  var app = {
    alias: 'a',
    demand: true,
    describe: 'App identifier (e.g. deepsea, passerby, ...)'
  };

  var targets = {
    alias: 't',
    demand: true,
    array: true,
    describe: 'Space separated list of deployment targets (e.g. "--targets callisto titan")'
  };

  var commands = [{
    command: 'deploy',
    desc: 'deploy an application',
    usageStr: 'deploy -a ' + cliArg('appIdentifier') + ' -t ' + cliArg('target') + '[ ' + cliArg('target') + ' ...]',
    examples: [{ cli: 'deploy -a deepsea -t callisto', desc: 'Deploy app "deepsea" to target "callisto"' }, { cli: 'deploy -a passerby -t all -u some_user -k ~/.ssh/id_rsa.someuser --check', desc: 'Perform a mock-deployment of "passerby" to all available targets, connecting as user "some_user", using private key file "~/.ssh/id_rsa.someuser".' }],
    options: {
      app: app,
      targets: targets,
      'check': {
        alias: 'c',
        type: 'boolean',
        default: defaults.check,
        describe: "Perform check, don't change anything"
      },
      'no-pull': {
        alias: 'N',
        type: 'boolean',
        default: defaults.noPull || false,
        describe: 'Do not perform "git pull" on playbook repository before deployment'
      }
    }
  }, {
    command: 'user-add',
    desc: 'add user account',
    usageStr: 'user-add -n accountname -p /path/to/id_rsa.pub',
    options: {
      accountname: accountname,
      'pubkey': {
        alias: 'p',
        demand: true,
        describe: 'Path to public key file'
      }
    }
  }, {
    command: 'user-remove',
    desc: 'remove user account',
    usageStr: 'user-remove -n accountname',
    options: {
      accountname: accountname
    }
  }, {
    command: 'user-list',
    desc: 'list user accounts'
  }, {
    command: 'permission',
    desc: 'manage permissions',
    usageStr: 'permission -a appIdentifier -p permission -n username -t targets',
    examples: [{ cli: 'permission -n admin -a all -t all -p grant', desc: 'grant permission to deploy all apps on all targets to user admin' }],
    options: {
      accountname: accountname,
      app: app,
      targets: targets,
      'permission': {
        alias: 'p',
        demand: true,
        choices: ['grant', 'deny'],
        describe: 'grant or deny permission to deploy specified app to selected targets'
      }
    }
  }, {
    command: 'info',
    desc: 'Shows information about available apps, targets and permissions'
  }];

  return {
    globalOptions: globalOptions,
    commands: commands
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvY29tbWFuZHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O2tCQU13Qjs7OztJQUZoQixpQkFGQyxhQUVEO0FBRU8sU0FBUyxXQUFULENBQXNCLFFBQXRCLEVBQWdDO0FBQzdDLE1BQU0sZ0JBQWdCO0FBQ3BCLGdCQUFZO0FBQ1YsYUFBTyxHQUFQO0FBQ0EsZUFBUyxTQUFTLFFBQVQsSUFBcUIsUUFBUSxHQUFSLENBQVksSUFBWjtBQUM5QixnQkFBVSxzREFBVjtLQUhGO0FBS0EsZUFBVztBQUNULGFBQU8sR0FBUDtBQUNBLGVBQVMsU0FBUyxPQUFUO0FBQ1QsZ0JBQVUscUJBQVY7S0FIRjtBQUtBLGNBQVU7QUFDUixhQUFPLEdBQVA7QUFDQSxlQUFTLFNBQVMsTUFBVDtBQUNULGdCQUFVLGlCQUFWO0tBSEY7QUFLQSxhQUFTO0FBQ1AsWUFBTSxTQUFOO0FBQ0EsZUFBUyxTQUFTLEtBQVQsSUFBa0IsS0FBbEI7QUFDVCxnQkFBVSw4REFBVjtLQUhGO0dBaEJJLENBRHVDOztBQXdCN0MsTUFBTSxjQUFjO0FBQ2xCLFdBQU8sR0FBUDtBQUNBLFlBQVEsSUFBUjtBQUNBLGNBQVUsY0FBVjtHQUhJLENBeEJ1Qzs7QUE4QjdDLE1BQU0sTUFBTTtBQUNWLFdBQU8sR0FBUDtBQUNBLFlBQVEsSUFBUjtBQUNBLGNBQVUsOENBQVY7R0FISSxDQTlCdUM7O0FBb0M3QyxNQUFNLFVBQVU7QUFDZCxXQUFPLEdBQVA7QUFDQSxZQUFRLElBQVI7QUFDQSxXQUFPLElBQVA7QUFDQSxjQUFVLDhFQUFWO0dBSkksQ0FwQ3VDOztBQTJDN0MsTUFBTSxXQUFXLENBQ2Y7QUFDRSxhQUFTLFFBQVQ7QUFDQSxVQUFNLHVCQUFOO0FBQ0EsNkJBQXVCLE9BQU8sZUFBUCxhQUE4QixPQUFPLFFBQVAsV0FBcUIsT0FBTyxRQUFQLFdBQTFFO0FBQ0EsY0FBVSxDQUNSLEVBQUUsS0FBSywrQkFBTCxFQUFzQyxNQUFNLDJDQUFOLEVBRGhDLEVBRVIsRUFBRSxLQUFLLDBFQUFMLEVBQWlGLE1BQU0sb0pBQU4sRUFGM0UsQ0FBVjtBQUlBLGFBQVM7QUFDUCxjQURPO0FBRVAsc0JBRk87QUFHUCxlQUFTO0FBQ1AsZUFBTyxHQUFQO0FBQ0EsY0FBTSxTQUFOO0FBQ0EsaUJBQVMsU0FBUyxLQUFUO0FBQ1Qsa0JBQVUsc0NBQVY7T0FKRjtBQU1BLGlCQUFXO0FBQ1QsZUFBTyxHQUFQO0FBQ0EsY0FBTSxTQUFOO0FBQ0EsaUJBQVMsU0FBUyxNQUFULElBQW1CLEtBQW5CO0FBQ1Qsa0JBQVUsb0VBQVY7T0FKRjtLQVRGO0dBVGEsRUEwQmY7QUFDRSxhQUFTLFVBQVQ7QUFDQSxVQUFNLGtCQUFOO0FBQ0EsY0FBVSxnREFBVjtBQUNBLGFBQVM7QUFDUCw4QkFETztBQUVQLGdCQUFVO0FBQ1IsZUFBTyxHQUFQO0FBQ0EsZ0JBQVEsSUFBUjtBQUNBLGtCQUFVLHlCQUFWO09BSEY7S0FGRjtHQTlCYSxFQXVDZjtBQUNFLGFBQVMsYUFBVDtBQUNBLFVBQU0scUJBQU47QUFDQSxjQUFVLDRCQUFWO0FBQ0EsYUFBUztBQUNQLDhCQURPO0tBQVQ7R0EzQ2EsRUErQ2Y7QUFDRSxhQUFTLFdBQVQ7QUFDQSxVQUFNLG9CQUFOO0dBakRhLEVBbURmO0FBQ0UsYUFBUyxZQUFUO0FBQ0EsVUFBTSxvQkFBTjtBQUNBLGNBQVUsa0VBQVY7QUFDQSxjQUFVLENBQ1IsRUFBRSxLQUFLLDRDQUFMLEVBQW1ELE1BQU0sa0VBQU4sRUFEN0MsQ0FBVjtBQUdBLGFBQVM7QUFDUCw4QkFETztBQUVQLGNBRk87QUFHUCxzQkFITztBQUlQLG9CQUFjO0FBQ1osZUFBTyxHQUFQO0FBQ0EsZ0JBQVEsSUFBUjtBQUNBLGlCQUFTLENBQUMsT0FBRCxFQUFVLE1BQVYsQ0FBVDtBQUNBLGtCQUFVLHNFQUFWO09BSkY7S0FKRjtHQTFEYSxFQXNFZjtBQUNFLGFBQVMsTUFBVDtBQUNBLFVBQU0saUVBQU47R0F4RWEsQ0FBWCxDQTNDdUM7O0FBdUg3QyxTQUFPO0FBQ0wsZ0NBREs7QUFFTCxzQkFGSztHQUFQLENBdkg2QztDQUFoQyIsImZpbGUiOiJjb21tYW5kcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgeyBvdXRwdXRTdHlsZXMgfSBmcm9tICdvdXRwdXQnXG5cbmNvbnN0IHsgY2xpQXJnIH0gPSBvdXRwdXRTdHlsZXNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tbWFuZHMgKGRlZmF1bHRzKSB7XG4gIGNvbnN0IGdsb2JhbE9wdGlvbnMgPSB7XG4gICAgJ3VzZXJuYW1lJzoge1xuICAgICAgYWxpYXM6ICd1JyxcbiAgICAgIGRlZmF1bHQ6IGRlZmF1bHRzLnVzZXJuYW1lIHx8IHByb2Nlc3MuZW52LlVTRVIsXG4gICAgICBkZXNjcmliZTogJ1VzZXJuYW1lIHRvIHVzZSB3aGVuIGNvbm5lY3RpbmcgdG8gZGVwbG95bWVudCBzZXJ2ZXInXG4gICAgfSxcbiAgICAna2V5ZmlsZSc6IHtcbiAgICAgIGFsaWFzOiAnaycsXG4gICAgICBkZWZhdWx0OiBkZWZhdWx0cy5rZXlmaWxlLFxuICAgICAgZGVzY3JpYmU6ICdQYXRoIHRvIHByaXZhdGUga2V5J1xuICAgIH0sXG4gICAgJ3NlcnZlcic6IHtcbiAgICAgIGFsaWFzOiAncycsXG4gICAgICBkZWZhdWx0OiBkZWZhdWx0cy5zZXJ2ZXIsXG4gICAgICBkZXNjcmliZTogJ0Z1bGwgc2VydmVyIFVSTCdcbiAgICB9LFxuICAgICdkZWJ1Zyc6IHtcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGRlZmF1bHQ6IGRlZmF1bHRzLmRlYnVnIHx8IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdEZWJ1ZyBtb2RlIChlbmFibGVzIC12dnZ2IGZvciBwbGF5Ym9va3MsIGFtb25nIG90aGVyIHRoaW5ncyknXG4gICAgfVxuICB9XG5cbiAgY29uc3QgYWNjb3VudG5hbWUgPSB7XG4gICAgYWxpYXM6ICduJyxcbiAgICBkZW1hbmQ6IHRydWUsXG4gICAgZGVzY3JpYmU6ICdBY2NvdW50IG5hbWUnXG4gIH1cblxuICBjb25zdCBhcHAgPSB7XG4gICAgYWxpYXM6ICdhJyxcbiAgICBkZW1hbmQ6IHRydWUsXG4gICAgZGVzY3JpYmU6ICdBcHAgaWRlbnRpZmllciAoZS5nLiBkZWVwc2VhLCBwYXNzZXJieSwgLi4uKSdcbiAgfVxuXG4gIGNvbnN0IHRhcmdldHMgPSB7XG4gICAgYWxpYXM6ICd0JyxcbiAgICBkZW1hbmQ6IHRydWUsXG4gICAgYXJyYXk6IHRydWUsXG4gICAgZGVzY3JpYmU6ICdTcGFjZSBzZXBhcmF0ZWQgbGlzdCBvZiBkZXBsb3ltZW50IHRhcmdldHMgKGUuZy4gXCItLXRhcmdldHMgY2FsbGlzdG8gdGl0YW5cIiknXG4gIH1cblxuICBjb25zdCBjb21tYW5kcyA9IFtcbiAgICB7XG4gICAgICBjb21tYW5kOiAnZGVwbG95JyxcbiAgICAgIGRlc2M6ICdkZXBsb3kgYW4gYXBwbGljYXRpb24nLFxuICAgICAgdXNhZ2VTdHI6IGBkZXBsb3kgLWEgJHtjbGlBcmcoJ2FwcElkZW50aWZpZXInKX0gLXQgJHtjbGlBcmcoJ3RhcmdldCcpfVsgJHtjbGlBcmcoJ3RhcmdldCcpfSAuLi5dYCxcbiAgICAgIGV4YW1wbGVzOiBbXG4gICAgICAgIHsgY2xpOiAnZGVwbG95IC1hIGRlZXBzZWEgLXQgY2FsbGlzdG8nLCBkZXNjOiAnRGVwbG95IGFwcCBcImRlZXBzZWFcIiB0byB0YXJnZXQgXCJjYWxsaXN0b1wiJyB9LFxuICAgICAgICB7IGNsaTogJ2RlcGxveSAtYSBwYXNzZXJieSAtdCBhbGwgLXUgc29tZV91c2VyIC1rIH4vLnNzaC9pZF9yc2Euc29tZXVzZXIgLS1jaGVjaycsIGRlc2M6ICdQZXJmb3JtIGEgbW9jay1kZXBsb3ltZW50IG9mIFwicGFzc2VyYnlcIiB0byBhbGwgYXZhaWxhYmxlIHRhcmdldHMsIGNvbm5lY3RpbmcgYXMgdXNlciBcInNvbWVfdXNlclwiLCB1c2luZyBwcml2YXRlIGtleSBmaWxlIFwifi8uc3NoL2lkX3JzYS5zb21ldXNlclwiLicgfVxuICAgICAgXSxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYXBwLFxuICAgICAgICB0YXJnZXRzLFxuICAgICAgICAnY2hlY2snOiB7XG4gICAgICAgICAgYWxpYXM6ICdjJyxcbiAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgZGVmYXVsdDogZGVmYXVsdHMuY2hlY2ssXG4gICAgICAgICAgZGVzY3JpYmU6IFwiUGVyZm9ybSBjaGVjaywgZG9uJ3QgY2hhbmdlIGFueXRoaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgJ25vLXB1bGwnOiB7XG4gICAgICAgICAgYWxpYXM6ICdOJyxcbiAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgZGVmYXVsdDogZGVmYXVsdHMubm9QdWxsIHx8IGZhbHNlLFxuICAgICAgICAgIGRlc2NyaWJlOiAnRG8gbm90IHBlcmZvcm0gXCJnaXQgcHVsbFwiIG9uIHBsYXlib29rIHJlcG9zaXRvcnkgYmVmb3JlIGRlcGxveW1lbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIGNvbW1hbmQ6ICd1c2VyLWFkZCcsXG4gICAgICBkZXNjOiAnYWRkIHVzZXIgYWNjb3VudCcsXG4gICAgICB1c2FnZVN0cjogJ3VzZXItYWRkIC1uIGFjY291bnRuYW1lIC1wIC9wYXRoL3RvL2lkX3JzYS5wdWInLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhY2NvdW50bmFtZSxcbiAgICAgICAgJ3B1YmtleSc6IHtcbiAgICAgICAgICBhbGlhczogJ3AnLFxuICAgICAgICAgIGRlbWFuZDogdHJ1ZSxcbiAgICAgICAgICBkZXNjcmliZTogJ1BhdGggdG8gcHVibGljIGtleSBmaWxlJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBjb21tYW5kOiAndXNlci1yZW1vdmUnLFxuICAgICAgZGVzYzogJ3JlbW92ZSB1c2VyIGFjY291bnQnLFxuICAgICAgdXNhZ2VTdHI6ICd1c2VyLXJlbW92ZSAtbiBhY2NvdW50bmFtZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGFjY291bnRuYW1lXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBjb21tYW5kOiAndXNlci1saXN0JyxcbiAgICAgIGRlc2M6ICdsaXN0IHVzZXIgYWNjb3VudHMnXG4gICAgfSxcbiAgICB7XG4gICAgICBjb21tYW5kOiAncGVybWlzc2lvbicsXG4gICAgICBkZXNjOiAnbWFuYWdlIHBlcm1pc3Npb25zJyxcbiAgICAgIHVzYWdlU3RyOiAncGVybWlzc2lvbiAtYSBhcHBJZGVudGlmaWVyIC1wIHBlcm1pc3Npb24gLW4gdXNlcm5hbWUgLXQgdGFyZ2V0cycsXG4gICAgICBleGFtcGxlczogW1xuICAgICAgICB7IGNsaTogJ3Blcm1pc3Npb24gLW4gYWRtaW4gLWEgYWxsIC10IGFsbCAtcCBncmFudCcsIGRlc2M6ICdncmFudCBwZXJtaXNzaW9uIHRvIGRlcGxveSBhbGwgYXBwcyBvbiBhbGwgdGFyZ2V0cyB0byB1c2VyIGFkbWluJyB9XG4gICAgICBdLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhY2NvdW50bmFtZSxcbiAgICAgICAgYXBwLFxuICAgICAgICB0YXJnZXRzLFxuICAgICAgICAncGVybWlzc2lvbic6IHtcbiAgICAgICAgICBhbGlhczogJ3AnLFxuICAgICAgICAgIGRlbWFuZDogdHJ1ZSxcbiAgICAgICAgICBjaG9pY2VzOiBbJ2dyYW50JywgJ2RlbnknXSxcbiAgICAgICAgICBkZXNjcmliZTogJ2dyYW50IG9yIGRlbnkgcGVybWlzc2lvbiB0byBkZXBsb3kgc3BlY2lmaWVkIGFwcCB0byBzZWxlY3RlZCB0YXJnZXRzJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBjb21tYW5kOiAnaW5mbycsXG4gICAgICBkZXNjOiAnU2hvd3MgaW5mb3JtYXRpb24gYWJvdXQgYXZhaWxhYmxlIGFwcHMsIHRhcmdldHMgYW5kIHBlcm1pc3Npb25zJ1xuICAgIH1cbiAgXVxuXG4gIHJldHVybiB7XG4gICAgZ2xvYmFsT3B0aW9ucyxcbiAgICBjb21tYW5kc1xuICB9XG59XG4iXX0=