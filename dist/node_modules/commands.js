'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getCommands;

var _output = require('output');

var cliArg = _output.outputStyles.cliArg;
function getCommands(defaults) {
  var globalOptions = {
    'username': {
      alias: 'u',
      default: defaults.username || process.env.USER,
      describe: 'Username to use when connecting to deployment server'
    },
    'keyfile': {
      alias: 'k',
      default: defaults.keyfile,
      describe: 'Path to private key'
    },
    'server': {
      alias: 's',
      default: defaults.server,
      describe: 'Full server URL'
    }
  };

  var accountname = {
    alias: 'n',
    demand: true,
    describe: 'Account name'
  };

  var app = {
    alias: 'a',
    demand: true,
    describe: 'App identifier (e.g. deepsea, passerby, ...)'
  };

  var targets = {
    alias: 't',
    demand: true,
    array: true,
    describe: 'Space separated list of deployment targets (e.g. "--targets callisto titan")'
  };

  var commands = [{
    command: 'deploy',
    desc: 'deploy an application',
    usageStr: 'deploy -a ' + cliArg('appIdentifier') + ' -t ' + cliArg('target') + '[ ' + cliArg('target') + ' ...]',
    examples: [{ cli: 'deploy -a deepsea -t callisto', desc: 'Deploy app "deepsea" to target "callisto"' }, { cli: 'deploy -a passerby -t all -u some_user -k ~/.ssh/id_rsa.someuser --check', desc: 'Perform a mock-deployment of "passerby" to all available targets, connecting as user "some_user", using private key file "~/.ssh/id_rsa.someuser".' }],
    options: {
      app: app,
      targets: targets,
      'check': {
        alias: 'c',
        type: 'boolean',
        default: defaults.check,
        describe: "Perform check, don't change anything"
      }
    }
  }, {
    command: 'user-add',
    desc: 'add user account',
    usageStr: 'user-add -n accountname -p /path/to/id_rsa.pub',
    options: {
      accountname: accountname,
      'pubkey': {
        alias: 'p',
        demand: true,
        describe: 'Path to pulic key file'
      }
    }
  }, {
    command: 'user-remove',
    desc: 'remove user account',
    usageStr: 'user-remove -n accountname',
    options: {
      accountname: accountname
    }
  }, {
    command: 'user-list',
    desc: 'list user accounts'
  }, {
    command: 'permission',
    desc: 'manage permissions',
    usageStr: 'permission -a appIdentifier -p permission -n username -t targets',
    examples: [{ cli: 'permission -n admin -a all -t all -p grant', desc: 'grant permission to deploy all apps on all targets to user admin' }],
    options: {
      accountname: accountname,
      app: app,
      targets: targets,
      'permission': {
        alias: 'p',
        demand: true,
        choices: ['grant', 'deny'],
        describe: 'grant or deny permission to deploy specified app to selected targets'
      }
    }
  }];

  return {
    globalOptions: globalOptions,
    commands: commands
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvY29tbWFuZHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFBOzs7OztrQkFNWSxXQUFXOzs7O0lBRjNCLE1BQU0sd0JBQU4sTUFBTTtBQUVDLFNBQVMsV0FBVyxDQUFFLFFBQVEsRUFBRTtBQUM3QyxNQUFNLGFBQWEsR0FBRztBQUNwQixjQUFVLEVBQUU7QUFDVixXQUFLLEVBQUUsR0FBRztBQUNWLGFBQU8sRUFBRSxRQUFRLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSTtBQUM5QyxjQUFRLEVBQUUsc0RBQXNEO0tBQ2pFO0FBQ0QsYUFBUyxFQUFFO0FBQ1QsV0FBSyxFQUFFLEdBQUc7QUFDVixhQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU87QUFDekIsY0FBUSxFQUFFLHFCQUFxQjtLQUNoQztBQUNELFlBQVEsRUFBRTtBQUNSLFdBQUssRUFBRSxHQUFHO0FBQ1YsYUFBTyxFQUFFLFFBQVEsQ0FBQyxNQUFNO0FBQ3hCLGNBQVEsRUFBRSxpQkFBaUI7S0FDNUI7R0FDRixDQUFBOztBQUVELE1BQU0sV0FBVyxHQUFHO0FBQ2xCLFNBQUssRUFBRSxHQUFHO0FBQ1YsVUFBTSxFQUFFLElBQUk7QUFDWixZQUFRLEVBQUUsY0FBYztHQUN6QixDQUFBOztBQUVELE1BQU0sR0FBRyxHQUFHO0FBQ1YsU0FBSyxFQUFFLEdBQUc7QUFDVixVQUFNLEVBQUUsSUFBSTtBQUNaLFlBQVEsRUFBRSw4Q0FBOEM7R0FDekQsQ0FBQTs7QUFFRCxNQUFNLE9BQU8sR0FBRztBQUNkLFNBQUssRUFBRSxHQUFHO0FBQ1YsVUFBTSxFQUFFLElBQUk7QUFDWixTQUFLLEVBQUUsSUFBSTtBQUNYLFlBQVEsRUFBRSw4RUFBOEU7R0FDekYsQ0FBQTs7QUFFRCxNQUFNLFFBQVEsR0FBRyxDQUNmO0FBQ0UsV0FBTyxFQUFFLFFBQVE7QUFDakIsUUFBSSxFQUFFLHVCQUF1QjtBQUM3QixZQUFRLGlCQUFlLE1BQU0sQ0FBQyxlQUFlLENBQUMsWUFBTyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQUssTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFPO0FBQ2pHLFlBQVEsRUFBRSxDQUNSLEVBQUUsR0FBRyxFQUFFLCtCQUErQixFQUFFLElBQUksRUFBRSwyQ0FBMkMsRUFBRSxFQUMzRixFQUFFLEdBQUcsRUFBRSwwRUFBMEUsRUFBRSxJQUFJLEVBQUUsb0pBQW9KLEVBQUUsQ0FDaFA7QUFDRCxXQUFPLEVBQUU7QUFDUCxTQUFHLEVBQUgsR0FBRztBQUNILGFBQU8sRUFBUCxPQUFPO0FBQ1AsYUFBTyxFQUFFO0FBQ1AsYUFBSyxFQUFFLEdBQUc7QUFDVixZQUFJLEVBQUUsU0FBUztBQUNmLGVBQU8sRUFBRSxRQUFRLENBQUMsS0FBSztBQUN2QixnQkFBUSxFQUFFLHNDQUFzQztPQUNqRDtLQUNGO0dBQ0YsRUFDRDtBQUNFLFdBQU8sRUFBRSxVQUFVO0FBQ25CLFFBQUksRUFBRSxrQkFBa0I7QUFDeEIsWUFBUSxFQUFFLGdEQUFnRDtBQUMxRCxXQUFPLEVBQUU7QUFDUCxpQkFBVyxFQUFYLFdBQVc7QUFDWCxjQUFRLEVBQUU7QUFDUixhQUFLLEVBQUUsR0FBRztBQUNWLGNBQU0sRUFBRSxJQUFJO0FBQ1osZ0JBQVEsRUFBRSx3QkFBd0I7T0FDbkM7S0FDRjtHQUNGLEVBQ0Q7QUFDRSxXQUFPLEVBQUUsYUFBYTtBQUN0QixRQUFJLEVBQUUscUJBQXFCO0FBQzNCLFlBQVEsRUFBRSw0QkFBNEI7QUFDdEMsV0FBTyxFQUFFO0FBQ1AsaUJBQVcsRUFBWCxXQUFXO0tBQ1o7R0FDRixFQUNEO0FBQ0UsV0FBTyxFQUFFLFdBQVc7QUFDcEIsUUFBSSxFQUFFLG9CQUFvQjtHQUMzQixFQUNEO0FBQ0UsV0FBTyxFQUFFLFlBQVk7QUFDckIsUUFBSSxFQUFFLG9CQUFvQjtBQUMxQixZQUFRLEVBQUUsa0VBQWtFO0FBQzVFLFlBQVEsRUFBRSxDQUNSLEVBQUUsR0FBRyxFQUFFLDRDQUE0QyxFQUFFLElBQUksRUFBRSxrRUFBa0UsRUFBRSxDQUNoSTtBQUNELFdBQU8sRUFBRTtBQUNQLGlCQUFXLEVBQVgsV0FBVztBQUNYLFNBQUcsRUFBSCxHQUFHO0FBQ0gsYUFBTyxFQUFQLE9BQU87QUFDUCxrQkFBWSxFQUFFO0FBQ1osYUFBSyxFQUFFLEdBQUc7QUFDVixjQUFNLEVBQUUsSUFBSTtBQUNaLGVBQU8sRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7QUFDMUIsZ0JBQVEsRUFBRSxzRUFBc0U7T0FDakY7S0FDRjtHQUNGLENBQ0YsQ0FBQTs7QUFFRCxTQUFPO0FBQ0wsaUJBQWEsRUFBYixhQUFhO0FBQ2IsWUFBUSxFQUFSLFFBQVE7R0FDVCxDQUFBO0NBQ0YiLCJmaWxlIjoiY29tbWFuZHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuaW1wb3J0IHsgb3V0cHV0U3R5bGVzIH0gZnJvbSAnb3V0cHV0J1xuXG5jb25zdCB7IGNsaUFyZyB9ID0gb3V0cHV0U3R5bGVzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbW1hbmRzIChkZWZhdWx0cykge1xuICBjb25zdCBnbG9iYWxPcHRpb25zID0ge1xuICAgICd1c2VybmFtZSc6IHtcbiAgICAgIGFsaWFzOiAndScsXG4gICAgICBkZWZhdWx0OiBkZWZhdWx0cy51c2VybmFtZSB8fCBwcm9jZXNzLmVudi5VU0VSLFxuICAgICAgZGVzY3JpYmU6ICdVc2VybmFtZSB0byB1c2Ugd2hlbiBjb25uZWN0aW5nIHRvIGRlcGxveW1lbnQgc2VydmVyJ1xuICAgIH0sXG4gICAgJ2tleWZpbGUnOiB7XG4gICAgICBhbGlhczogJ2snLFxuICAgICAgZGVmYXVsdDogZGVmYXVsdHMua2V5ZmlsZSxcbiAgICAgIGRlc2NyaWJlOiAnUGF0aCB0byBwcml2YXRlIGtleSdcbiAgICB9LFxuICAgICdzZXJ2ZXInOiB7XG4gICAgICBhbGlhczogJ3MnLFxuICAgICAgZGVmYXVsdDogZGVmYXVsdHMuc2VydmVyLFxuICAgICAgZGVzY3JpYmU6ICdGdWxsIHNlcnZlciBVUkwnXG4gICAgfVxuICB9XG5cbiAgY29uc3QgYWNjb3VudG5hbWUgPSB7XG4gICAgYWxpYXM6ICduJyxcbiAgICBkZW1hbmQ6IHRydWUsXG4gICAgZGVzY3JpYmU6ICdBY2NvdW50IG5hbWUnXG4gIH1cblxuICBjb25zdCBhcHAgPSB7XG4gICAgYWxpYXM6ICdhJyxcbiAgICBkZW1hbmQ6IHRydWUsXG4gICAgZGVzY3JpYmU6ICdBcHAgaWRlbnRpZmllciAoZS5nLiBkZWVwc2VhLCBwYXNzZXJieSwgLi4uKSdcbiAgfVxuXG4gIGNvbnN0IHRhcmdldHMgPSB7XG4gICAgYWxpYXM6ICd0JyxcbiAgICBkZW1hbmQ6IHRydWUsXG4gICAgYXJyYXk6IHRydWUsXG4gICAgZGVzY3JpYmU6ICdTcGFjZSBzZXBhcmF0ZWQgbGlzdCBvZiBkZXBsb3ltZW50IHRhcmdldHMgKGUuZy4gXCItLXRhcmdldHMgY2FsbGlzdG8gdGl0YW5cIiknXG4gIH1cblxuICBjb25zdCBjb21tYW5kcyA9IFtcbiAgICB7XG4gICAgICBjb21tYW5kOiAnZGVwbG95JyxcbiAgICAgIGRlc2M6ICdkZXBsb3kgYW4gYXBwbGljYXRpb24nLFxuICAgICAgdXNhZ2VTdHI6IGBkZXBsb3kgLWEgJHtjbGlBcmcoJ2FwcElkZW50aWZpZXInKX0gLXQgJHtjbGlBcmcoJ3RhcmdldCcpfVsgJHtjbGlBcmcoJ3RhcmdldCcpfSAuLi5dYCxcbiAgICAgIGV4YW1wbGVzOiBbXG4gICAgICAgIHsgY2xpOiAnZGVwbG95IC1hIGRlZXBzZWEgLXQgY2FsbGlzdG8nLCBkZXNjOiAnRGVwbG95IGFwcCBcImRlZXBzZWFcIiB0byB0YXJnZXQgXCJjYWxsaXN0b1wiJyB9LFxuICAgICAgICB7IGNsaTogJ2RlcGxveSAtYSBwYXNzZXJieSAtdCBhbGwgLXUgc29tZV91c2VyIC1rIH4vLnNzaC9pZF9yc2Euc29tZXVzZXIgLS1jaGVjaycsIGRlc2M6ICdQZXJmb3JtIGEgbW9jay1kZXBsb3ltZW50IG9mIFwicGFzc2VyYnlcIiB0byBhbGwgYXZhaWxhYmxlIHRhcmdldHMsIGNvbm5lY3RpbmcgYXMgdXNlciBcInNvbWVfdXNlclwiLCB1c2luZyBwcml2YXRlIGtleSBmaWxlIFwifi8uc3NoL2lkX3JzYS5zb21ldXNlclwiLicgfVxuICAgICAgXSxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYXBwLFxuICAgICAgICB0YXJnZXRzLFxuICAgICAgICAnY2hlY2snOiB7XG4gICAgICAgICAgYWxpYXM6ICdjJyxcbiAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgZGVmYXVsdDogZGVmYXVsdHMuY2hlY2ssXG4gICAgICAgICAgZGVzY3JpYmU6IFwiUGVyZm9ybSBjaGVjaywgZG9uJ3QgY2hhbmdlIGFueXRoaW5nXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ3VzZXItYWRkJyxcbiAgICAgIGRlc2M6ICdhZGQgdXNlciBhY2NvdW50JyxcbiAgICAgIHVzYWdlU3RyOiAndXNlci1hZGQgLW4gYWNjb3VudG5hbWUgLXAgL3BhdGgvdG8vaWRfcnNhLnB1YicsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGFjY291bnRuYW1lLFxuICAgICAgICAncHVia2V5Jzoge1xuICAgICAgICAgIGFsaWFzOiAncCcsXG4gICAgICAgICAgZGVtYW5kOiB0cnVlLFxuICAgICAgICAgIGRlc2NyaWJlOiAnUGF0aCB0byBwdWxpYyBrZXkgZmlsZSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ3VzZXItcmVtb3ZlJyxcbiAgICAgIGRlc2M6ICdyZW1vdmUgdXNlciBhY2NvdW50JyxcbiAgICAgIHVzYWdlU3RyOiAndXNlci1yZW1vdmUgLW4gYWNjb3VudG5hbWUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhY2NvdW50bmFtZVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ3VzZXItbGlzdCcsXG4gICAgICBkZXNjOiAnbGlzdCB1c2VyIGFjY291bnRzJ1xuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ3Blcm1pc3Npb24nLFxuICAgICAgZGVzYzogJ21hbmFnZSBwZXJtaXNzaW9ucycsXG4gICAgICB1c2FnZVN0cjogJ3Blcm1pc3Npb24gLWEgYXBwSWRlbnRpZmllciAtcCBwZXJtaXNzaW9uIC1uIHVzZXJuYW1lIC10IHRhcmdldHMnLFxuICAgICAgZXhhbXBsZXM6IFtcbiAgICAgICAgeyBjbGk6ICdwZXJtaXNzaW9uIC1uIGFkbWluIC1hIGFsbCAtdCBhbGwgLXAgZ3JhbnQnLCBkZXNjOiAnZ3JhbnQgcGVybWlzc2lvbiB0byBkZXBsb3kgYWxsIGFwcHMgb24gYWxsIHRhcmdldHMgdG8gdXNlciBhZG1pbicgfVxuICAgICAgXSxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYWNjb3VudG5hbWUsXG4gICAgICAgIGFwcCxcbiAgICAgICAgdGFyZ2V0cyxcbiAgICAgICAgJ3Blcm1pc3Npb24nOiB7XG4gICAgICAgICAgYWxpYXM6ICdwJyxcbiAgICAgICAgICBkZW1hbmQ6IHRydWUsXG4gICAgICAgICAgY2hvaWNlczogWydncmFudCcsICdkZW55J10sXG4gICAgICAgICAgZGVzY3JpYmU6ICdncmFudCBvciBkZW55IHBlcm1pc3Npb24gdG8gZGVwbG95IHNwZWNpZmllZCBhcHAgdG8gc2VsZWN0ZWQgdGFyZ2V0cydcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgXVxuXG4gIHJldHVybiB7XG4gICAgZ2xvYmFsT3B0aW9ucyxcbiAgICBjb21tYW5kc1xuICB9XG59XG4iXX0=