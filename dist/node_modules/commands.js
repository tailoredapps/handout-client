'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getCommands;

var _output = require('output');

var cliArg = _output.outputStyles.cliArg;
function getCommands(defaults) {
  var globalOptions = {
    'username': {
      alias: 'u',
      default: defaults.username || process.env.USER,
      describe: 'Username to use when connecting to deployment server'
    },
    'keyfile': {
      alias: 'k',
      default: defaults.keyfile,
      describe: 'Path to private key'
    },
    'server': {
      alias: 's',
      default: defaults.server,
      describe: 'Full server URL'
    },
    'debug': {
      type: 'boolean',
      default: defaults.debug || false,
      describe: 'Debug mode (enables -vvvv for playbooks, among other things)'
    }
  };

  var accountname = {
    alias: 'n',
    demand: true,
    describe: 'Account name'
  };

  var app = {
    alias: 'a',
    demand: true,
    describe: 'App identifier (e.g. deepsea, passerby, ...)'
  };

  var targets = {
    alias: 't',
    demand: true,
    array: true,
    describe: 'Space separated list of deployment targets (e.g. "--targets callisto titan")'
  };

  var commands = [{
    command: 'deploy',
    desc: 'deploy an application',
    usageStr: 'deploy -a ' + cliArg('appIdentifier') + ' -t ' + cliArg('target') + '[ ' + cliArg('target') + ' ...]',
    examples: [{ cli: 'deploy -a deepsea -t callisto', desc: 'Deploy app "deepsea" to target "callisto"' }, { cli: 'deploy -a passerby -t all -u some_user -k ~/.ssh/id_rsa.someuser --check', desc: 'Perform a mock-deployment of "passerby" to all available targets, connecting as user "some_user", using private key file "~/.ssh/id_rsa.someuser".' }],
    options: {
      app: app,
      targets: targets,
      'check': {
        alias: 'c',
        type: 'boolean',
        default: defaults.check,
        describe: "Perform check, don't change anything"
      },
      'no-pull': {
        alias: 'N',
        type: 'boolean',
        default: defaults.noPull || false,
        describe: 'Do not perform "git pull" on playbook repository before deployment'
      }
    }
  }, {
    command: 'user-add',
    desc: 'add user account',
    usageStr: 'user-add -n accountname -p /path/to/id_rsa.pub',
    options: {
      accountname: accountname,
      'pubkey': {
        alias: 'p',
        demand: true,
        describe: 'Path to pulic key file'
      }
    }
  }, {
    command: 'user-remove',
    desc: 'remove user account',
    usageStr: 'user-remove -n accountname',
    options: {
      accountname: accountname
    }
  }, {
    command: 'user-list',
    desc: 'list user accounts'
  }, {
    command: 'permission',
    desc: 'manage permissions',
    usageStr: 'permission -a appIdentifier -p permission -n username -t targets',
    examples: [{ cli: 'permission -n admin -a all -t all -p grant', desc: 'grant permission to deploy all apps on all targets to user admin' }],
    options: {
      accountname: accountname,
      app: app,
      targets: targets,
      'permission': {
        alias: 'p',
        demand: true,
        choices: ['grant', 'deny'],
        describe: 'grant or deny permission to deploy specified app to selected targets'
      }
    }
  }];

  return {
    globalOptions: globalOptions,
    commands: commands
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvY29tbWFuZHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFBOzs7OztrQkFNWSxXQUFXOzs7O0lBRjNCLE1BQU0sd0JBQU4sTUFBTTtBQUVDLFNBQVMsV0FBVyxDQUFFLFFBQVEsRUFBRTtBQUM3QyxNQUFNLGFBQWEsR0FBRztBQUNwQixjQUFVLEVBQUU7QUFDVixXQUFLLEVBQUUsR0FBRztBQUNWLGFBQU8sRUFBRSxRQUFRLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSTtBQUM5QyxjQUFRLEVBQUUsc0RBQXNEO0tBQ2pFO0FBQ0QsYUFBUyxFQUFFO0FBQ1QsV0FBSyxFQUFFLEdBQUc7QUFDVixhQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU87QUFDekIsY0FBUSxFQUFFLHFCQUFxQjtLQUNoQztBQUNELFlBQVEsRUFBRTtBQUNSLFdBQUssRUFBRSxHQUFHO0FBQ1YsYUFBTyxFQUFFLFFBQVEsQ0FBQyxNQUFNO0FBQ3hCLGNBQVEsRUFBRSxpQkFBaUI7S0FDNUI7QUFDRCxXQUFPLEVBQUU7QUFDUCxVQUFJLEVBQUUsU0FBUztBQUNmLGFBQU8sRUFBRSxRQUFRLENBQUMsS0FBSyxJQUFJLEtBQUs7QUFDaEMsY0FBUSxFQUFFLDhEQUE4RDtLQUN6RTtHQUNGLENBQUE7O0FBRUQsTUFBTSxXQUFXLEdBQUc7QUFDbEIsU0FBSyxFQUFFLEdBQUc7QUFDVixVQUFNLEVBQUUsSUFBSTtBQUNaLFlBQVEsRUFBRSxjQUFjO0dBQ3pCLENBQUE7O0FBRUQsTUFBTSxHQUFHLEdBQUc7QUFDVixTQUFLLEVBQUUsR0FBRztBQUNWLFVBQU0sRUFBRSxJQUFJO0FBQ1osWUFBUSxFQUFFLDhDQUE4QztHQUN6RCxDQUFBOztBQUVELE1BQU0sT0FBTyxHQUFHO0FBQ2QsU0FBSyxFQUFFLEdBQUc7QUFDVixVQUFNLEVBQUUsSUFBSTtBQUNaLFNBQUssRUFBRSxJQUFJO0FBQ1gsWUFBUSxFQUFFLDhFQUE4RTtHQUN6RixDQUFBOztBQUVELE1BQU0sUUFBUSxHQUFHLENBQ2Y7QUFDRSxXQUFPLEVBQUUsUUFBUTtBQUNqQixRQUFJLEVBQUUsdUJBQXVCO0FBQzdCLFlBQVEsaUJBQWUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxZQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBSyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQU87QUFDakcsWUFBUSxFQUFFLENBQ1IsRUFBRSxHQUFHLEVBQUUsK0JBQStCLEVBQUUsSUFBSSxFQUFFLDJDQUEyQyxFQUFFLEVBQzNGLEVBQUUsR0FBRyxFQUFFLDBFQUEwRSxFQUFFLElBQUksRUFBRSxvSkFBb0osRUFBRSxDQUNoUDtBQUNELFdBQU8sRUFBRTtBQUNQLFNBQUcsRUFBSCxHQUFHO0FBQ0gsYUFBTyxFQUFQLE9BQU87QUFDUCxhQUFPLEVBQUU7QUFDUCxhQUFLLEVBQUUsR0FBRztBQUNWLFlBQUksRUFBRSxTQUFTO0FBQ2YsZUFBTyxFQUFFLFFBQVEsQ0FBQyxLQUFLO0FBQ3ZCLGdCQUFRLEVBQUUsc0NBQXNDO09BQ2pEO0FBQ0QsZUFBUyxFQUFFO0FBQ1QsYUFBSyxFQUFFLEdBQUc7QUFDVixZQUFJLEVBQUUsU0FBUztBQUNmLGVBQU8sRUFBRSxRQUFRLENBQUMsTUFBTSxJQUFJLEtBQUs7QUFDakMsZ0JBQVEsRUFBRSxvRUFBb0U7T0FDL0U7S0FDRjtHQUNGLEVBQ0Q7QUFDRSxXQUFPLEVBQUUsVUFBVTtBQUNuQixRQUFJLEVBQUUsa0JBQWtCO0FBQ3hCLFlBQVEsRUFBRSxnREFBZ0Q7QUFDMUQsV0FBTyxFQUFFO0FBQ1AsaUJBQVcsRUFBWCxXQUFXO0FBQ1gsY0FBUSxFQUFFO0FBQ1IsYUFBSyxFQUFFLEdBQUc7QUFDVixjQUFNLEVBQUUsSUFBSTtBQUNaLGdCQUFRLEVBQUUsd0JBQXdCO09BQ25DO0tBQ0Y7R0FDRixFQUNEO0FBQ0UsV0FBTyxFQUFFLGFBQWE7QUFDdEIsUUFBSSxFQUFFLHFCQUFxQjtBQUMzQixZQUFRLEVBQUUsNEJBQTRCO0FBQ3RDLFdBQU8sRUFBRTtBQUNQLGlCQUFXLEVBQVgsV0FBVztLQUNaO0dBQ0YsRUFDRDtBQUNFLFdBQU8sRUFBRSxXQUFXO0FBQ3BCLFFBQUksRUFBRSxvQkFBb0I7R0FDM0IsRUFDRDtBQUNFLFdBQU8sRUFBRSxZQUFZO0FBQ3JCLFFBQUksRUFBRSxvQkFBb0I7QUFDMUIsWUFBUSxFQUFFLGtFQUFrRTtBQUM1RSxZQUFRLEVBQUUsQ0FDUixFQUFFLEdBQUcsRUFBRSw0Q0FBNEMsRUFBRSxJQUFJLEVBQUUsa0VBQWtFLEVBQUUsQ0FDaEk7QUFDRCxXQUFPLEVBQUU7QUFDUCxpQkFBVyxFQUFYLFdBQVc7QUFDWCxTQUFHLEVBQUgsR0FBRztBQUNILGFBQU8sRUFBUCxPQUFPO0FBQ1Asa0JBQVksRUFBRTtBQUNaLGFBQUssRUFBRSxHQUFHO0FBQ1YsY0FBTSxFQUFFLElBQUk7QUFDWixlQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO0FBQzFCLGdCQUFRLEVBQUUsc0VBQXNFO09BQ2pGO0tBQ0Y7R0FDRixDQUNGLENBQUE7O0FBRUQsU0FBTztBQUNMLGlCQUFhLEVBQWIsYUFBYTtBQUNiLFlBQVEsRUFBUixRQUFRO0dBQ1QsQ0FBQTtDQUNGIiwiZmlsZSI6ImNvbW1hbmRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCB7IG91dHB1dFN0eWxlcyB9IGZyb20gJ291dHB1dCdcblxuY29uc3QgeyBjbGlBcmcgfSA9IG91dHB1dFN0eWxlc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21tYW5kcyAoZGVmYXVsdHMpIHtcbiAgY29uc3QgZ2xvYmFsT3B0aW9ucyA9IHtcbiAgICAndXNlcm5hbWUnOiB7XG4gICAgICBhbGlhczogJ3UnLFxuICAgICAgZGVmYXVsdDogZGVmYXVsdHMudXNlcm5hbWUgfHwgcHJvY2Vzcy5lbnYuVVNFUixcbiAgICAgIGRlc2NyaWJlOiAnVXNlcm5hbWUgdG8gdXNlIHdoZW4gY29ubmVjdGluZyB0byBkZXBsb3ltZW50IHNlcnZlcidcbiAgICB9LFxuICAgICdrZXlmaWxlJzoge1xuICAgICAgYWxpYXM6ICdrJyxcbiAgICAgIGRlZmF1bHQ6IGRlZmF1bHRzLmtleWZpbGUsXG4gICAgICBkZXNjcmliZTogJ1BhdGggdG8gcHJpdmF0ZSBrZXknXG4gICAgfSxcbiAgICAnc2VydmVyJzoge1xuICAgICAgYWxpYXM6ICdzJyxcbiAgICAgIGRlZmF1bHQ6IGRlZmF1bHRzLnNlcnZlcixcbiAgICAgIGRlc2NyaWJlOiAnRnVsbCBzZXJ2ZXIgVVJMJ1xuICAgIH0sXG4gICAgJ2RlYnVnJzoge1xuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgZGVmYXVsdDogZGVmYXVsdHMuZGVidWcgfHwgZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ0RlYnVnIG1vZGUgKGVuYWJsZXMgLXZ2dnYgZm9yIHBsYXlib29rcywgYW1vbmcgb3RoZXIgdGhpbmdzKSdcbiAgICB9XG4gIH1cblxuICBjb25zdCBhY2NvdW50bmFtZSA9IHtcbiAgICBhbGlhczogJ24nLFxuICAgIGRlbWFuZDogdHJ1ZSxcbiAgICBkZXNjcmliZTogJ0FjY291bnQgbmFtZSdcbiAgfVxuXG4gIGNvbnN0IGFwcCA9IHtcbiAgICBhbGlhczogJ2EnLFxuICAgIGRlbWFuZDogdHJ1ZSxcbiAgICBkZXNjcmliZTogJ0FwcCBpZGVudGlmaWVyIChlLmcuIGRlZXBzZWEsIHBhc3NlcmJ5LCAuLi4pJ1xuICB9XG5cbiAgY29uc3QgdGFyZ2V0cyA9IHtcbiAgICBhbGlhczogJ3QnLFxuICAgIGRlbWFuZDogdHJ1ZSxcbiAgICBhcnJheTogdHJ1ZSxcbiAgICBkZXNjcmliZTogJ1NwYWNlIHNlcGFyYXRlZCBsaXN0IG9mIGRlcGxveW1lbnQgdGFyZ2V0cyAoZS5nLiBcIi0tdGFyZ2V0cyBjYWxsaXN0byB0aXRhblwiKSdcbiAgfVxuXG4gIGNvbnN0IGNvbW1hbmRzID0gW1xuICAgIHtcbiAgICAgIGNvbW1hbmQ6ICdkZXBsb3knLFxuICAgICAgZGVzYzogJ2RlcGxveSBhbiBhcHBsaWNhdGlvbicsXG4gICAgICB1c2FnZVN0cjogYGRlcGxveSAtYSAke2NsaUFyZygnYXBwSWRlbnRpZmllcicpfSAtdCAke2NsaUFyZygndGFyZ2V0Jyl9WyAke2NsaUFyZygndGFyZ2V0Jyl9IC4uLl1gLFxuICAgICAgZXhhbXBsZXM6IFtcbiAgICAgICAgeyBjbGk6ICdkZXBsb3kgLWEgZGVlcHNlYSAtdCBjYWxsaXN0bycsIGRlc2M6ICdEZXBsb3kgYXBwIFwiZGVlcHNlYVwiIHRvIHRhcmdldCBcImNhbGxpc3RvXCInIH0sXG4gICAgICAgIHsgY2xpOiAnZGVwbG95IC1hIHBhc3NlcmJ5IC10IGFsbCAtdSBzb21lX3VzZXIgLWsgfi8uc3NoL2lkX3JzYS5zb21ldXNlciAtLWNoZWNrJywgZGVzYzogJ1BlcmZvcm0gYSBtb2NrLWRlcGxveW1lbnQgb2YgXCJwYXNzZXJieVwiIHRvIGFsbCBhdmFpbGFibGUgdGFyZ2V0cywgY29ubmVjdGluZyBhcyB1c2VyIFwic29tZV91c2VyXCIsIHVzaW5nIHByaXZhdGUga2V5IGZpbGUgXCJ+Ly5zc2gvaWRfcnNhLnNvbWV1c2VyXCIuJyB9XG4gICAgICBdLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhcHAsXG4gICAgICAgIHRhcmdldHMsXG4gICAgICAgICdjaGVjayc6IHtcbiAgICAgICAgICBhbGlhczogJ2MnLFxuICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICBkZWZhdWx0OiBkZWZhdWx0cy5jaGVjayxcbiAgICAgICAgICBkZXNjcmliZTogXCJQZXJmb3JtIGNoZWNrLCBkb24ndCBjaGFuZ2UgYW55dGhpbmdcIlxuICAgICAgICB9LFxuICAgICAgICAnbm8tcHVsbCc6IHtcbiAgICAgICAgICBhbGlhczogJ04nLFxuICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICBkZWZhdWx0OiBkZWZhdWx0cy5ub1B1bGwgfHwgZmFsc2UsXG4gICAgICAgICAgZGVzY3JpYmU6ICdEbyBub3QgcGVyZm9ybSBcImdpdCBwdWxsXCIgb24gcGxheWJvb2sgcmVwb3NpdG9yeSBiZWZvcmUgZGVwbG95bWVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ3VzZXItYWRkJyxcbiAgICAgIGRlc2M6ICdhZGQgdXNlciBhY2NvdW50JyxcbiAgICAgIHVzYWdlU3RyOiAndXNlci1hZGQgLW4gYWNjb3VudG5hbWUgLXAgL3BhdGgvdG8vaWRfcnNhLnB1YicsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGFjY291bnRuYW1lLFxuICAgICAgICAncHVia2V5Jzoge1xuICAgICAgICAgIGFsaWFzOiAncCcsXG4gICAgICAgICAgZGVtYW5kOiB0cnVlLFxuICAgICAgICAgIGRlc2NyaWJlOiAnUGF0aCB0byBwdWxpYyBrZXkgZmlsZSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ3VzZXItcmVtb3ZlJyxcbiAgICAgIGRlc2M6ICdyZW1vdmUgdXNlciBhY2NvdW50JyxcbiAgICAgIHVzYWdlU3RyOiAndXNlci1yZW1vdmUgLW4gYWNjb3VudG5hbWUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhY2NvdW50bmFtZVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ3VzZXItbGlzdCcsXG4gICAgICBkZXNjOiAnbGlzdCB1c2VyIGFjY291bnRzJ1xuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ3Blcm1pc3Npb24nLFxuICAgICAgZGVzYzogJ21hbmFnZSBwZXJtaXNzaW9ucycsXG4gICAgICB1c2FnZVN0cjogJ3Blcm1pc3Npb24gLWEgYXBwSWRlbnRpZmllciAtcCBwZXJtaXNzaW9uIC1uIHVzZXJuYW1lIC10IHRhcmdldHMnLFxuICAgICAgZXhhbXBsZXM6IFtcbiAgICAgICAgeyBjbGk6ICdwZXJtaXNzaW9uIC1uIGFkbWluIC1hIGFsbCAtdCBhbGwgLXAgZ3JhbnQnLCBkZXNjOiAnZ3JhbnQgcGVybWlzc2lvbiB0byBkZXBsb3kgYWxsIGFwcHMgb24gYWxsIHRhcmdldHMgdG8gdXNlciBhZG1pbicgfVxuICAgICAgXSxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYWNjb3VudG5hbWUsXG4gICAgICAgIGFwcCxcbiAgICAgICAgdGFyZ2V0cyxcbiAgICAgICAgJ3Blcm1pc3Npb24nOiB7XG4gICAgICAgICAgYWxpYXM6ICdwJyxcbiAgICAgICAgICBkZW1hbmQ6IHRydWUsXG4gICAgICAgICAgY2hvaWNlczogWydncmFudCcsICdkZW55J10sXG4gICAgICAgICAgZGVzY3JpYmU6ICdncmFudCBvciBkZW55IHBlcm1pc3Npb24gdG8gZGVwbG95IHNwZWNpZmllZCBhcHAgdG8gc2VsZWN0ZWQgdGFyZ2V0cydcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgXVxuXG4gIHJldHVybiB7XG4gICAgZ2xvYmFsT3B0aW9ucyxcbiAgICBjb21tYW5kc1xuICB9XG59XG4iXX0=