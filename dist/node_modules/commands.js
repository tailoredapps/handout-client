'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getCommands;

var _output = require('output');

var cliArg = _output.outputStyles.cliArg;
function getCommands(defaults) {
  var globalOptions = {
    'username': {
      alias: 'u',
      default: defaults.username || process.env.USER,
      describe: 'Username to use when connecting to deployment server'
    },
    'keyfile': {
      alias: 'k',
      default: defaults.keyfile,
      describe: 'Path to private key'
    },
    'server': {
      alias: 's',
      default: defaults.server,
      describe: 'Full server URL'
    }
  };

  var accountname = {
    alias: 'n',
    demand: true,
    describe: 'Account name'
  };

  var app = {
    alias: 'a',
    demand: true,
    describe: 'App identifier (e.g. deepsea, passerby, ...)'
  };

  var targets = {
    alias: 't',
    demand: true,
    array: true,
    describe: 'Space separated list of deployment targets (e.g. "--targets callisto titan")'
  };

  var commands = [{
    command: 'deploy',
    desc: 'deploy an application',
    usageStr: 'deploy -a ' + cliArg('appIdentifier') + ' -t ' + cliArg('target') + '[ ' + cliArg('target') + ' ...]',
    examples: [{ cli: 'deploy -a deepsea -t callisto', desc: 'Deploy app "deepsea" to target "callisto"' }, { cli: 'deploy -a passerby -t all -u some_user -k ~/.ssh/id_rsa.someuser --check', desc: 'Perform a mock-deployment of "passerby" to all available targets, connecting as user "some_user", using private key file "~/.ssh/id_rsa.someuser".' }],
    options: {
      app: app,
      targets: targets,
      'check': {
        alias: 'c',
        type: 'boolean',
        default: defaults.check,
        describe: "Perform check, don't change anything"
      }
    }
  }, {
    command: 'user-add',
    desc: 'add user account',
    usageStr: 'user-add -n accountname -p /path/to/id_rsa.pub',
    options: {
      accountname: accountname,
      'pubkey': {
        alias: 'p',
        demand: true,
        describe: 'Path to pulic key file'
      }
    }
  }, {
    command: 'user-remove',
    desc: 'remove user account',
    usageStr: 'user-remove -n accountname',
    options: {
      accountname: accountname
    }
  }, {
    command: 'user-list',
    desc: 'list user accounts'
  }, {
    command: 'permission',
    desc: 'manage permissions',
    usageStr: 'permission -a appIdentifier -p permission -n username -t targets',
    examples: [{ cli: 'permission -n admin -a all -t all -p grant', desc: 'grant permission to deploy all apps on all targets to user admin' }],
    options: {
      accountname: accountname,
      app: app,
      targets: targets,
      'permission': {
        alias: 'p',
        demand: true,
        choices: ['grant', 'deny'],
        describe: 'grant or deny permission to deploy specified app to selected targets'
      }
    }
  }];

  return {
    globalOptions: globalOptions,
    commands: commands
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvY29tbWFuZHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O2tCQU13Qjs7OztJQUZoQixpQkFGQyxhQUVEO0FBRU8sU0FBUyxXQUFULENBQXNCLFFBQXRCLEVBQWdDO0FBQzdDLE1BQU0sZ0JBQWdCO0FBQ3BCLGdCQUFZO0FBQ1YsYUFBTyxHQUFQO0FBQ0EsZUFBUyxTQUFTLFFBQVQsSUFBcUIsUUFBUSxHQUFSLENBQVksSUFBWjtBQUM5QixnQkFBVSxzREFBVjtLQUhGO0FBS0EsZUFBVztBQUNULGFBQU8sR0FBUDtBQUNBLGVBQVMsU0FBUyxPQUFUO0FBQ1QsZ0JBQVUscUJBQVY7S0FIRjtBQUtBLGNBQVU7QUFDUixhQUFPLEdBQVA7QUFDQSxlQUFTLFNBQVMsTUFBVDtBQUNULGdCQUFVLGlCQUFWO0tBSEY7R0FYSSxDQUR1Qzs7QUFtQjdDLE1BQU0sY0FBYztBQUNsQixXQUFPLEdBQVA7QUFDQSxZQUFRLElBQVI7QUFDQSxjQUFVLGNBQVY7R0FISSxDQW5CdUM7O0FBeUI3QyxNQUFNLE1BQU07QUFDVixXQUFPLEdBQVA7QUFDQSxZQUFRLElBQVI7QUFDQSxjQUFVLDhDQUFWO0dBSEksQ0F6QnVDOztBQStCN0MsTUFBTSxVQUFVO0FBQ2QsV0FBTyxHQUFQO0FBQ0EsWUFBUSxJQUFSO0FBQ0EsV0FBTyxJQUFQO0FBQ0EsY0FBVSw4RUFBVjtHQUpJLENBL0J1Qzs7QUFzQzdDLE1BQU0sV0FBVyxDQUNmO0FBQ0UsYUFBUyxRQUFUO0FBQ0EsVUFBTSx1QkFBTjtBQUNBLDZCQUF1QixPQUFPLGVBQVAsYUFBOEIsT0FBTyxRQUFQLFdBQXFCLE9BQU8sUUFBUCxXQUExRTtBQUNBLGNBQVUsQ0FDUixFQUFFLEtBQUssK0JBQUwsRUFBc0MsTUFBTSwyQ0FBTixFQURoQyxFQUVSLEVBQUUsS0FBSywwRUFBTCxFQUFpRixNQUFNLG9KQUFOLEVBRjNFLENBQVY7QUFJQSxhQUFTO0FBQ1AsY0FETztBQUVQLHNCQUZPO0FBR1AsZUFBUztBQUNQLGVBQU8sR0FBUDtBQUNBLGNBQU0sU0FBTjtBQUNBLGlCQUFTLFNBQVMsS0FBVDtBQUNULGtCQUFVLHNDQUFWO09BSkY7S0FIRjtHQVRhLEVBb0JmO0FBQ0UsYUFBUyxVQUFUO0FBQ0EsVUFBTSxrQkFBTjtBQUNBLGNBQVUsZ0RBQVY7QUFDQSxhQUFTO0FBQ1AsOEJBRE87QUFFUCxnQkFBVTtBQUNSLGVBQU8sR0FBUDtBQUNBLGdCQUFRLElBQVI7QUFDQSxrQkFBVSx3QkFBVjtPQUhGO0tBRkY7R0F4QmEsRUFpQ2Y7QUFDRSxhQUFTLGFBQVQ7QUFDQSxVQUFNLHFCQUFOO0FBQ0EsY0FBVSw0QkFBVjtBQUNBLGFBQVM7QUFDUCw4QkFETztLQUFUO0dBckNhLEVBeUNmO0FBQ0UsYUFBUyxXQUFUO0FBQ0EsVUFBTSxvQkFBTjtHQTNDYSxFQTZDZjtBQUNFLGFBQVMsWUFBVDtBQUNBLFVBQU0sb0JBQU47QUFDQSxjQUFVLGtFQUFWO0FBQ0EsY0FBVSxDQUNSLEVBQUUsS0FBSyw0Q0FBTCxFQUFtRCxNQUFNLGtFQUFOLEVBRDdDLENBQVY7QUFHQSxhQUFTO0FBQ1AsOEJBRE87QUFFUCxjQUZPO0FBR1Asc0JBSE87QUFJUCxvQkFBYztBQUNaLGVBQU8sR0FBUDtBQUNBLGdCQUFRLElBQVI7QUFDQSxpQkFBUyxDQUFDLE9BQUQsRUFBVSxNQUFWLENBQVQ7QUFDQSxrQkFBVSxzRUFBVjtPQUpGO0tBSkY7R0FwRGEsQ0FBWCxDQXRDdUM7O0FBd0c3QyxTQUFPO0FBQ0wsZ0NBREs7QUFFTCxzQkFGSztHQUFQLENBeEc2QztDQUFoQyIsImZpbGUiOiJjb21tYW5kcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgeyBvdXRwdXRTdHlsZXMgfSBmcm9tICdvdXRwdXQnXG5cbmNvbnN0IHsgY2xpQXJnIH0gPSBvdXRwdXRTdHlsZXNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tbWFuZHMgKGRlZmF1bHRzKSB7XG4gIGNvbnN0IGdsb2JhbE9wdGlvbnMgPSB7XG4gICAgJ3VzZXJuYW1lJzoge1xuICAgICAgYWxpYXM6ICd1JyxcbiAgICAgIGRlZmF1bHQ6IGRlZmF1bHRzLnVzZXJuYW1lIHx8IHByb2Nlc3MuZW52LlVTRVIsXG4gICAgICBkZXNjcmliZTogJ1VzZXJuYW1lIHRvIHVzZSB3aGVuIGNvbm5lY3RpbmcgdG8gZGVwbG95bWVudCBzZXJ2ZXInXG4gICAgfSxcbiAgICAna2V5ZmlsZSc6IHtcbiAgICAgIGFsaWFzOiAnaycsXG4gICAgICBkZWZhdWx0OiBkZWZhdWx0cy5rZXlmaWxlLFxuICAgICAgZGVzY3JpYmU6ICdQYXRoIHRvIHByaXZhdGUga2V5J1xuICAgIH0sXG4gICAgJ3NlcnZlcic6IHtcbiAgICAgIGFsaWFzOiAncycsXG4gICAgICBkZWZhdWx0OiBkZWZhdWx0cy5zZXJ2ZXIsXG4gICAgICBkZXNjcmliZTogJ0Z1bGwgc2VydmVyIFVSTCdcbiAgICB9XG4gIH1cblxuICBjb25zdCBhY2NvdW50bmFtZSA9IHtcbiAgICBhbGlhczogJ24nLFxuICAgIGRlbWFuZDogdHJ1ZSxcbiAgICBkZXNjcmliZTogJ0FjY291bnQgbmFtZSdcbiAgfVxuXG4gIGNvbnN0IGFwcCA9IHtcbiAgICBhbGlhczogJ2EnLFxuICAgIGRlbWFuZDogdHJ1ZSxcbiAgICBkZXNjcmliZTogJ0FwcCBpZGVudGlmaWVyIChlLmcuIGRlZXBzZWEsIHBhc3NlcmJ5LCAuLi4pJ1xuICB9XG5cbiAgY29uc3QgdGFyZ2V0cyA9IHtcbiAgICBhbGlhczogJ3QnLFxuICAgIGRlbWFuZDogdHJ1ZSxcbiAgICBhcnJheTogdHJ1ZSxcbiAgICBkZXNjcmliZTogJ1NwYWNlIHNlcGFyYXRlZCBsaXN0IG9mIGRlcGxveW1lbnQgdGFyZ2V0cyAoZS5nLiBcIi0tdGFyZ2V0cyBjYWxsaXN0byB0aXRhblwiKSdcbiAgfVxuXG4gIGNvbnN0IGNvbW1hbmRzID0gW1xuICAgIHtcbiAgICAgIGNvbW1hbmQ6ICdkZXBsb3knLFxuICAgICAgZGVzYzogJ2RlcGxveSBhbiBhcHBsaWNhdGlvbicsXG4gICAgICB1c2FnZVN0cjogYGRlcGxveSAtYSAke2NsaUFyZygnYXBwSWRlbnRpZmllcicpfSAtdCAke2NsaUFyZygndGFyZ2V0Jyl9WyAke2NsaUFyZygndGFyZ2V0Jyl9IC4uLl1gLFxuICAgICAgZXhhbXBsZXM6IFtcbiAgICAgICAgeyBjbGk6ICdkZXBsb3kgLWEgZGVlcHNlYSAtdCBjYWxsaXN0bycsIGRlc2M6ICdEZXBsb3kgYXBwIFwiZGVlcHNlYVwiIHRvIHRhcmdldCBcImNhbGxpc3RvXCInIH0sXG4gICAgICAgIHsgY2xpOiAnZGVwbG95IC1hIHBhc3NlcmJ5IC10IGFsbCAtdSBzb21lX3VzZXIgLWsgfi8uc3NoL2lkX3JzYS5zb21ldXNlciAtLWNoZWNrJywgZGVzYzogJ1BlcmZvcm0gYSBtb2NrLWRlcGxveW1lbnQgb2YgXCJwYXNzZXJieVwiIHRvIGFsbCBhdmFpbGFibGUgdGFyZ2V0cywgY29ubmVjdGluZyBhcyB1c2VyIFwic29tZV91c2VyXCIsIHVzaW5nIHByaXZhdGUga2V5IGZpbGUgXCJ+Ly5zc2gvaWRfcnNhLnNvbWV1c2VyXCIuJyB9XG4gICAgICBdLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhcHAsXG4gICAgICAgIHRhcmdldHMsXG4gICAgICAgICdjaGVjayc6IHtcbiAgICAgICAgICBhbGlhczogJ2MnLFxuICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICBkZWZhdWx0OiBkZWZhdWx0cy5jaGVjayxcbiAgICAgICAgICBkZXNjcmliZTogXCJQZXJmb3JtIGNoZWNrLCBkb24ndCBjaGFuZ2UgYW55dGhpbmdcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBjb21tYW5kOiAndXNlci1hZGQnLFxuICAgICAgZGVzYzogJ2FkZCB1c2VyIGFjY291bnQnLFxuICAgICAgdXNhZ2VTdHI6ICd1c2VyLWFkZCAtbiBhY2NvdW50bmFtZSAtcCAvcGF0aC90by9pZF9yc2EucHViJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYWNjb3VudG5hbWUsXG4gICAgICAgICdwdWJrZXknOiB7XG4gICAgICAgICAgYWxpYXM6ICdwJyxcbiAgICAgICAgICBkZW1hbmQ6IHRydWUsXG4gICAgICAgICAgZGVzY3JpYmU6ICdQYXRoIHRvIHB1bGljIGtleSBmaWxlJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBjb21tYW5kOiAndXNlci1yZW1vdmUnLFxuICAgICAgZGVzYzogJ3JlbW92ZSB1c2VyIGFjY291bnQnLFxuICAgICAgdXNhZ2VTdHI6ICd1c2VyLXJlbW92ZSAtbiBhY2NvdW50bmFtZScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGFjY291bnRuYW1lXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBjb21tYW5kOiAndXNlci1saXN0JyxcbiAgICAgIGRlc2M6ICdsaXN0IHVzZXIgYWNjb3VudHMnXG4gICAgfSxcbiAgICB7XG4gICAgICBjb21tYW5kOiAncGVybWlzc2lvbicsXG4gICAgICBkZXNjOiAnbWFuYWdlIHBlcm1pc3Npb25zJyxcbiAgICAgIHVzYWdlU3RyOiAncGVybWlzc2lvbiAtYSBhcHBJZGVudGlmaWVyIC1wIHBlcm1pc3Npb24gLW4gdXNlcm5hbWUgLXQgdGFyZ2V0cycsXG4gICAgICBleGFtcGxlczogW1xuICAgICAgICB7IGNsaTogJ3Blcm1pc3Npb24gLW4gYWRtaW4gLWEgYWxsIC10IGFsbCAtcCBncmFudCcsIGRlc2M6ICdncmFudCBwZXJtaXNzaW9uIHRvIGRlcGxveSBhbGwgYXBwcyBvbiBhbGwgdGFyZ2V0cyB0byB1c2VyIGFkbWluJyB9XG4gICAgICBdLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhY2NvdW50bmFtZSxcbiAgICAgICAgYXBwLFxuICAgICAgICB0YXJnZXRzLFxuICAgICAgICAncGVybWlzc2lvbic6IHtcbiAgICAgICAgICBhbGlhczogJ3AnLFxuICAgICAgICAgIGRlbWFuZDogdHJ1ZSxcbiAgICAgICAgICBjaG9pY2VzOiBbJ2dyYW50JywgJ2RlbnknXSxcbiAgICAgICAgICBkZXNjcmliZTogJ2dyYW50IG9yIGRlbnkgcGVybWlzc2lvbiB0byBkZXBsb3kgc3BlY2lmaWVkIGFwcCB0byBzZWxlY3RlZCB0YXJnZXRzJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBdXG5cbiAgcmV0dXJuIHtcbiAgICBnbG9iYWxPcHRpb25zLFxuICAgIGNvbW1hbmRzXG4gIH1cbn1cbiJdfQ==