"use strict"

import chalk from 'chalk'
import expandHomeDir from 'expand-home-dir'
import fs from 'fs'
import {inspect} from 'util'
import Promise from 'bluebird'
import ursa from 'ursa'
import ws from 'ws'

import output, {outputStyles, LEVEL_OK, LEVEL_INFO} from 'output'

class WebsocketClient {
    constructor(opts) {
        this.opts = opts
    }

    *connect() {
        return new Promise((resolve, reject) => {
            const {url} = this.opts

            this.socket = new ws(url)
            this.socket.on('open', () => resolve(this.socket))

            this.socket.on('message', (data) => output(JSON.parse(data), true))
            this.socket.on('close', (code, message) => {
                if (code > 1000) {
                    output({
                        error: true,
                        message: `Deployment failed with code ${outputStyles.error(code)}.`
                    })
                }
                else {
                    output({
                        level: LEVEL_OK,
                        message: `Deployment completed, closing connection to ${outputStyles.url(url)}.`
                    })
                }

                //if (code > 1000) {
                //    process.exit(1)
                //}
            })

            this.socket.on('error', err => reject(err))
        })
    }

    *sendCommand(opts) {
        const {username} = this.opts
        const {keyFile, ...cmd} = opts

        output(`Sending request to deploy ${outputStyles.app(cmd.app)} as user ${outputStyles.username(username)} to targets: ${cmd.targets.map(t => outputStyles.target(t)).join(', ')}.`)

        const privKey = ursa.createPrivateKey(fs.readFileSync(expandHomeDir(keyFile), {encoding: 'utf8'}))
        const cryptStr = privKey.privateEncrypt(JSON.stringify(cmd))

        this.socket.send(JSON.stringify({username, cryptStr}))
    }
}

export default WebsocketClient