'use strict'

import expandHomeDir from 'expand-home-dir'
import fs from 'fs'
import yargonaut from 'yargonaut'
import yargs from 'yargs'

import getCommands from 'commands'
import output, { outputStyles } from 'output'

let _opts

const {usage, cliArg} = outputStyles

function registerOptions ({command, desc, usageStr, examples, options}, parentOptions) {
  yargs
    .command(command, desc, yargs => {
      yargs
        .options(Object.assign({}, options, parentOptions))
        .help('help')
        .alias('help', 'h')
        .usage(`\n${usage('USAGE')}: $0 ${usageStr}`)

      if (examples) {
        examples.forEach(({cli, desc}) => yargs.example(`$0 ${cli}`, desc))
      }
    })
}

export default function getOptions () {
  if (_opts) {
    return _opts
  }

  // Yes, the rc package could be used to handle this, but since it does much more than reading ~/.handoutrc I opted for a much simpler approach
  const rcpath = expandHomeDir('~/.handoutrc')

  let defaults = require('../../defaults.json')

  try {
    Object.assign(defaults, JSON.parse(fs.readFileSync(rcpath, { encoding: 'utf8' })))
    output(`Using default values from ${rcpath}`)
  } catch (e) {
    // No .handoutrc file found, moving on
    output(`No ${rcpath} file found`)
  }

  yargonaut
    .style('cyan')
    .style('yellow', 'required')
    .errorsStyle('red.bold')

  yargs
    .help('help')
    .alias('help', 'h')
    .usage(`\n${usage('USAGE')}: $0 ${cliArg('command')} [options]`)
    .epilogue(`To get a list of available options for each command, use "$0 ${cliArg('command')} -h" (e.g. "$0 ${cliArg('deploy')} -h")`)

  const {commands, globalOptions} = getCommands(defaults)

  commands.forEach(c => registerOptions(c, globalOptions))

  const raw = yargs.argv
  const [ command ] = raw._

  if (!command) {
    throw new Error('No command provided. Use -h to see available commands and options.')
  }

  _opts = {
    command,
    payload: {}
  }

  Object.keys(globalOptions).forEach(k => _opts[k] = raw[k])

  const commandDefinition = commands.find(c => c.command === command)

  if (commandDefinition.options) {
    Object.keys(commandDefinition.options).forEach(k => _opts.payload[ k ] = raw[ k ])
  }

  return _opts
}
