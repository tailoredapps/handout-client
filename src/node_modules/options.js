'use strict'

import expandHomeDir from 'expand-home-dir'
import fs from 'fs'
import yargonaut from 'yargonaut'
import yargs from 'yargs'

import getCommands from 'commands'
import output, { outputStyles } from 'output'

let _opts

const { usage, cliArg } = outputStyles

const payloadModifiers = new Map([
  [ 'user', function (payload) {
    const { action, pubkey } = payload

    if (action === 'remove') {
      return payload // Nothing to modify when removing a user
    }

    if (!pubkey) {
      throw new Error('No public key file specified.')
    }

    // Okay to use sync method here, since this is a commandline client (i.e. blocking the event loop for a short time does not matter)
    return Object.assign({}, payload, {pubkey: fs.readFileSync(expandHomeDir(pubkey), { encoding: 'utf8' })})
  } ]
])

function registerOptions ({ command, desc, usageStr, examples, options }, parentOptions) {
  yargs
    .command(command, desc, yargs => {
      yargs
        .options(Object.assign({}, options, parentOptions))
        .help('help')
        .alias('help', 'h')
        .usage(`\n${usage('USAGE')}: $0 ${usageStr}`)

      if (examples) {
        examples.forEach(({cli, desc}) => yargs.example(`$0 ${cli}`, desc))
      }
    })
}

export default function getOptions () {
  if (_opts) {
    return _opts
  }

  // Yes, the rc package could be used to handle this, but since it does much more than reading ~/.handoutrc I opted for a much simpler approach
  const rcpath = expandHomeDir('~/.handoutrc')

  let defaults = require('../../defaults.json')

  try {
    Object.assign(defaults, JSON.parse(fs.readFileSync(rcpath, { encoding: 'utf8' })))
    output(`Using default values from ${rcpath}`)
  } catch (e) {
    // No .handoutrc file found, moving on
    output(`No ${rcpath} file found`)
  }

  yargonaut
    .style('cyan')
    .style('yellow', 'required')
    .errorsStyle('red.bold')

  yargs
    .help('help')
    .alias('help', 'h')
    .usage(`\n${usage('USAGE')}: $0 ${cliArg('command')} [options]`)
    .epilogue(`To get a list of available options for each command, use "$0 ${cliArg('command')} -h" (e.g. "$0 ${cliArg('deploy')} -h")`)

  const { commands, globalOptions } = getCommands(defaults)

  commands.forEach(c => registerOptions(c, globalOptions))

  const raw = yargs.argv
  const [ command ] = raw._

  if (!command) {
    throw new Error('No command provided. Use -h to see available commands and options.')
  }

  _opts = {
    command
  }

  let payload = {}

  Object.keys(globalOptions).forEach(k => _opts[k] = raw[k])

  const commandDefinition = commands.find(c => c.command === command)

  if (commandDefinition.options) {
    Object.keys(commandDefinition.options).forEach(k => payload[ k ] = raw[ k ])
  }

  _opts.payload = payloadModifiers.has(command) ? payloadModifiers.get(command)(payload) : payload

  return _opts
}
