'use strict'

import { outputStyles } from 'output'

const { cliArg } = outputStyles

export default function getCommands (defaults) {
  const globalOptions = {
    'username': {
      alias: 'u',
      default: defaults.username || process.env.USER,
      describe: 'Username to use when connecting to deployment server'
    },
    'keyfile': {
      alias: 'k',
      default: defaults.keyfile,
      describe: 'Path to private key'
    },
    'server': {
      alias: 's',
      default: defaults.server,
      describe: 'Full server URL'
    },
    'debug': {
      type: 'boolean',
      default: defaults.debug || false,
      describe: 'Debug mode (enables -vvvv for playbooks, among other things)'
    }
  }

  const accountname = {
    alias: 'n',
    demand: true,
    describe: 'Account name'
  }

  const app = {
    alias: 'a',
    demand: true,
    describe: 'App identifier (e.g. deepsea, passerby, ...)'
  }

  const targets = {
    alias: 't',
    demand: true,
    array: true,
    describe: 'Space separated list of deployment targets (e.g. "--targets callisto titan")'
  }

  const commands = [
    {
      command: 'deploy',
      desc: 'deploy an application',
      usageStr: `deploy -a ${cliArg('appIdentifier')} -t ${cliArg('target')}[ ${cliArg('target')} ...]`,
      examples: [
        { cli: 'deploy -a deepsea -t callisto', desc: 'Deploy app "deepsea" to target "callisto"' },
        { cli: 'deploy -a passerby -t all -u some_user -k ~/.ssh/id_rsa.someuser --check', desc: 'Perform a mock-deployment of "passerby" to all available targets, connecting as user "some_user", using private key file "~/.ssh/id_rsa.someuser".' }
      ],
      options: {
        app,
        targets,
        'check': {
          alias: 'c',
          type: 'boolean',
          default: defaults.check,
          describe: "Perform check, don't change anything"
        },
        'no-pull': {
          alias: 'N',
          type: 'boolean',
          default: defaults.noPull || false,
          describe: 'Do not perform "git pull" on playbook repository before deployment'
        }
      }
    },
    {
      command: 'user-add',
      desc: 'add user account',
      usageStr: 'user-add -n accountname -p /path/to/id_rsa.pub',
      options: {
        accountname,
        'pubkey': {
          alias: 'p',
          demand: true,
          describe: 'Path to public key file'
        }
      }
    },
    {
      command: 'user-remove',
      desc: 'remove user account',
      usageStr: 'user-remove -n accountname',
      options: {
        accountname
      }
    },
    {
      command: 'user-list',
      desc: 'list user accounts'
    },
    {
      command: 'permission',
      desc: 'manage permissions',
      usageStr: 'permission -a appIdentifier -p permission -n username -t targets',
      examples: [
        { cli: 'permission -n admin -a all -t all -p grant', desc: 'grant permission to deploy all apps on all targets to user admin' }
      ],
      options: {
        accountname,
        app,
        targets,
        'permission': {
          alias: 'p',
          demand: true,
          choices: ['grant', 'deny'],
          describe: 'grant or deny permission to deploy specified app to selected targets'
        }
      }
    },
    {
      command: 'info',
      desc: 'Shows information about available apps, targets and permissions'
    }
  ]

  return {
    globalOptions,
    commands
  }
}
