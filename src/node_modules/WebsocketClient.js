'use strict'

import expandHomeDir from 'expand-home-dir'
import fs from 'fs'
import Promise from 'bluebird'
import ursa from 'ursa'
import Websocket from 'ws'

import output, { LEVEL_DEBUG, LEVEL_ERROR, LEVEL_OK, outputStyles} from 'output'

class WebsocketClient {
  constructor (opts) {
    this.opts = opts
  }

  connect () {
    return new Promise((resolve, reject) => {
      const {url} = this.opts

      this.socket = new Websocket(url)
      this.socket.on('open', () => resolve(this.socket))

      this.socket.on('message', (data) => {
        try {
          const {level, message, error} = JSON.parse(data)

          output(message, error ? LEVEL_ERROR : level, true)
        } catch (e) {
          output(`Failed to parse server response. Something weird might be happening. Error message: ${e.message}`, LEVEL_ERROR)
          output(`  Raw server response: ${data}`)
        }
      })

      this.socket.on('close', (code, message) => {
        if (code > 1000) {
          output(`Deployment failed with code ${outputStyles.error(code)}.`, LEVEL_ERROR)
        } else {
          output(`Deployment completed, closing connection to ${outputStyles.url(url)}.`, LEVEL_OK)
        }

        if (message) {
          output(`  Socket close message: ${message}`)
        }

        // if (code > 1000) {
        //    process.exit(1)
        // }
      })

      this.socket.on('error', err => reject(err))
    })
  }

  sendCommand ({ command, keyfile, payload, debug }) {
    const {username} = this.opts

    output(this.getInfoMessage(command, payload))

    if (debug) {
      output(`Reading private key file ${keyfile}.`, LEVEL_DEBUG)
    }

    const privKey = ursa.createPrivateKey(fs.readFileSync(expandHomeDir(keyfile), { encoding: 'utf8' }))

    if (debug) {
      output(`Private key file read. Encrypting command.`, LEVEL_DEBUG)
    }

    const cryptStr = privKey.privateEncrypt(JSON.stringify({ command, payload }))

    this.socket.send(JSON.stringify({ username, debug, cryptStr }))
  }

  getInfoMessage (command, payload) {
    const {username} = this.opts

    switch (command) {
      case 'deploy':
        const { app, targets } = payload
        return `Sending request to deploy ${outputStyles.app(app)} as user ${outputStyles.username(username)} to targets: ${targets.map(t => outputStyles.target(t)).join(', ')}.`

      case 'user':
        const { action, accountname } = payload
        const targetAccount = outputStyles.target(accountname)

        const msg = new Map([
          [ 'create', `to create user ${targetAccount}` ],
          [ 'add-pubkey', `add public key to account ${targetAccount}` ],
          [ 'remove-pubkey', `remove public key from account ${targetAccount}` ],
          [ 'remove', `remove account ${targetAccount}` ]
        ])

        return `Sending request to ${msg.get(action)}.`
    }
  }
}

export default WebsocketClient
